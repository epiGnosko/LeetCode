2025-08-19 05:02:42,978 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, folder='submissions', problem_folder_name='${question_id}-${title_slug}', no_problem_statement=False, problem_statement_filename='${question_id}-${title_slug}.md', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', only_accepted=False, only_last_submission=False, language_unprocessed=None, verbose=False, extra_verbose=False, language=None)
2025-08-19 05:02:42,978 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-19 05:03:40,021 [DEBUG] connectionpool.py:1049 - Starting new HTTPS connection (1): leetcode.com:443
2025-08-19 05:03:40,792 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-08-19 05:03:40,793 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1740192866,"question_id":101,"lang":"cpp","lang_name":"C++","time":"21Â minutes","timestamp":1755558743,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1740192866/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"18.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool symmetricEquality(TreeNode* left, TreeNode* right){\n        if ((left && !right) || (!left && right)) return false;\n        if (!left && !right) return true;\n        if (left->val != right->val) return false;\n        return symmetricEquality(left->left, right->right) && symmetricEquality(left->right,right->left);\n    }\n    bool isSymmetric(TreeNode* root) {\n        if (!root) return true;\n        return symmetricEquality(root->left, root->right);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1,"frontend_id":237}],"has_next":true,"last_key":""}
2025-08-19 05:03:41,793 [DEBUG] leetcode.py:112 - User is logged in
2025-08-19 05:03:41,794 [INFO] leetcode.py:95 - Cookie set successful
2025-08-19 05:03:41,794 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-08-19 05:03:42,408 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-08-19 05:03:42,409 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1740192866,"question_id":101,"lang":"cpp","lang_name":"C++","time":"21\xc2\xa0minutes","timestamp":1755558743,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1740192866/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"18.5 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool symmetricEquality(TreeNode* left, TreeNode* right){\\n        if ((left && !right) || (!left && right)) return false;\\n        if (!left && !right) return true;\\n        if (left->val != right->val) return false;\\n        return symmetricEquality(left->left, right->right) && symmetricEquality(left->right,right->left);\\n    }\\n    bool isSymmetric(TreeNode* root) {\\n        if (!root) return true;\\n        return symmetricEquality(root->left, root->right);\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1,"frontend_id":237},{"id":1740186834,"question_id":94,"lang":"cpp","lang_name":"C++","time":"37\xc2\xa0minutes","timestamp":1755557794,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1740186834/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"10.9 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void subinorderTraversal(TreeNode* root, vector<int> & ans){\\n        if (!root) return;\\n        subinorderTraversal(root->left,ans);\\n        ans.push_back(root->val);\\n        subinorderTraversal(root->right,ans);\\n    }\\n    vector<int> inorderTraversal(TreeNode* root) {\\n        vector<int> ans;\\n        subinorderTraversal(root,ans);\\n        return ans;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1,"frontend_id":236},{"id":1738421107,"question_id":100,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0day, 12\xc2\xa0hours","timestamp":1755428520,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1738421107/","is_pending":"Not Pending","title":"Same Tree","memory":"12.9 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool isSameTree(TreeNode* p, TreeNode* q) {\\n        if (p == NULL && q == NULL) return true;\\n        if (p == NULL && q != NULL) return false;\\n        if (p != NULL && q == NULL) return false;\\n        if (p->val != q->val) return false;\\n        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"same-tree","has_notes":false,"flag_type":1,"frontend_id":235},{"id":1736771768,"question_id":594,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755315849,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1736771768/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"19.2 MB","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = Counter(nums)\\n        ans = 0\\n        for i in count:\\n            if i+1 in count:\\n                ans = max(ans, count[i] + count[i+1])\\n        return ans\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":234},{"id":1736769809,"question_id":594,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755315642,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1736769809/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"19.2 MB","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        max = 0\\n        for i in count:\\n            if i+1 in count and count[i] + count[i+1] > max:\\n                max = count[i] + count[i+1]\\n        return max\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":233},{"id":1736767643,"question_id":594,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755315396,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1736767643/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"N/A","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        max = 0\\n        for i in count:\\n            for j in count:\\n                if i <= j:\\n                    continue\\n                if i-j == 1 and count[i] + count[j] > max:\\n                    max = count[i] + count[j]\\n        return max\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":232},{"id":1736767007,"question_id":594,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755315320,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1736767007/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"N/A","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        max = 0\\n        for i in count:\\n            for j in count:\\n                if i-j == 1 and count[i] + count[j] > max:\\n                    max = count[i] + count[j]\\n        return max\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":231},{"id":1736763584,"question_id":1448,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 20\xc2\xa0hours","timestamp":1755314917,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1736763584/","is_pending":"Not Pending","title":"Maximum 69 Number","memory":"17.6 MB","code":"class Solution:\\n    def maximum69Number (self, num: int) -> int:\\n        x = str(num)\\n        ans = x\\n        for i in range(len(x)):\\n            if x[i] == \\"6\\":\\n                ans = x[:i] + \\"9\\" + x[i+1:]\\n                break\\n        return int(ans)\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-69-number","has_notes":false,"flag_type":1,"frontend_id":230},{"id":1736762950,"question_id":1448,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 20\xc2\xa0hours","timestamp":1755314846,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1736762950/","is_pending":"Not Pending","title":"Maximum 69 Number","memory":"17.9 MB","code":"class Solution:\\n    def maximum69Number (self, num: int) -> int:\\n        x = list(str(num))\\n        ans = x\\n        for i in range(len(x)):\\n            if x[i] == \\"6\\":\\n                x[i] = \\"9\\"\\n                break\\n        return int(\\"\\".join(ans))\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-69-number","has_notes":false,"flag_type":1,"frontend_id":229},{"id":1736077347,"question_id":46,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755260260,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1736077347/","is_pending":"Not Pending","title":"Permutations","memory":"17.9 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":228},{"id":1736077176,"question_id":46,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755260249,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1736077176/","is_pending":"Not Pending","title":"Permutations","memory":"18.2 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":227},{"id":1736077020,"question_id":46,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755260239,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1736077020/","is_pending":"Not Pending","title":"Permutations","memory":"18.2 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":226},{"id":1736076926,"question_id":46,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755260234,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1736076926/","is_pending":"Not Pending","title":"Permutations","memory":"18.1 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":225},{"id":1736076728,"question_id":46,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755260222,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1736076728/","is_pending":"Not Pending","title":"Permutations","memory":"17.9 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":224},{"id":1736063852,"question_id":45,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755259416,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1736063852/","is_pending":"Not Pending","title":"Jump Game II","memory":"18.6 MB","code":"class Solution:\\n    def jump(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        if n <= 1:\\n            return 0\\n        \\n        jumps = 0\\n        current_end = 0\\n        farthest = 0\\n        \\n        for i in range(n - 1):\\n            farthest = max(farthest, i + nums[i])\\n            if i == current_end:\\n                jumps += 1\\n                current_end = farthest\\n                if current_end >= n - 1:\\n                    break\\n        return jumps","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":223},{"id":1736059074,"question_id":45,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755259102,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1736059074/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"class Solution:\\n    def jump(self, nums: List[int]) -> int:\\n        def recursive(nums: List[int], curindex: int):\\n            if curindex >= len(nums) - 1:\\n                return 0\\n            elif nums[curindex] == 0:\\n                return 9999999999\\n            else:\\n                return 1 + min([recursive(nums, curindex + i) for i in range(1, nums[curindex] + 1)])\\n\\n        return recursive(nums, 0)\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":222},{"id":1736058615,"question_id":45,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755259070,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1736058615/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"class Solution:\\n    def jump(self, nums: List[int]) -> int:\\n        def recursive(nums: List[int], curindex: int):\\n            if curindex == len(nums) - 1:\\n                return 0\\n            elif nums[curindex] == 0:\\n                return 9999999999\\n            else:\\n                return 1 + min([recursive(nums, curindex + i) for i in range(1, nums[curindex] + 1)])\\n\\n        return recursive(nums, 0)\\n        ","compare_result":"11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":221},{"id":1736049426,"question_id":2998,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755258489,"status":10,"status_display":"Accepted","runtime":"439 ms","url":"/submissions/detail/1736049426/","is_pending":"Not Pending","title":"  Count Symmetric Integers","memory":"17.8 MB","code":"class Solution:\\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\\n        def isSymmetric(i: int) -> int:\\n            x = i\\n            n = 0\\n            while x > 0:\\n                n += 1\\n                x //= 10\\n            if n % 2 == 1:\\n                return False\\n            sum1 = 0\\n            threshold = n / 2\\n            while n > threshold:\\n                sum1 += i % 10\\n                i //= 10\\n                n -= 1\\n            sum2 = 0\\n            while n > 0:\\n                sum2 += i % 10\\n                i //= 10\\n                n-=1\\n            return sum1 == sum2\\n\\n        count = 0\\n        for i in range(low, high + 1):\\n            if isSymmetric(i):\\n                count += 1\\n        return count ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-symmetric-integers","has_notes":false,"flag_type":1,"frontend_id":220},{"id":1735628846,"question_id":342,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755233037,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1735628846/","is_pending":"Not Pending","title":"Power of Four","memory":"17.6 MB","code":"class Solution:\\n    def isPowerOfFour(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while n & 11 == 0:\\n            n = n >> 2\\n        return n == 1\\n        ","compare_resulttitle_slug":"power-of-four","has_notes":false,"flag_type":1,"frontend_id":219},{"id":1734837986,"question_id":278,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 12\xc2\xa0hours","timestamp":1755168866,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1734837986/","is_pending":"Not Pending","title":"First Bad Version","memory":"17.7 MB","code":"# The isBadVersion API is already defined for you.\\n# def isBadVersion(version: int) -> bool:\\n\\nclass Solution:\\n    def firstBadVersion(self, n: int) -> int:\\n        start = 1\\n        end = n\\n        mid = (start + end) // 2\\n        while start < end:\\n            if isBadVersion(mid):\\n                end = mid\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2 \\n        return mid\\n        ","compare_result":"111111111111111111111111","title_slug":"first-bad-version","has_notes":false,"flag_type":1,"frontend_id":218}],"has_next":true,"last_key":""}'
2025-08-19 05:03:42,823 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:42,824 [INFO] __main__.py:245 - Writing symmetric-tree/2025-08-19 04.42.23 - Accepted - runtime 0ms - memory 18.5MB.cpp
2025-08-19 05:03:43,220 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:43,221 [INFO] __main__.py:245 - Writing binary-tree-inorder-traversal/2025-08-19 04.26.34 - Accepted - runtime 0ms - memory 10.9MB.cpp
2025-08-19 05:03:43,642 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:43,643 [INFO] __main__.py:245 - Writing same-tree/2025-08-17 16.32.00 - Accepted - runtime 0ms - memory 12.9MB.cpp
2025-08-19 05:03:44,156 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:44,157 [INFO] __main__.py:245 - Writing longest-harmonious-subsequence/2025-08-16 09.14.09 - Accepted - runtime 16ms - memory 19.2MB.py
2025-08-19 05:03:44,157 [INFO] __main__.py:245 - Writing longest-harmonious-subsequence/2025-08-16 09.10.42 - Accepted - runtime 31ms - memory 19.2MB.py
2025-08-19 05:03:44,157 [INFO] __main__.py:245 - Writing longest-harmonious-subsequence/2025-08-16 09.06.36 - Time Limit Exceeded - runtime NA - memory NA.py
2025-08-19 05:03:44,158 [INFO] __main__.py:245 - Writing longest-harmonious-subsequence/2025-08-16 09.05.20 - Time Limit Exceeded - runtime NA - memory NA.py
2025-08-19 05:03:44,558 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:44,558 [INFO] __main__.py:245 - Writing maximum-69-number/2025-08-16 08.58.37 - Accepted - runtime 0ms - memory 17.6MB.py
2025-08-19 05:03:44,559 [INFO] __main__.py:245 - Writing maximum-69-number/2025-08-16 08.57.26 - Accepted - runtime 0ms - memory 17.9MB.py
2025-08-19 05:03:44,968 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:44,970 [INFO] __main__.py:245 - Writing permutations/2025-08-15 17.47.40 - Accepted - runtime 4ms - memory 17.9MB.py
2025-08-19 05:03:44,970 [INFO] __main__.py:245 - Writing permutations/2025-08-15 17.47.29 - Accepted - runtime 3ms - memory 18.2MB.py
2025-08-19 05:03:44,970 [INFO] __main__.py:245 - Writing permutations/2025-08-15 17.47.19 - Accepted - runtime 3ms - memory 18.2MB.py
2025-08-19 05:03:44,970 [INFO] __main__.py:245 - Writing permutations/2025-08-15 17.47.14 - Accepted - runtime 3ms - memory 18.1MB.py
2025-08-19 05:03:44,971 [INFO] __main__.py:245 - Writing permutations/2025-08-15 17.47.02 - Accepted - runtime 1ms - memory 17.9MB.py
2025-08-19 05:03:45,487 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:45,490 [INFO] __main__.py:245 - Writing jump-game-ii/2025-08-15 17.33.36 - Accepted - runtime 8ms - memory 18.6MB.py
2025-08-19 05:03:45,490 [INFO] __main__.py:245 - Writing jump-game-ii/2025-08-15 17.28.22 - Time Limit Exceeded - runtime NA - memory NA.py
2025-08-19 05:03:45,490 [INFO] __main__.py:245 - Writing jump-game-ii/2025-08-15 17.27.50 - Runtime Error - runtime NA - memory NA.py
2025-08-19 05:03:46,000 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:46,000 [INFO] __main__.py:245 - Writing count-symmetric-integers/2025-08-15 17.18.09 - Accepted - runtime 439ms - memory 17.8MB.py
2025-08-19 05:03:46,407 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:46,408 [INFO] __main__.py:245 - Writing power-of-four/2025-08-15 10.13.57 - Accepted - runtime 0ms - memory 17.6MB.py
2025-08-19 05:03:46,717 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:46,718 [INFO] __main__.py:250 - first-bad-version/2025-08-14 16.24.26 - Accepted - runtime 36ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:03:51,719 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-08-19 05:03:52,137 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-08-19 05:03:52,138 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1734835928,"question_id":278,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 12\xc2\xa0hours","timestamp":1755168716,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1734835928/","is_pending":"Not Pending","title":"First Bad Version","memory":"17.8 MB","code":"# The isBadVersion API is already defined for you.\\n# def isBadVersion(version: int) -> bool:\\n\\nclass Solution:\\n    def firstBadVersion(self, n: int) -> int:\\n        start = 1\\n        end = n\\n        mid = (start + end) // 2\\n        while start < end:\\n            if isBadVersion(mid):\\n                end = mid\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2 \\n        return mid\\n        ","compare_result":"111111111111111111111111","title_slug":"first-bad-version","has_notes":false,"flag_type":1,"frontend_id":217},{"id":1734789135,"question_id":34,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 13\xc2\xa0hours","timestamp":1755165441,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1734789135/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"19.1 MB","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        def findFirst(nums, target):\\n            start, end = 0, len(nums) - 1\\n            first = -1\\n            while start <= end:\\n                mid = (start + end) // 2\\n                if nums[mid] >= target:\\n                    if nums[mid] == target:\\n                        first = mid\\n                    end = mid - 1\\n                else:\\n                    start = mid + 1\\n            return first\\n\\n        def findLast(nums, target):\\n            start, end = 0, len(nums) - 1\\n            last = -1\\n            while start <= end:\\n                mid = (start + end) // 2\\n                if nums[mid] <= target:\\n                    if nums[mid] == target:\\n                        last = mid\\n                    start = mid + 1\\n                else:\\n                    end = mid - 1\\n            return last\\n\\n        return [findFirst(nums, target), findLast(nums, target)]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":216},{"id":1734746825,"question_id":34,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 14\xc2\xa0hours","timestamp":1755162669,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1734746825/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        if nums == [] :\\n            return [-1, -1]\\n        start = 0\\n        end = len(nums) - 1\\n        if start == end:\\n            if nums[start] == target:\\n                return [start, end]\\n            else:\\n                return [-1,-1]\\n        while start < end:\\n            midstart = (start + end) // 2\\n            if nums[midstart] == target:\\n                if nums[midstart - 1] != target or midstart == 0:\\n                    break\\n                else:\\n                    end = midstart\\n            elif nums[midstart] < target:\\n                start = midstart + 1\\n            else:\\n                end = midstart\\n        if nums[midstart] != target:\\n            return [-1,-1]\\n        start = 0\\n        end = len(nums) - 1\\n        while start < end:\\n            midend = (start + end) // 2\\n            if nums[midend] == target:\\n                if midend == len(nums) - 1 or nums[midend + 1] != target:\\n                    break\\n                else:\\n                    start = midend + 1\\n            elif nums[midend] < target:\\n                start = midend + 1\\n            else:\\n                end = midend\\n        return [midstart, midend]","compare_result":"1111111010111010100111111010111111011111110110111100111110111111111110111111101110001011","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":215},{"id":1734745378,"question_id":34,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 14\xc2\xa0hours","timestamp":1755162572,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1734745378/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        if nums == [] :\\n            return [-1, -1]\\n        start = 0\\n        end = len(nums) - 1\\n        while start < end:\\n            midstart = (start + end) // 2\\n            if nums[midstart] == target:\\n                if nums[midstart - 1] != target or midstart == 0:\\n                    break\\n                else:\\n                    end = midstart\\n            elif nums[midstart] < target:\\n                start = midstart + 1\\n            else:\\n                end = midstart\\n        if nums[midstart] != target:\\n            return [-1,-1]\\n        start = 0\\n        end = len(nums) - 1\\n        while start < end:\\n            midend = (start + end) // 2\\n            if nums[midend] == target:\\n                if midend == len(nums) - 1 or nums[midend + 1] != target:\\n                    break\\n                else:\\n                    start = midend + 1\\n            elif nums[midend] < target:\\n                start = midend + 1\\n            else:\\n                end = midend\\n        return [midstart, midend]","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":214},{"id":1734471904,"question_id":49,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755145169,"status":10,"status_display":"Accepted","runtime":"2963 ms","url":"/submissions/detail/1734471904/","is_pending":"Not Pending","title":"Group Anagrams","memory":"22 MB","code":"class Solution:\\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\\n        counters = []\\n        for i in range(len(strs)):\\n            counters.append({})\\n            for char in strs[i]:\\n                if char in counters[i]:\\n                    counters[i][char] += 1\\n                else:\\n                    counters[i][char] = 1\\n        ans = []\\n        while strs != []:\\n            currhash = counters[0]\\n            indices = []\\n            group = []\\n            index = 0\\n            while index < len(strs):\\n                if counters[index] == currhash:\\n                    indices.append(index)\\n                index += 1\\n            for i in sorted(indices, reverse=True):\\n                group.append(strs.pop(i))\\n                counters.pop(i)\\n            ans.append(group.copy())\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1,"frontend_id":213},{"id":1734442533,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755142963,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1734442533/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.9 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        i = 0\\n        while i < len(num)-2:\\n            if num[i] == num[i+1] == num[i+2]:\\n                if curr == \\"\\" or curr[0] < num[i]:\\n                    curr = num[i:i+3]\\n                i += 3\\n            elif num[i+1] == num[i+2]:\\n                i += 1\\n            else:\\n                i += 2\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":212},{"id":1734441855,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755142913,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1734441855/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.9 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        i = 0\\n        while i < len(num)-2:\\n            if num[i] == num[i+1] == num[i+2]:\\n                if curr == \\"\\" or curr[0] < num[i]:\\n                    curr = num[i:i+3]\\n                i += 3\\n            elif num[i+1] == num[i+2]:\\n                i += 1\\n            else:\\n                i += 2\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":211},{"id":1734440075,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755142764,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1734440075/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.7 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        for i in range(len(num)-2):\\n            if num[i] == num[i+1] == num[i+2]:\\n                if curr == \\"\\" or curr[0] < num[i]:\\n                    curr = num[i:i+3]\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":210},{"id":1734437862,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755142576,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1734437862/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.8 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        valids = [\\"999\\",\\"888\\",\\"777\\",\\"666\\",\\"555\\",\\"444\\",\\"333\\",\\"222\\",\\"111\\",\\"000\\"]\\n        for i in range(len(num)-2):\\n            for j in valids:\\n                if j == curr:\\n                    break\\n                if num[i:i+3] == j:\\n                    curr = j\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":209},{"id":1733871170,"question_id":50,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 8\xc2\xa0hours","timestamp":1755097450,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1733871170/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n == 0:\\n            return 1\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = x\\n        currentpower = 1\\n        while (currentpower < n//2):\\n            prod *= prod\\n            currentpower *=2\\n        while currentpower < n:\\n            prod *= x\\n            currentpower += 1\\n        return prod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":208},{"id":1733669600,"question_id":168,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755086153,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1733669600/","is_pending":"Not Pending","title":"Excel Sheet Column Title","memory":"17.8 MB","code":"class Solution:\\n    def convertToTitle(self, columnNumber: int) -> str:\\n        alphas = [columnNumber - 1]\\n        while alphas[0] > 25:\\n            alphas = [alphas[0] // 26 - 1] + alphas\\n            alphas[1] = alphas[1]%26\\n        print(alphas)\\n        ans = \\"\\"\\n        for i in alphas:\\n            ans += chr(i + 65)\\n        return ans\\n        ","compare_result":"1111111111111111111111","title_slug":"excel-sheet-column-title","has_notes":false,"flag_type":1,"frontend_id":207},{"id":1733659995,"question_id":168,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 11\xc2\xa0hours","timestamp":1755085470,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1733659995/","is_pending":"Not Pending","title":"Excel Sheet Column Title","memory":"N/A","code":"class Solution:\\n    def convertToTitle(self, columnNumber: int) -> str:\\n        alphas = [columnNumber]\\n        while alphas[0] > 26:\\n            alphas = [alphas[0]//26] + alphas\\n            alphas[1] = alphas[1] % 26\\n        ans = \\"\\"\\n        for i in alphas:\\n            ans += chr(i+64)\\n        return ans","compare_result":"1111111110110111101000","title_slug":"excel-sheet-column-title","has_notes":false,"flag_type":1,"frontend_id":206},{"id":1733408709,"question_id":342,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 16\xc2\xa0hours","timestamp":1755069381,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1733408709/","is_pending":"Not Pending","title":"Power of Four","memory":"17.9 MB","code":"class Solution:\\n    def isPowerOfFour(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while n & 11 == 0:\\n            n = n >> 2\\n        return n == 1\\n        ","compare_resulttitle_slug":"power-of-four","has_notes":false,"flag_type":1,"frontend_id":205},{"id":1733384888,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 16\xc2\xa0hours","timestamp":1755068023,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1733384888/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.6 MB","code":"class Solution:    \\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        rows = [{},{},{},{},{},{},{},{},{}]\\n        cols = [{},{},{},{},{},{},{},{},{}]\\n        grid = [{},{},{},{},{},{},{},{},{}]\\n        \\n        for r in range(9):\\n            for c in range(9):\\n                if board[r][c] == \\".\\":\\n                    continue\\n                elif board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in grid[(c//3)*3 + r//3]:\\n                    return False\\n                rows[r][board[r][c]] = 1\\n                cols[c][board[r][c]] = 1\\n                grid[((c//3)*3 + r//3)][board[r][c]] = 1\\n                    \\n        return True    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":204},{"id":1733377613,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 16\xc2\xa0hours","timestamp":1755067643,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1733377613/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:    \\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        rows = [{},{},{},{},{},{},{},{},{}]\\n        cols = [{},{},{},{},{},{},{},{},{}]\\n        grid = [{},{},{},{},{},{},{},{},{}]\\n        \\n        for r in range(9):\\n            for c in range(9):\\n                if board[r][c] == \\".\\":\\n                    continue\\n                else:\\n                    if board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in grid[(c//3)*3 + r//3]:\\n                        return False\\n                    rows[r][board[r][c]] = 1\\n                    cols[c][board[r][c]] = 1\\n                    grid[((c//3)*3 + r//3)][board[r][c]] = 1\\n                    \\n        return True    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":203},{"id":1733367549,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 16\xc2\xa0hours","timestamp":1755067103,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1733367549/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        res = set()\\n        for i in range(9):\\n            for j in range(9):\\n                element = board[i][j]\\n                fun = ((i,element),(element,j), (i//3, j//3, element))\\n                if element == \'.\':\\n                    continue\\n                else:\\n                    for k in fun:\\n                        if k in res:\\n                            print(\\"dup found\\", k)\\n                            return False\\n                        res.add(k)\\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":202},{"id":1733356654,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 17\xc2\xa0hours","timestamp":1755066541,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1733356654/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.9 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        res = []\\n        for i in range(9):\\n            for j in range(9):\\n                element = board[i][j]\\n                if element != \'.\':\\n                    res += [(i, element), (element, j), (i // 3, j // 3, element)]\\n        return len(res) == len(set(res))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":201},{"id":1733353581,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 17\xc2\xa0hours","timestamp":1755066381,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1733353581/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # Checking rows and columns\\n        for i in range(9):\\n            count_r = {}\\n            count_c = {}\\n            for j in range(9):\\n                if board[i][j] != \\".\\":\\n                    if board[i][j] in count_r:\\n                        return False\\n                    count_r[board[i][j]] = 1\\n\\n                if board[j][i] != \\".\\":\\n                    if board[j][i] in count_c:\\n                        return False\\n                    count_c[board[j][i]] = 1\\n\\n        # Checking 3x3 sub-boxes\\n        for i in (0, 3, 6):\\n            for j in (0, 3, 6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        val = board[i + del_i][j + del_j]\\n                        if val == \\".\\":\\n                            continue\\n                        if val in count:\\n                            return False\\n                        count[val] = 1\\n\\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":200},{"id":1733351894,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 17\xc2\xa0hours","timestamp":1755066294,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1733351894/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"N/A","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # checking rows and columns\\n        for i in range(9):\\n            count_r = {}\\n            count_c = {}\\n            for j in range(9):\\n                if board[i][j] == \\".\\":\\n                    continue\\n                if board[i][j] not in count_r:\\n                    count_r[board[i][j]] = 1\\n                else:\\n                    return False\\n                if board[j][i] == \\".\\":\\n                    continue\\n                if board[j][i] not in count_c:\\n                    count_c[board[j][i]] = 1\\n                else:\\n                    print(board[j][j], j, i)\\n                    return False\\n\\n        # checking sub-boxes\\n        for i in (0,3,6):\\n            for j in (0,3,6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        if board[i + del_i][j + del_j] == \\".\\":\\n                            continue\\n                        if board[i + del_i][j + del_j] not in count:\\n                            count[board[i + del_i][j + del_j]] = 1\\n                        else:\\n                            return False\\n        \\n        return True","compare_result":"111110111111011111111111111111111111111111111111111011111111111111111111111111111111111101111111111011111011111011111111110111111111111101111111111111111111111101110011111111111110111101111111111111101111111111011011111111111111111110111111110100111111111111111111110001111101111111100111111110111111110111111110011011111101111111111111111111011110111111111111111110111111111111111111110110011111111111011111110110111111110101101111111111111111110111111111101110111111111111101111111111111011111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":199},{"id":1733342892,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 17\xc2\xa0hours","timestamp":1755065839,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1733342892/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # checking rows and columns\\n        for i in range(9):\\n            count = {}\\n            for j in range(9):\\n                if board[i][j] == \\".\\":\\n                    continue\\n                if board[i][j] not in count:\\n                    count[board[i][j]] = 1\\n                else:\\n                    return False\\n\\n        for j in range(9):\\n            count = {}\\n            for i in range(9):\\n                if board[i][j] == \\".\\":\\n                    continue\\n                if board[i][j] not in count:\\n                    count[board[i][j]] = 1\\n                else:\\n                    return False\\n\\n        # checking sub-boxes\\n        for i in (0,3,6):\\n            for j in (0,3,6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        if board[i + del_i][j + del_j] == \\".\\":\\n                            continue\\n                        if board[i + del_i][j + del_j] not in count:\\n                            count[board[i + del_i][j + del_j]] = 1\\n                        else:\\n                            return False\\n        \\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":198}],"has_next":true,"last_key":""}'
2025-08-19 05:03:52,138 [INFO] __main__.py:250 - first-bad-version/2025-08-14 16.21.56 - Accepted - runtime 40ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:03:52,748 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:52,749 [INFO] __main__.py:250 - find-first-and-last-position-of-element-in-sorted-array/2025-08-14 15.27.21 - Accepted - runtime 0ms - memory 19.1MB.py already exists, skipping it
2025-08-19 05:03:52,749 [INFO] __main__.py:250 - find-first-and-last-position-of-element-in-sorted-array/2025-08-14 14.41.09 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:03:52,750 [INFO] __main__.py:250 - find-first-and-last-position-of-element-in-sorted-array/2025-08-14 14.39.32 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:03:53,162 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:53,163 [INFO] __main__.py:250 - group-anagrams/2025-08-14 09.49.29 - Accepted - runtime 2963ms - memory 22MB.py already exists, skipping it
2025-08-19 05:03:53,569 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:53,570 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.12.43 - Accepted - runtime 3ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:03:53,570 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.11.53 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:03:53,570 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.09.24 - Accepted - runtime 3ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:03:53,571 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.06.16 - Accepted - runtime 9ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:03:53,980 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:53,981 [INFO] __main__.py:250 - powx-n/2025-08-13 20.34.10 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:03:54,595 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:54,596 [INFO] __main__.py:250 - excel-sheet-column-title/2025-08-13 17.25.53 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:03:54,596 [INFO] __main__.py:250 - excel-sheet-column-title/2025-08-13 17.14.30 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:03:54,597 [INFO] __main__.py:250 - power-of-four/2025-08-13 12.46.21 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:03:55,104 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:03:55,105 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 12.23.43 - Accepted - runtime 3ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:03:55,105 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 12.17.23 - Accepted - runtime 1ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:03:55,106 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 12.08.23 - Accepted - runtime 7ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:03:55,106 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.59.01 - Accepted - runtime 3ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:03:55,106 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.56.21 - Accepted - runtime 6ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:03:55,106 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.54.54 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:03:55,106 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.47.19 - Accepted - runtime 5ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:00,106 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-08-19 05:04:00,844 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:00,845 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1733335610,"question_id":36,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 17\xc2\xa0hours","timestamp":1755065476,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1733335610/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.6 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # checking rows and columns\\n        for i in range(9):\\n            for j in range(9):\\n                if board[i][j] != \\".\\":\\n                    for k in range(9):\\n                        if (board[k][j] == board[i][j] and i != k) or (board[i][k] == board[i][j] and j != k):\\n                            return False\\n\\n        # checking sub-boxes\\n        for i in (0,3,6):\\n            for j in (0,3,6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        if board[i + del_i][j + del_j] == \\".\\":\\n                            continue\\n                        if board[i + del_i][j + del_j] not in count:\\n                            count[board[i + del_i][j + del_j]] = 1\\n                        else:\\n                            return False\\n        \\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":197},{"id":1733275246,"question_id":326,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755062322,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1733275246/","is_pending":"Not Pending","title":"Power of Three","memory":"18 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        return 3486784401 % n == 0","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":196},{"id":1733267587,"question_id":326,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755061931,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1733267587/","is_pending":"Not Pending","title":"Power of Three","memory":"17.7 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while n % 3 == 0:\\n            n /= 3\\n        return n == 1","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":195},{"id":1733265092,"question_id":326,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755061796,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1733265092/","is_pending":"Not Pending","title":"Power of Three","memory":"17.9 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        i = 1\\n        while i < n:\\n            i *= 3\\n        return i == n","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":194},{"id":1733256587,"question_id":326,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755061338,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/1733256587/","is_pending":"Not Pending","title":"Power of Three","memory":"18 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        if n < 0:\\n            return False\\n        while n > 1:\\n            n /= 3\\n        return n == 1\\n        ","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":193},{"id":1732368894,"question_id":191,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 12\xc2\xa0hours","timestamp":1754998424,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1732368894/","is_pending":"Not Pending","title":"Number of 1 Bits","memory":"17.7 MB","code":"class Solution:\\n    def hammingWeight(self, n: int) -> int:\\n        count = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                count += 1\\n            n = n >> 1\\n        return count ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-1-bits","has_notes":false,"flag_type":1,"frontend_id":192},{"id":1732163601,"question_id":3973,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 15\xc2\xa0hours","timestamp":1754984297,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1732163601/","is_pending":"Not Pending","title":"Flip Square Submatrix Vertically","memory":"18.2 MB","code":"class Solution:\\n    def reverseSubmatrix(self, grid: List[List[int]], x: int, y: int, k: int) -> List[List[int]]:\\n        for i in range(k//2):\\n            for j in range(k):  \\n                temp = grid[x+i][y + j]\\n                grid[x+i][y + j] = grid[x+k-i-1][y + j]\\n                grid[x+k-i-1][y + j] = temp\\n        return grid","compare_resulttitle_slug":"flip-square-submatrix-vertically","has_notes":false,"flag_type":1,"frontend_id":191},{"id":1732134990,"question_id":70,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 16\xc2\xa0hours","timestamp":1754982340,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1732134990/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"17.8 MB","code":"class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        if n <= 3:\\n            return n\\n        \\n        jump1 = 3\\n        jump2 = 2\\n        ans = 0\\n\\n        for _ in range(n-3):\\n            ans = jump1 + jump2\\n            jump2 = jump1\\n            jump1 = ans\\n\\n        return ans","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":190},{"id":1732127969,"question_id":70,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 16\xc2\xa0hours","timestamp":1754981910,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1732127969/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"N/A","code":"class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        count = 0\\n        def backtrack(sum: int, target: int):\\n            nonlocal count\\n            if sum == target:\\n                count += 1\\n                return \\n            if sum > target:\\n                return\\n            \\n            backtrack(sum + 1, target)\\n            backtrack(sum + 2, target)\\n\\n        backtrack(0, n)\\n        return count\\n        ","compare_result":"111111111111111100000000000000000000000000000","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":189},{"id":1731929090,"question_id":88,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1754969183,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1731929090/","is_pending":"Not Pending","title":"Merge Sorted Array","memory":"17.8 MB","code":"class Solution:\\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\\n        i = m - 1  \\n        j = n - 1  \\n        k = m + n - 1  \\n\\n        while i >= 0 and j >= 0:\\n            if nums1[i] > nums2[j]:\\n                nums1[k] = nums1[i]\\n                i -= 1\\n            else:\\n                nums1[k] = nums2[j]\\n                j -= 1\\n            k -= 1\\n\\n        while j >= 0:\\n            nums1[k] = nums2[j]\\n            j -= 1\\n            k -= 1\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"merge-sorted-array","has_notes":false,"flag_type":1,"frontend_id":188},{"id":1731920522,"question_id":2882,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1754968391,"status":10,"status_display":"Accepted","runtime":"293 ms","url":"/submissions/detail/1731920522/","is_pending":"Not Pending","title":"Ways to Express an Integer as Sum of Powers","memory":"17.9 MB","code":"\\nclass Solution:\\n    def numberOfWays(self, n: int, x: int) -> int:\\n        mod = 10**9 + 7\\n        powers = []\\n        i = 1\\n        p = i ** x\\n        while p <= n:\\n            powers.append(p)\\n            i += 1\\n            p = i ** x\\n\\n        dp = [0] * (n + 1)\\n        dp[0] = 1\\n        for p in powers:\\n            for s in range(n, p - 1, -1):\\n                dp[s] = (dp[s] + dp[s - p]) % mod\\n\\n        return dp[n]\\n","compare_resulttitle_slug":"ways-to-express-an-integer-as-sum-of-powers","has_notes":false,"flag_type":1,"frontend_id":187},{"id":1731915583,"question_id":2882,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1754967908,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1731915583/","is_pending":"Not Pending","title":"Ways to Express an Integer as Sum of Powers","memory":"N/A","code":"class Solution:\\n    def numberOfWays(self, n: int, x: int) -> int:\\n        mod = 10**9 + 7\\n        count = 0\\n\\n        def backtrack(exploring : List[int], n: int, x:int):\\n            nonlocal count\\n            s = 0\\n            for i in exploring:\\n                s += i**x\\n            \\n            if s > n:\\n                return\\n            if s == n:\\n\\n                count += 1\\n                return\\n\\n            if exploring == []:\\n                addition = 1\\n            else:\\n                addition = exploring[-1] + 1\\n\\n            while addition**x <= n:\\n                backtrack(exploring + [addition], n, x)\\n                addition += 1\\n            \\n        backtrack([], n, x)\\n        return count \\n        \\n\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"ways-to-express-an-integer-as-sum-of-powers","has_notes":false,"flag_type":1,"frontend_id":186},{"id":1731013437,"question_id":40,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754902802,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1731013437/","is_pending":"Not Pending","title":"Combination Sum II","memory":"18 MB","code":"class Solution:\\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\\n        ans = []\\n        ds = []\\n        candidates.sort()\\n\\n\\n        def findCombination(ind, target):\\n            if target == 0:\\n                ans.append(ds[:])\\n                return\\n            for i in range(ind, len(candidates)):\\n                if i > ind and candidates[i] == candidates[i - 1]:\\n                    continue\\n                if candidates[i] > target:\\n                    break\\n                ds.append(candidates[i])\\n                findCombination(i + 1, target - candidates[i])\\n                ds.pop()\\n\\n\\n        findCombination(0, target)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":185},{"id":1731008679,"question_id":40,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754902482,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1731008679/","is_pending":"Not Pending","title":"Combination Sum II","memory":"17.8 MB","code":"class Solution:\\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\\n        def backtrack(start: int, path: List[int], remainingTarget: int):\\n            if remainingTarget == 0:\\n                ans.append(path[:])\\n                return\\n            if remainingTarget < 0:\\n                return\\n            \\n            for i in range(start, len(candidates)):\\n                if i > start and candidates[i] == candidates[i - 1]:\\n                    continue\\n                path.append(candidates[i])\\n                backtrack(i + 1, path, remainingTarget - candidates[i])\\n                path.pop()\\n        \\n        candidates.sort()\\n        ans = []\\n        backtrack(0, [], target)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":184},{"id":1731003919,"question_id":40,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754902153,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1731003919/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"class Solution:\\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\\n        def backtrack(nums: List[int], rest: List[int], remainingTarget: int):\\n            if nums in ans or remainingTarget < 0:\\n                return\\n            if remainingTarget == 0:\\n                ans.append(nums[:])\\n                return\\n            \\n            for i in range(len(rest)):\\n                backtrack(nums + [rest[i]], rest[i+1:], remainingTarget - rest[i])\\n\\n        ans = []\\n        candidates = sorted(candidates)\\n        backtrack([], candidates, target)\\n        return ans\\n\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":183},{"id":1730926131,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754896173,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730926131/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        # powers.pop(0)\\n        ans = []\\n        # for left, right in queries:\\n        #     result = powers[right]\\n        #     if left != 0:\\n        #         result -= powers[left - 1]\\n        #     result = (1 << result) % mod\\n        #     ans.append(result)\\n        ans = [((1 << (powers[right + 1] - (powers[left] if left > 1 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1110110001101001011011100010100000010010000101011111101001011101100110","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":182},{"id":1730741063,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883629,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1730741063/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":181},{"id":1730740929,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883615,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1730740929/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        ans = [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":180},{"id":1730740643,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883586,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1730740643/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans =  [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":179},{"id":1730740409,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883564,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1730740409/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        return [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":178}],"has_next":true,"last_key":""}'
2025-08-19 05:04:00,847 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.41.16 - Accepted - runtime 6ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:04:01,257 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:01,257 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.48.42 - Accepted - runtime 4ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:01,263 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.42.11 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:01,263 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.39.56 - Accepted - runtime 7ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:01,264 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.32.18 - Accepted - runtime 35ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:01,766 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:01,767 [INFO] __main__.py:250 - number-of-1-bits/2025-08-12 17.03.44 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:02,287 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:02,288 [INFO] __main__.py:250 - flip-square-submatrix-vertically/2025-08-12 13.08.17 - Accepted - runtime 4ms - memory 18.2MB.py already exists, skipping it
2025-08-19 05:04:02,685 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:02,686 [INFO] __main__.py:250 - climbing-stairs/2025-08-12 12.35.40 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:02,686 [INFO] __main__.py:250 - climbing-stairs/2025-08-12 12.28.30 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:03,090 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:03,091 [INFO] __main__.py:250 - merge-sorted-array/2025-08-12 08.56.23 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:03,509 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:03,509 [INFO] __main__.py:250 - ways-to-express-an-integer-as-sum-of-powers/2025-08-12 08.43.11 - Accepted - runtime 293ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:03,509 [INFO] __main__.py:250 - ways-to-express-an-integer-as-sum-of-powers/2025-08-12 08.35.08 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:03,909 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:03,910 [INFO] __main__.py:250 - combination-sum-ii/2025-08-11 14.30.02 - Accepted - runtime 5ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:03,910 [INFO] __main__.py:250 - combination-sum-ii/2025-08-11 14.24.42 - Accepted - runtime 23ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:03,910 [INFO] __main__.py:250 - combination-sum-ii/2025-08-11 14.19.13 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:04,311 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:04,312 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 12.39.33 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:04,313 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.10.29 - Accepted - runtime 40ms - memory 48.2MB.py already exists, skipping it
2025-08-19 05:04:04,313 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.10.15 - Accepted - runtime 38ms - memory 48.2MB.py already exists, skipping it
2025-08-19 05:04:04,313 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.09.46 - Accepted - runtime 40ms - memory 48.2MB.py already exists, skipping it
2025-08-19 05:04:04,313 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.09.24 - Accepted - runtime 43ms - memory 48.2MB.py already exists, skipping it
2025-08-19 05:04:09,314 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-08-19 05:04:10,053 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:10,054 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1730740284,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883551,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1730740284/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.3 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        return [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":177},{"id":1730739852,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883512,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1730739852/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        # for left, right in queries:\\n        #     result = powers[right]\\n        #     if left != 0:\\n        #         result -= powers[left - 1]\\n        #     result = (1 << result) % mod\\n        #     ans.append(result)\\n        ans = [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":176},{"id":1730738362,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883368,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730738362/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        # for left, right in queries:\\n        #     result = powers[right]\\n        #     if left != 0:\\n        #         result -= powers[left - 1]\\n        #     result = (1 << result) % mod\\n        #     ans.append(result)\\n        ans = [(1 << (powers[right] - (powers[left - 1] if left > 0 else 0)) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111110101110111111110000000000000000000000000000000000000000000","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":175},{"id":1730735243,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754883058,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1730735243/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.6 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        for left, right in queries:\\n            result = powers[right]\\n            if left != 0:\\n                result -= powers[left - 1]\\n            result = (1 << result) % mod\\n            ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":174},{"id":1730726587,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754882155,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1730726587/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.7 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(power)\\n            n = n >> 1\\n            power += 1\\n        for i in range(1,len(powers)):\\n            powers[i] += powers[i-1]\\n        ans = []\\n        for left, right in queries:\\n            result = powers[right]\\n            if left != 0:\\n                result -= powers[left - 1]\\n            result = 1 << result\\n            if result > mod:\\n                result %= mod\\n            ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":173},{"id":1730725412,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754882029,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1730725412/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.8 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(1 << power)\\n            n = n >> 1\\n            power += 1\\n        for i in range(1,len(powers)):\\n            powers[i] *= powers[i-1]\\n        ans = []\\n        for left, right in queries:\\n            result = powers[right]\\n            if left != 0:\\n                result //= powers[left - 1]\\n            if result > mod:\\n                result %= mod\\n            ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":172},{"id":1730718731,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754881266,"status":10,"status_display":"Accepted","runtime":"175 ms","url":"/submissions/detail/1730718731/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            exp = 0\\n            for j in range(i[0],i[1]+1):\\n                exp += powers[j]\\n            result = 2**exp\\n            if result > 10**9 + 7:\\n                ans.append(result % (10**9 + 7))\\n            else:\\n                ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":171},{"id":1730717420,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754881107,"status":10,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/1730717420/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.3 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            exp = 0\\n            for j in range(i[0],i[1]+1):\\n                exp += powers[j]\\n            ans.append(2**exp % (10**9 + 7))\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":170},{"id":1730715948,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754880931,"status":10,"status_display":"Accepted","runtime":"193 ms","url":"/submissions/detail/1730715948/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.4 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(2**power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            prod = 1\\n            for j in range(i[0],i[1]+1):\\n                prod *= powers[j]\\n            ans.append(prod % (10**9 + 7))\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":169},{"id":1730714466,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754880741,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730714466/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(2**power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            prod = 1\\n            for j in range(i[0],i[1]+1):\\n                prod *= powers[j]\\n            ans.append(prod)\\n        return ans","compare_result":"1111111111110101110111111110000000000000000000000000000000000000000000","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":168},{"id":1730713871,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754880668,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730713871/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(2**power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            prod = 1\\n            for j in range(i[0],i[1]+1):\\n                prod *= powers[j]\\n            ans.append(prod)\\n        return ans","compare_result":"1111111111110101110111111110000000000000000000000000000000000000000000","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":167},{"id":1730695212,"question_id":118,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1754878321,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1730695212/","is_pending":"Not Pending","title":"Pascal\'s Triangle","memory":"17.7 MB","code":"class Solution:\\n    def generate(self, numRows: int) -> List[List[int]]:\\n        ans = []\\n        for _ in range(numRows):\\n            if ans == []:\\n                ans.append([1])\\n                continue\\n            nextrow = [1]\\n            for i in range(len(ans[-1])-1):\\n                nextrow.append(ans[-1][i] + ans[-1][i+1])\\n            nextrow.append(1)\\n            ans.append(nextrow[:])\\n        return ans","compare_result":"111111111111111111111111111111","title_slug":"pascals-triangle","has_notes":false,"flag_type":1,"frontend_id":166},{"id":1730090166,"question_id":900,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754828887,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1730090166/","is_pending":"Not Pending","title":"Reordered Power of 2","memory":"18 MB","code":"import copy\\nclass Solution:\\n    def reorderedPowerOf2(self, number: int) -> bool:\\n        legals = {}\\n        n = 1\\n        while n <= 10**9:\\n            subdict = {}\\n            num = str(n)\\n            subdict[\\"len\\"] = len(num)\\n            subdict[\\"count\\"] = {}\\n            for i in num:\\n                if i not in subdict[\\"count\\"]:\\n                    subdict[\\"count\\"][i] = 1\\n                else:\\n                    subdict[\\"count\\"][i] += 1\\n            legals[n] = copy.deepcopy(subdict)\\n            n *= 2\\n        \\n        n_str = str(number)\\n        count = {}\\n        for i in n_str:\\n            if i not in count:\\n                count[i] = 1\\n            else:\\n                count[i] += 1\\n        print(count)\\n        for i in legals:\\n            if len(n_str) != legals[i][\\"len\\"]:\\n                continue\\n            if count == legals[i][\\"count\\"]:\\n                print(legals[i][\\"count\\"])\\n                return True\\n\\n        return False","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reordered-power-of-2","has_notes":false,"flag_type":1,"frontend_id":165},{"id":1730064322,"question_id":39,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754827090,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1730064322/","is_pending":"Not Pending","title":"Combination Sum","memory":"17.8 MB","code":"class Solution:\\n    def combinationSum(self, candidates, target):\\n        result = []\\n\\n        def backtrack(start, combination, target_left):\\n            if target_left == 0:\\n                result.append(combination.copy())\\n                return\\n            if target_left < 0:\\n                return\\n\\n            for i in range(start, len(candidates)):\\n                combination.append(candidates[i])\\n                backtrack(i, combination, target_left - candidates[i])\\n                combination.pop()\\n\\n        backtrack(0, [], target)\\n        return result\\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1,"frontend_id":164},{"id":1730052801,"question_id":38,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754826299,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1730052801/","is_pending":"Not Pending","title":"Count and Say","memory":"17.9 MB","code":"class Solution:\\n    def countAndSay(self, n: int) -> str:\\n        def RLE(n: int) -> str:\\n            num = str(n)\\n            out = \\"\\"\\n            index = 0\\n            while index < len(num):\\n                currchar = num[index]\\n                count = 0\\n                while index < len(num) and currchar == num[index]:\\n                    count += 1\\n                    index += 1\\n                out += str(count) + str(currchar)\\n            return out \\n\\n        res = 1\\n        for _ in range(n-1):\\n            res = RLE(res)\\n        return str(res)","compare_result":"111111111111111111111111111111","title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":163},{"id":1730050441,"question_id":38,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754826134,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1730050441/","is_pending":"Not Pending","title":"Count and Say","memory":"17.9 MB","code":"class Solution:\\n    def countAndSay(self, n: int) -> str:\\n        def RLE(n: int) -> str:\\n            num = str(n)\\n            out = \\"\\"\\n            index = 0\\n            while index < len(num):\\n                currchar = num[index]\\n                count = 0\\n                while index < len(num) and currchar == num[index]:\\n                    count += 1\\n                    index += 1\\n                out += str(count) + str(currchar)\\n            return out \\n\\n        if n == 1:\\n            return \\"1\\"\\n        return RLE(self.countAndSay(n-1))","compare_result":"111111111111111111111111111111","title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":162},{"id":1730031549,"question_id":191,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754824840,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1730031549/","is_pending":"Not Pending","title":"Number of 1 Bits","memory":"17.7 MB","code":"class Solution:\\n    def hammingWeight(self, n: int) -> int:\\n        if n <= 1:\\n            return n\\n        return (n & 1) + self.hammingWeight(n >> 1)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-1-bits","has_notes":false,"flag_type":1,"frontend_id":161},{"id":1730029064,"question_id":191,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754824673,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1730029064/","is_pending":"Not Pending","title":"Number of 1 Bits","memory":"18 MB","code":"class Solution:\\n    def hammingWeight(self, n: int) -> int:\\n        count = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                count += 1\\n            n = n >> 1\\n        return count ","compare_resulttitle_slug":"number-of-1-bits","has_notes":false,"flag_type":1,"frontend_id":160},{"id":1730027908,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1754824595,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1730027908/","is_pending":"Not Pending","title":"Power of Two","memory":"17.7 MB","code":"class Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        return n > 0 and n & (n-1) == 0","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":159},{"id":1729058347,"question_id":193,"lang":"bash","lang_name":"Bash","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754750634,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1729058347/","is_pending":"Not Pending","title":"Valid Phone Numbers","memory":"N/A","code":"# Read from the file file.txt and output all valid phone numbers to stdout.\\ncat file.txt | grep \\"\\\\d{3}-\\\\d{4}\\" ","compare_result":"10011111111111111111111000","title_slug":"valid-phone-numbers","has_notes":false,"flag_type":1,"frontend_id":158}],"has_next":true,"last_key":""}'
2025-08-19 05:04:10,054 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.09.11 - Accepted - runtime 42ms - memory 48.3MB.py already exists, skipping it
2025-08-19 05:04:10,055 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.08.32 - Accepted - runtime 37ms - memory 48.2MB.py already exists, skipping it
2025-08-19 05:04:10,055 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.06.08 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:10,055 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.00.58 - Accepted - runtime 38ms - memory 47.6MB.py already exists, skipping it
2025-08-19 05:04:10,055 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.45.55 - Accepted - runtime 46ms - memory 47.7MB.py already exists, skipping it
2025-08-19 05:04:10,055 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.43.49 - Accepted - runtime 47ms - memory 47.8MB.py already exists, skipping it
2025-08-19 05:04:10,056 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.31.06 - Accepted - runtime 175ms - memory 48.2MB.py already exists, skipping it
2025-08-19 05:04:10,056 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.28.27 - Accepted - runtime 188ms - memory 47.3MB.py already exists, skipping it
2025-08-19 05:04:10,056 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.25.31 - Accepted - runtime 193ms - memory 47.4MB.py already exists, skipping it
2025-08-19 05:04:10,056 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.22.21 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:10,056 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.21.08 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:10,573 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:10,573 [INFO] __main__.py:250 - pascals-triangle/2025-08-11 07.42.01 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:10,885 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:10,886 [INFO] __main__.py:250 - reordered-power-of-2/2025-08-10 17.58.07 - Accepted - runtime 13ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:11,397 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:11,398 [INFO] __main__.py:250 - combination-sum/2025-08-10 17.28.10 - Accepted - runtime 10ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:11,799 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:11,800 [INFO] __main__.py:250 - count-and-say/2025-08-10 17.14.59 - Accepted - runtime 10ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:11,802 [INFO] __main__.py:250 - count-and-say/2025-08-10 17.12.14 - Accepted - runtime 14ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:11,802 [INFO] __main__.py:250 - number-of-1-bits/2025-08-10 16.50.40 - Accepted - runtime 1ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:11,802 [INFO] __main__.py:250 - number-of-1-bits/2025-08-10 16.47.53 - Accepted - runtime 0ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:12,311 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:12,311 [INFO] __main__.py:250 - power-of-two/2025-08-10 16.46.35 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:13,835 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:13,835 [INFO] __main__.py:250 - valid-phone-numbers/2025-08-09 20.13.54 - Wrong Answer - runtime NA - memory NA.sh already exists, skipping it
2025-08-19 05:04:18,836 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-08-19 05:04:19,225 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:19,244 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1728817352,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754733287,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728817352/","is_pending":"Not Pending","title":"Power of Two","memory":"17.6 MB","code":"class Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while (n & 1 == 0):\\n            n = n >> 1\\n        return (n == 1)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":157},{"id":1728815102,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754733114,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728815102/","is_pending":"Not Pending","title":"Power of Two","memory":"17.6 MB","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while (n & 1 == 0):\\n            n = n >> 1\\n        return (n == 1)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":156},{"id":1728796102,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754731630,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1728796102/","is_pending":"Not Pending","title":"Power of Two","memory":"17.8 MB","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while (n % 2 == 0):\\n            n /= 2\\n        return (n == 1)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":155},{"id":1728794006,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754731467,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1728794006/","is_pending":"Not Pending","title":"Power of Two","memory":"17.6 MB","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        return (n > 0 and math.log2(n) % 1 == 0)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":154},{"id":1728790430,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754731204,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1728790430/","is_pending":"Not Pending","title":"Power of Two","memory":"N/A","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        return (math.log2(n) % 1 == 0)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":153},{"id":1728207494,"question_id":67,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754674016,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1728207494/","is_pending":"Not Pending","title":"Add Binary","memory":"18 MB","code":"class Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        if len(a) > len(b):\\n            b = \'0\'*(len(a)-len(b)) + b\\n        elif len(a) < len(b):\\n            a = \'0\'*(len(b)-len(a)) + a\\n        res = \\"\\"\\n        index = -1\\n        carry = False\\n        while index >= -len(a):\\n            if a[index] != b[index]:\\n                if carry:\\n                    res = \'0\' + res\\n                    carry = True\\n                else:\\n                    res = \'1\' + res\\n                    carry = False\\n            else:\\n                if a[index] == \'0\':\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = False\\n                    else:\\n                        res = \'0\' + res\\n                        carry = False\\n                else:\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = True\\n                    else:\\n                        res = \'0\' + res\\n                        carry = True\\n            index -= 1\\n        if carry:\\n            res = \'1\' + res\\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-binary","has_notes":false,"flag_type":1,"frontend_id":152},{"id":1728185076,"question_id":67,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754672816,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728185076/","is_pending":"Not Pending","title":"Add Binary","memory":"18 MB","code":"class Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        if len(a) > len(b):\\n            b = \'0\'*(len(a)-len(b)) + b\\n        elif len(a) < len(b):\\n            a = \'0\'*(len(b)-len(a)) + a\\n        res = \\"\\"\\n        index = -1\\n        carry = False\\n        while index >= -len(a):\\n            if a[index] != b[index]:\\n                if carry:\\n                    res = \'0\' + res\\n                    carry = True\\n                else:\\n                    res = \'1\' + res\\n                    carry = False\\n            else:\\n                if a[index] == \'0\':\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = False\\n                    else:\\n                        res = \'0\' + res\\n                        carry = False\\n                else:\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = True\\n                    else:\\n                        res = \'0\' + res\\n                        carry = True\\n            index -= 1\\n        if carry:\\n            res = \'1\' + res\\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-binary","has_notes":false,"flag_type":1,"frontend_id":151},{"id":1727829229,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647960,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1727829229/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.6 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        set_t = set(t)\\n        set_s = set(s)\\n\\n        if len(set_s) != len(set_t):\\n            return False\\n\\n        for char in set_t:\\n            if s.count(char) != t.count(char):\\n                return False\\n                break\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":150},{"id":1727826688,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647776,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1727826688/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.7 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":149},{"id":1727826539,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647765,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1727826539/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.9 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        if len(s) != len(t):\\n            return False\\n\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":148},{"id":1727826320,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647749,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1727826320/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.8 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        if len(s) != len(t):\\n            return False\\n\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in t:\\n                return False\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in s:\\n                return False\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":147},{"id":1727825158,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647663,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1727825158/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.7 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n                \\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":146},{"id":1727820888,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647358,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1727820888/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.9 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_set<int> seen;\\n        for (int num : nums){\\n            if (seen.count(num) > 0){\\n                return true;\\n            }\\n            seen.insert(num);\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":145},{"id":1727818203,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647164,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1727818203/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.9 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":144},{"id":1727818022,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647151,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1727818022/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.7 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":143},{"id":1727817940,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647145,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1727817940/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"91 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":142},{"id":1727817738,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647130,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/1727817738/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.7 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":141},{"id":1727817538,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647115,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/1727817538/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"92.2 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":140},{"id":1727817050,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754647079,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1727817050/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.8 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":139},{"id":1727814283,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754646888,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1727814283/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"N/A","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        // Sorting the list using selection sort\\n        for (int i = 0; i < nums.size(); i++){\\n            int minIndex = i;\\n            for (int j = i; j < nums.size(); j++){\\n                if (nums[j] < nums[minIndex]){\\n                    minIndex = j;\\n                }\\n            }\\n            // swapping nums[i] and nums[minIndex]\\n            int temp = nums[i];\\n            nums[i] = nums[minIndex];\\n            nums[minIndex] = temp;\\n        }\\n\\n        for (int i = 0; i < nums.size() - 1; i++){\\n            if (nums[i] == nums[i+1]){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111000000000000000","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":138}],"has_next":true,"last_key":""}'
2025-08-19 05:04:19,244 [INFO] __main__.py:250 - power-of-two/2025-08-09 15.24.47 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:04:19,244 [INFO] __main__.py:250 - power-of-two/2025-08-09 15.21.54 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:04:19,244 [INFO] __main__.py:250 - power-of-two/2025-08-09 14.57.10 - Accepted - runtime 5ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:19,245 [INFO] __main__.py:250 - power-of-two/2025-08-09 14.54.27 - Accepted - runtime 4ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:04:19,245 [INFO] __main__.py:250 - power-of-two/2025-08-09 14.50.04 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:19,784 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:19,785 [INFO] __main__.py:250 - add-binary/2025-08-08 22.56.56 - Accepted - runtime 3ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:19,785 [INFO] __main__.py:250 - add-binary/2025-08-08 22.36.56 - Accepted - runtime 0ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:20,503 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:20,504 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.42.40 - Accepted - runtime 1ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:04:20,504 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.39.36 - Accepted - runtime 11ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:20,504 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.39.25 - Accepted - runtime 14ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:20,504 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.39.09 - Accepted - runtime 15ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:20,504 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.37.43 - Accepted - runtime 11ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:21,121 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:21,122 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.32.38 - Accepted - runtime 51ms - memory 90.9MB.cpp already exists, skipping it
2025-08-19 05:04:21,122 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.29.24 - Accepted - runtime 50ms - memory 90.9MB.cpp already exists, skipping it
2025-08-19 05:04:21,122 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.29.11 - Accepted - runtime 56ms - memory 90.7MB.cpp already exists, skipping it
2025-08-19 05:04:21,122 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.29.05 - Accepted - runtime 51ms - memory 91MB.cpp already exists, skipping it
2025-08-19 05:04:21,122 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.28.50 - Accepted - runtime 48ms - memory 90.7MB.cpp already exists, skipping it
2025-08-19 05:04:21,123 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.28.35 - Accepted - runtime 103ms - memory 92.2MB.cpp already exists, skipping it
2025-08-19 05:04:21,123 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.27.59 - Accepted - runtime 44ms - memory 90.8MB.cpp already exists, skipping it
2025-08-19 05:04:21,123 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.24.48 - Time Limit Exceeded - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:04:26,123 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-08-19 05:04:26,537 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:26,538 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1727811914,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754646716,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1727811914/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"N/A","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        // Sorting the list using selection sort\\n        for (int i = 0; i < nums.size(); i++){\\n            int minIndex = i;\\n            for (int j = i; j < nums.size(); j++){\\n                if (nums[j] < nums[i]){\\n                    minIndex = j;\\n                }\\n            }\\n            // swapping nums[i] and nums[j]\\n            int temp = nums[i];\\n            nums[i] = nums[minIndex];\\n            nums[minIndex] = temp;\\n        }\\n\\n        for (int i = 0; i < nums.size() - 1; i++){\\n            if (nums[i] == nums[i+1]){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111011111111110111111111110111101010111010010010000101111000000000000000","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":137},{"id":1727798289,"question_id":82,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754645730,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1727798289/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List II","memory":"15.6 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (!head || !head->next) return head;\\n\\n        ListNode* dummy = new ListNode(-1);\\n        dummy->next = head;\\n        ListNode* prev = dummy;\\n        ListNode* cur = head;\\n\\n        while (cur && cur->next) {\\n            if (cur->val == cur->next->val) {\\n                while (cur->next && cur->val == cur->next->val) {\\n                    cur = cur->next;\\n                }\\n                prev->next = cur->next; \\n            } else {\\n                prev = prev->next;\\n            }\\n            cur = cur->next;\\n        }\\n\\n        return dummy->next;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list-ii","has_notes":false,"flag_type":1,"frontend_id":136},{"id":1727778848,"question_id":83,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754644359,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1727778848/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"16.4 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* ptr = head;\\n        ListNode* nextdiff = head;\\n        while(nextdiff != NULL){\\n            nextdiff = nextdiff->next;\\n            if (nextdiff == NULL || ptr-> val != nextdiff->val){\\n                ptr->next = nextdiff;\\n                ptr = ptr->next;\\n            }\\n        }\\n        return head;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1,"frontend_id":135},{"id":1722729475,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks","timestamp":1754290648,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1722729475/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"18 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1 or x == 0:\\n            return x\\n        start = 0\\n        end = x / 2\\n        while start <= end:\\n            mid = (start + end) // 2\\n            if mid * mid > x:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n        return int((start + end) // 2)","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":134},{"id":1722728946,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks","timestamp":1754290616,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1722728946/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"17.7 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1 or x == 0:\\n            return x\\n        start = 0\\n        end = x\\n        while start <= end:\\n            mid = (start + end) // 2\\n            if mid * mid > x:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n        return int((start + end) // 2)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":133},{"id":1722727923,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks","timestamp":1754290558,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1722727923/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"N/A","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1 or x == 0:\\n            return x\\n        start = 0\\n        end = x / 2\\n        while start < end:\\n            mid = start + end \\n            mid //= 2\\n            if mid * mid > x:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n        return int((start + end) // 2)","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":132},{"id":1722720808,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks","timestamp":1754290154,"status":10,"status_display":"Accepted","runtime":"983 ms","url":"/submissions/detail/1722720808/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"17.5 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        i = 1\\n        while i * i <= x:\\n            i += 1\\n        return i - 1","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":131},{"id":1722560727,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks","timestamp":1754280523,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1722560727/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        if nums.count(0) >= 3:\\n            ans.append([0,0,0])\\n        positives = []\\n        negatives = []\\n        for i in nums:\\n            if i >= 0:\\n                positives.append(i)\\n            elif i < 0:\\n                negatives.append(i)\\n        for i in range(len(positives)):\\n            for j in range(i + 1, len(positives)):\\n                complement = - positives[i] - positives[j]\\n                if complement in negatives:\\n                    if positives[i] < positives[j] and [complement, positives[i], positives[j]] not in ans:\\n                        ans.append([complement, positives[i], positives[j]])\\n                    elif positives[i] >= positives[j] and [complement, positives[j], positives[i]] not in ans:\\n                        ans.append([complement, positives[j], positives[i]])\\n        for i in range(len(negatives)):\\n            for j in range(i + 1, len(negatives)):\\n                complement = - negatives[i] - negatives[j]\\n                if complement in positives:\\n                    if negatives[i] < negatives[j]  and [negatives[i], negatives[j], complement] not in ans:\\n                        ans.append([negatives[i], negatives[j], complement])\\n                    elif negatives[i] >= negatives[j] and [negatives[j], negatives[i], complement] not in ans:\\n                        ans.append([negatives[j], negatives[i], complement])\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":130},{"id":1721576411,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754203341,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721576411/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        if nums.count(0) >= 3:\\n            ans.append([0,0,0])\\n        positives = []\\n        negatives = []\\n        for i in nums:\\n            if i >= 0:\\n                positives.append(i)\\n            elif i < 0:\\n                negatives.append(i)\\n        for i in range(len(positives)):\\n            for j in range(i + 1, len(positives)):\\n                complement = - positives[i] - positives[j]\\n                if complement in negatives:\\n                    if positives[i] < positives[j] and [complement, positives[i], positives[j]] not in ans:\\n                        ans.append([complement, positives[i], positives[j]])\\n                    elif positives[i] >= positives[j] and [complement, positives[j], positives[i]] not in ans:\\n                        ans.append([complement, positives[j], positives[i]])\\n        for i in range(len(negatives)):\\n            for j in range(i + 1, len(negatives)):\\n                complement = - negatives[i] - negatives[j]\\n                if complement in positives:\\n                    if negatives[i] < negatives[j]  and [negatives[i], negatives[j], complement] not in ans:\\n                        ans.append([negatives[i], negatives[j], complement])\\n                    elif negatives[i] >= negatives[j] and [negatives[j], negatives[i], complement] not in ans:\\n                        ans.append([negatives[j], negatives[i], complement])\\n\\n\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":129},{"id":1721567829,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754202747,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721567829/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        if nums.count(0) >= 3:\\n            ans.append([0,0,0])\\n        positives = []\\n        negatives = []\\n        for i in nums:\\n            if i >= 0:\\n                positives.append(i)\\n            elif i < 0:\\n                negatives.append(i)\\n        positives.sort()\\n        negatives.sort()\\n        for i in range(len(positives)):\\n            for j in range(i + 1, len(positives)):\\n                complement = - positives[i] - positives[j]\\n                if complement in negatives and [complement, positives[i], positives[j]] not in ans:\\n                    ans.append([complement, positives[i], positives[j]])\\n        for i in range(len(negatives)):\\n            for j in range(i + 1, len(negatives)):\\n                complement = - negatives[i] - negatives[j]\\n                if complement in positives and [negatives[i], negatives[j], complement] not in ans:\\n                    ans.append([negatives[i], negatives[j], complement])\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":128},{"id":1721555982,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754201889,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721555982/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        for i in range(len(nums)):\\n            for j in range(i+1, len(nums)):\\n                complement = -nums[i] - nums[j]\\n                if complement in nums[j+1:]:\\n                    triplet = [nums[i], nums[j] , complement]\\n                    triplet.sort()\\n                    if triplet not in ans:\\n                        ans.append(triplet)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":127},{"id":1721548616,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1754200717,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721548616/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        for i in range(len(nums)):\\n            for j in range(i+1, len(nums)):\\n                for k in range(j+1, len(nums)):\\n                    if nums[i] + nums[j] + nums[k] == 0:\\n                        triplet = [nums[i], nums[j] , nums[k]]\\n                        triplet.sort()\\n                        if triplet not in ans:\\n                            ans.append(triplet)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":126},{"id":1721001652,"question_id":58,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754155569,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1721001652/","is_pending":"Not Pending","title":"Length of Last Word","memory":"17.9 MB","code":"class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.strip().split(\\" \\")[-1])\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"length-of-last-word","has_notes":false,"flag_type":1,"frontend_id":125},{"id":1720997498,"question_id":66,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754155374,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720997498/","is_pending":"Not Pending","title":"Plus One","memory":"17.7 MB","code":"class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        digits[-1] += 1\\n        while max(digits) >= 10:\\n            for i in range(len(digits)):\\n                if digits[i] >= 10:\\n                    digits[i] %= 10\\n                    if i == 0:\\n                        digits = [1] + digits\\n                    else:\\n                        digits[i - 1] += 1\\n        return digits","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"plus-one","has_notes":false,"flag_type":1,"frontend_id":124},{"id":1720956666,"question_id":35,"lang":"cpp","lang_name":"C++","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754153318,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720956666/","is_pending":"Not Pending","title":"Search Insert Position","memory":"13.7 MB","code":"class Solution {\\npublic:\\n    int searchInsert(vector<int>& nums, int target) {\\n        int start = 0;\\n        int end = nums.size() - 1;\\n        int mid = (start + end) / 2;\\n\\n        while (start < end){\\n            if (nums[mid] == target){\\n                return mid;\\n            } else if (nums[mid] > target){\\n                end = mid;\\n            } else if (nums[mid] < target){\\n                start = mid + 1;\\n            }\\n            mid = (start + end) / 2;\\n        }\\n\\n        if (target > nums[mid]){\\n            return mid + 1;\\n        } else {\\n            return mid;\\n        }\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":123},{"id":1720308193,"question_id":35,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754118566,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720308193/","is_pending":"Not Pending","title":"Search Insert Position","memory":"18.7 MB","code":"class Solution:\\n    def searchInsert(self, nums: List[int], target: int) -> int:\\n        start = 0\\n        end = len(nums) - 1\\n        mid = (start + end) // 2\\n\\n        while start < end:\\n            if nums[mid] == target:\\n                return mid\\n            elif nums[mid] > target:\\n                end = mid\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2\\n        \\n        if target > nums[mid]:\\n            return mid + 1\\n        return mid","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":122},{"id":1720307646,"question_id":35,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754118531,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1720307646/","is_pending":"Not Pending","title":"Search Insert Position","memory":"N/A","code":"class Solution:\\n    def searchInsert(self, nums: List[int], target: int) -> int:\\n        start = 0\\n        end = len(nums) - 1\\n        mid = (start + end) // 2\\n\\n        while start < end:\\n            if nums[mid] == target:\\n                return mid\\n            elif nums[mid] > target:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2\\n        \\n        if target > nums[mid]:\\n            return mid + 1\\n        return mid","compare_result":"111111101111111111110111011101111110111111111111111111111111111101","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":121},{"id":1720291210,"question_id":21,"lang":"cpp","lang_name":"C++","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754117537,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720291210/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"19.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if (list1 == NULL){\\n            return list2;\\n        }\\n        else if (list2 == NULL){\\n            return list1;\\n        }\\n        \\n        ListNode* next1 = list1;\\n        ListNode* next2 = list2;\\n        ListNode* head;\\n        if (list1->val > list2->val){\\n            head = list2;\\n            next2 = next2->next;\\n        }\\n        else {\\n            head = list1;\\n            next1 = next1->next;\\n        }\\n        ListNode* next = head;\\n        while (next1 != NULL && next2 != NULL){\\n            if (next1->val < next2->val){\\n                next->next = next1;\\n                next = next->next;\\n                next1 = next1->next;\\n            }\\n            else{\\n                next->next = next2;\\n                next = next->next;\\n                next2 = next2->next;\\n            }\\n        }\\n        if (next1 == NULL){\\n            next->next = next2;\\n        }\\n        else{\\n            next->next = next1;\\n        }\\n\\n        return head;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1,"frontend_id":120},{"id":1720278100,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754116777,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1720278100/","is_pending":"Not Pending","title":"Palindrome Number","memory":"18 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        if x < 0:\\n            return False\\n        if x < 10:\\n            return True\\n        x = str(x)\\n        end = len(x) - 1\\n        start = 0\\n\\n        while start < end:\\n            if x[start] != x[end]:\\n                return False\\n            start += 1\\n            end -= 1\\n        return True\\n","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":119},{"id":1720276965,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754116711,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1720276965/","is_pending":"Not Pending","title":"Palindrome Number","memory":"17.9 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        if x < 0:\\n            return False\\n        elif x < 10:\\n            return True\\n        num = str(x)\\n        while len(num) > 1:\\n            if num[0] != num[-1]:\\n                return False\\n            num = num[1:-1]\\n        return True","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":118}],"has_next":true,"last_key":""}'
2025-08-19 05:04:26,539 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.21.56 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:04:26,891 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:26,892 [INFO] __main__.py:250 - remove-duplicates-from-sorted-list-ii/2025-08-08 15.05.30 - Accepted - runtime 0ms - memory 15.6MB.cpp already exists, skipping it
2025-08-19 05:04:27,462 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:27,463 [INFO] __main__.py:250 - remove-duplicates-from-sorted-list/2025-08-08 14.42.39 - Accepted - runtime 0ms - memory 16.4MB.cpp already exists, skipping it
2025-08-19 05:04:27,771 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:27,772 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.27.28 - Accepted - runtime 5ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:27,773 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.26.56 - Accepted - runtime 4ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:27,773 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.25.58 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:27,773 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.19.14 - Accepted - runtime 983ms - memory 17.5MB.py already exists, skipping it
2025-08-19 05:04:28,183 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:28,184 [INFO] __main__.py:250 - 3sum/2025-08-04 09.38.43 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:28,184 [INFO] __main__.py:250 - 3sum/2025-08-03 12.12.21 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:28,184 [INFO] __main__.py:250 - 3sum/2025-08-03 12.02.27 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:28,184 [INFO] __main__.py:250 - 3sum/2025-08-03 11.48.09 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:28,184 [INFO] __main__.py:250 - 3sum/2025-08-03 11.28.37 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:28,694 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:28,695 [INFO] __main__.py:250 - length-of-last-word/2025-08-02 22.56.09 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:29,720 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:29,721 [INFO] __main__.py:250 - plus-one/2025-08-02 22.52.54 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:30,239 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:30,240 [INFO] __main__.py:250 - search-insert-position/2025-08-02 22.18.38 - Accepted - runtime 0ms - memory 13.7MB.cpp already exists, skipping it
2025-08-19 05:04:30,240 [INFO] __main__.py:250 - search-insert-position/2025-08-02 12.39.26 - Accepted - runtime 0ms - memory 18.7MB.py already exists, skipping it
2025-08-19 05:04:30,240 [INFO] __main__.py:250 - search-insert-position/2025-08-02 12.38.51 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:30,633 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:30,634 [INFO] __main__.py:250 - merge-two-sorted-lists/2025-08-02 12.22.17 - Accepted - runtime 0ms - memory 19.5MB.cpp already exists, skipping it
2025-08-19 05:04:31,049 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:31,050 [INFO] __main__.py:250 - palindrome-number/2025-08-02 12.09.37 - Accepted - runtime 4ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:31,050 [INFO] __main__.py:250 - palindrome-number/2025-08-02 12.08.31 - Accepted - runtime 11ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:36,051 [DEBUG] leetcode.py:150 - Exporting submissions from 120 to 140
2025-08-19 05:04:36,890 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=120&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:36,890 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1720261927,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754115862,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1720261927/","is_pending":"Not Pending","title":"Palindrome Number","memory":"17.9 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        x = str(x)\\n        end = len(x) - 1\\n        start = 0\\n\\n        while start < end:\\n            if x[start] != x[end]:\\n                return False\\n            start += 1\\n            end -= 1\\n        return True\\n","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1720259873,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754115745,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1720259873/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        x = str(x)\\n        if len(x) < 2:\\n            return True\\n        elif x[0] != x[-1]:\\n            return False\\n        return self.isPalindrome(int(x[1:-1]))\\n        ","compare_result":"","title_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1720250518,"question_id":1,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754115220,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720250518/","is_pending":"Not Pending","title":"Two Sum","memory":"19.2 MB","code":"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        record = {}\\n        for i in range(len(nums)):\\n            complement = target - nums[i]\\n            if complement in record:\\n                return (record[complement], i)\\n            record[nums[i]] = i\\n        return (-1,-1)","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1720238622,"question_id":1,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754114530,"status":10,"status_display":"Accepted","runtime":"1796 ms","url":"/submissions/detail/1720238622/","is_pending":"Not Pending","title":"Two Sum","memory":"18.6 MB","code":"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        for i in range(len(nums)):\\n            for j in range(i+1,len(nums)):\\n                if nums[i] + nums[j] == target:\\n                    return (i,j)\\n        return (-1,-1)\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708249632,"question_id":50,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753260020,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1708249632/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n ==0:\\n            return 1\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = x\\n        currentpower = 1\\n        while (currentpower < n//2):\\n            prod *= prod\\n            currentpower *=2\\n        while currentpower < n:\\n            prod *= x\\n            currentpower += 1\\n        return prod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708249168,"question_id":50,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753259988,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1708249168/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = x\\n        currentpower = 1\\n        while (currentpower < n//2):\\n            prod *= prod\\n            currentpower *=2\\n        while currentpower < n:\\n            prod *= x\\n            currentpower += 1\\n        return prod","compare_result":"1111111110111111111111111011111011111111101010111111011111101111111111111111101001111111111111111111110111111111111111111111111011111111111110111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1708244856,"question_id":50,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753259700,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1708244856/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = 1\\n        for _ in range(n):\\n            prod *= x\\n        return prod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1708234053,"question_id":1302,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753258937,"status":10,"status_display":"Accepted","runtime":"7160 ms","url":"/submissions/detail/1708234053/","is_pending":"Not Pending","title":"Delete Characters to Make Fancy String","memory":"18.9 MB","code":"class Solution:\\n    def makeFancyString(self, s: str) -> str:\\n        if len(s) <= 2:\\n            return s\\n        parser = 2\\n        while parser < len(s):\\n            if s[parser] == s[parser-1] and s[parser] == s[parser-2]:\\n                s = s[:parser] + s[parser+1:]\\n            else:\\n                parser += 1\\n        return s\\n\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-characters-to-make-fancy-string","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1708231266,"question_id":1302,"lang":"python3","lang_name":"Python3","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753258743,"status":10,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/1708231266/","is_pending":"Not Pending","title":"Delete Characters to Make Fancy String","memory":"19.1 MB","code":"class Solution:\\n    def makeFancyString(self, s: str) -> str:\\n        fancystring = s[:2]\\n        for i in s[2:]:\\n            if i != fancystring[-1] or i != fancystring[-2]:\\n                fancystring += i\\n        return fancystring\\n\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-characters-to-make-fancy-string","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1700864405,"question_id":3490,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month","timestamp":1752729748,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/1700864405/","is_pending":"Not Pending","title":"Find the Maximum Length of Valid Subsequence I","memory":"39.1 MB","code":"class Solution:\\n    def maximumLength(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        if n==2: return 2\\n        z=nums[0]&1\\n        Len=[1-z, z, 1]\\n        for xx in nums[1:]:\\n            x=xx&1\\n            Len[x&1]+=1\\n            if x!=z:\\n                Len[2]+=1\\n                z=1-z\\n        return max(Len)\\n        ","compare_resulttitle_slug":"find-the-maximum-length-of-valid-subsequence-i","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1699020439,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month","timestamp":1752595745,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1699020439/","is_pending":"Not Pending","title":"Valid Word","memory":"17.6 MB","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        vowel = False\\n        consonant = False\\n        for i in word:\\n            if i.lower() in \\"aoeui\\":\\n                vowel = True\\n            elif i.lower() in \\"pyfgcrldhtnsqjkxbmwvz\\":\\n                consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return len(word) > 2 and vowel and consonant","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1699020083,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month","timestamp":1752595729,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699020083/","is_pending":"Not Pending","title":"Valid Word","memory":"N/A","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        vowel = False\\n        consonant = True\\n        for i in word:\\n            if i.lower() in \\"aoeui\\":\\n                vowel = True\\n            elif i.lower() in \\"pyfgcrldhtnsqjkxbmwvz\\":\\n                consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return len(word) > 2 and vowel and consonant","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1699017897,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month","timestamp":1752595622,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699017897/","is_pending":"Not Pending","title":"Valid Word","memory":"N/A","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        vowel = False\\n        consonant = True\\n        for i in word:\\n            if i.lower() in \\"pyfgcrlaoeuidhtnsqjkxbmwvz\\":\\n                if i.lower() in \\"aoeui\\":\\n                    vowel = True\\n                else:\\n                    consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return len(word) > 2 and vowel and consonant","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1699017009,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month","timestamp":1752595579,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699017009/","is_pending":"Not Pending","title":"Valid Word","memory":"N/A","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        charcount = 0\\n        vowel = False\\n        consonant = True\\n        for i in word:\\n            if i.lower() in \\"pyfgcrlaoeuidhtnsqjkxbmwvz\\":\\n                charcount += 1\\n                if i.lower() in \\"aoeui\\":\\n                    vowel = True\\n                else:\\n                    consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return charcount > 2 and vowel and consonant","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1692830753,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129883,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1692830753/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.7 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)+1):\\n            if haystack[i:i+len(needle)] == needle:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1692821328,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129347,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1692821328/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.9 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)+1):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1692820842,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129321,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1692820842/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.7 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        if haystack == needle:\\n            return 0\\n        for i in range(len(haystack)-len(needle)+1):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1692818315,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129179,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692818315/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        if haystack == needle:\\n            return 0\\n        for i in range(len(haystack)-len(needle)):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11111011111111110101111111111110111111111101011111111111111111111111111111111110101","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1692817149,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129111,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692817149/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11110011011011110101111111111110111111111101011111111111111111111111111111111110101","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1692815141,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129001,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692815141/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)-1):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[i+j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11010010010000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":98}],"has_next":true,"last_key":""}'
2025-08-19 05:04:36,891 [INFO] __main__.py:250 - palindrome-number/2025-08-02 11.54.22 - Accepted - runtime 6ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:36,891 [INFO] __main__.py:250 - palindrome-number/2025-08-02 11.52.25 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:37,499 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:37,500 [INFO] __main__.py:250 - two-sum/2025-08-02 11.43.40 - Accepted - runtime 0ms - memory 19.2MB.py already exists, skipping it
2025-08-19 05:04:37,500 [INFO] __main__.py:250 - two-sum/2025-08-02 11.32.10 - Accepted - runtime 1796ms - memory 18.6MB.py already exists, skipping it
2025-08-19 05:04:37,500 [INFO] __main__.py:250 - powx-n/2025-07-23 14.10.20 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:37,500 [INFO] __main__.py:250 - powx-n/2025-07-23 14.09.48 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:37,501 [INFO] __main__.py:250 - powx-n/2025-07-23 14.05.00 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:37,917 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:37,918 [INFO] __main__.py:250 - delete-characters-to-make-fancy-string/2025-07-23 13.52.17 - Accepted - runtime 7160ms - memory 18.9MB.py already exists, skipping it
2025-08-19 05:04:37,918 [INFO] __main__.py:250 - delete-characters-to-make-fancy-string/2025-07-23 13.49.03 - Accepted - runtime 228ms - memory 19.1MB.py already exists, skipping it
2025-08-19 05:04:38,426 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:38,427 [INFO] __main__.py:250 - find-the-maximum-length-of-valid-subsequence-i/2025-07-17 10.52.28 - Accepted - runtime 55ms - memory 39.1MB.py already exists, skipping it
2025-08-19 05:04:39,346 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:39,347 [INFO] __main__.py:250 - valid-word/2025-07-15 21.39.05 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-19 05:04:39,347 [INFO] __main__.py:250 - valid-word/2025-07-15 21.38.49 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:39,347 [INFO] __main__.py:250 - valid-word/2025-07-15 21.37.02 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:39,347 [INFO] __main__.py:250 - valid-word/2025-07-15 21.36.19 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:39,754 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:39,755 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.14.43 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:39,755 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.05.47 - Accepted - runtime 3ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:39,755 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.05.21 - Accepted - runtime 4ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:39,756 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.02.59 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:39,756 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.01.51 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:39,756 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.00.01 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:44,757 [DEBUG] leetcode.py:150 - Exporting submissions from 140 to 160
2025-08-19 05:04:45,183 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=140&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:45,184 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692814523,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752128966,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1692814523/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[i+j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1692792283,"question_id":20,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752127706,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1692792283/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"17.8 MB","code":"class Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        corres = {\\n            \\")\\" : \\"(\\",\\n            \\"}\\" : \\"{\\",\\n            \\"]\\" : \\"[\\",\\n        }\\n        for i in s:\\n            if i in \\"[{(\\":\\n                stack.append(i)\\n            elif stack == []:\\n                return False\\n            elif stack[-1] == corres[i]:\\n                stack.pop(-1)\\n            else:\\n                return False\\n        return stack == []\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1691730864,"question_id":14,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752048663,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1691730864/","is_pending":"Not Pending","title":"Longest Common Prefix","memory":"18.1 MB","code":"class Solution:\\n    def longestCommonPrefix(self, strs: List[str]) -> str:\\n        index = 0\\n        longestprefix = \\"\\"\\n        minlen = len(strs[0])\\n        for i in strs:\\n            if len(i) < minlen:\\n                minlen = len(i)\\n        while index < minlen:\\n            char = strs[0][index]\\n            for i in strs:\\n                if i[index] != char:\\n                    return longestprefix\\n            longestprefix += char\\n            index += 1\\n        return longestprefix\\n\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-common-prefix","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1691718183,"question_id":13,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752047752,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1691718183/","is_pending":"Not Pending","title":"Roman to Integer","memory":"17.7 MB","code":"class Solution:\\n    def romanToInt(self, s: str) -> int:\\n        val = 0\\n        valmap = {\\n            \\"I\\" : 1,\\n            \\"V\\" : 5,\\n            \\"X\\" : 10,\\n            \\"L\\" : 50,\\n            \\"C\\" : 100,\\n            \\"D\\" : 500,\\n            \\"M\\" : 1000,\\n        }\\n        prev = 0\\n        for i in s[::-1]:\\n            if valmap[i] >= prev:\\n                val += valmap[i]\\n            else:\\n                val -= valmap[i]\\n            prev = valmap[i]\\n        return val\\n\\n\\n\\n        ","compare_resulttitle_slug":"roman-to-integer","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1691705436,"question_id":11,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752046864,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/1691705436/","is_pending":"Not Pending","title":"Container With Most Water","memory":"28.5 MB","code":"class Solution:\\n    def maxArea(self, height: List[int]) -> int:\\n        start = 0\\n        end = len(height) -1\\n        maxarea = 0\\n        while start < end:\\n            area = min(height[start],height[end]) * (end - start)\\n            if height[start] < height[end]:\\n                start += 1\\n            else:\\n                end -= 1\\n            if maxarea < area:\\n                maxarea = area\\n        return maxarea\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"container-with-most-water","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1691686694,"question_id":11,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752045614,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1691686694/","is_pending":"Not Pending","title":"Container With Most Water","memory":"N/A","code":"class Solution:\\n    def maxArea(self, height: List[int]) -> int:\\n        maxarea = 0\\n        for i in range(len(height)-1):\\n            for j in range(i+1, len(height)):\\n                area = min(height[i], height[j]) * (j - i)\\n                if maxarea < area:\\n                    maxarea = area\\n        return maxarea\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111110000000000","title_slug":"container-with-most-water","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1691635842,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042675,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1691635842/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"17.7 MB","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while index < len(s) and s[index] == \\" \\":\\n            index += 1\\n        if index < len(s) and s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif index < len(s) and s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31 - 1,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1691635051,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042632,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1691635051/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while index < len(s) and s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31 - 1,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1691634556,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042603,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1691634556/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31 - 1,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1691634219,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042584,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1691634219/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1691633675,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042553,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1691633675/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1691633218,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042528,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1691633218/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1691631619,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752042443,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1691631619/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return -out\\n        return out\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1689292595,"question_id":1995,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1751875693,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1689292595/","is_pending":"Not Pending","title":"Finding Pairs With a Certain Sum","memory":"N/A","code":"class FindSumPairs:\\n\\n    def __init__(self, nums1: List[int], nums2: List[int]):\\n        self.nums1 = nums1\\n        self.nums2 = nums2\\n        \\n\\n    def add(self, index: int, val: int) -> None:\\n        self.nums2[index] += val\\n        \\n\\n    def count(self, tot: int) -> int:\\n        count1 = {}\\n        count2 = {}\\n        for i in self.nums1:\\n            if i in count1:\\n                count1[i] += 1\\n            else:\\n                count1[i] = 1\\n        for j in self.nums2:\\n            if j in count2:\\n                count2[j] += 1\\n            else:\\n                count2[j] = 1\\n        count = 0\\n        for i in count1:\\n            for j in count2:\\n                if i + j == tot:\\n                    count += count1[i] * count2[j]\\n        return count\\n        \\n\\n\\n# Your FindSumPairs object will be instantiated and called as such:\\n# obj = FindSumPairs(nums1, nums2)\\n# obj.add(index,val)\\n# param_2 = obj.count(tot)","compare_result":"11111111111111111111111100","title_slug":"finding-pairs-with-a-certain-sum","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1689286083,"question_id":1995,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1751875235,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1689286083/","is_pending":"Not Pending","title":"Finding Pairs With a Certain Sum","memory":"N/A","code":"class FindSumPairs:\\n\\n    def __init__(self, nums1: List[int], nums2: List[int]):\\n        self.nums1 = nums1\\n        self.nums2 = nums2\\n        \\n\\n    def add(self, index: int, val: int) -> None:\\n        self.nums2[index] += val\\n        \\n\\n    def count(self, tot: int) -> int:\\n        count = 0\\n        for i in self.nums1:\\n            for j in self.nums2:\\n                if i + j == tot:\\n                    count += 1\\n        return count\\n        \\n\\n\\n# Your FindSumPairs object will be instantiated and called as such:\\n# obj = FindSumPairs(nums1, nums2)\\n# obj.add(index,val)\\n# param_2 = obj.count(tot)","compare_result":"11111111111111111100000000","title_slug":"finding-pairs-with-a-certain-sum","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1689281832,"question_id":1510,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1751874933,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1689281832/","is_pending":"Not Pending","title":"Find Lucky Integer in an Array","memory":"18 MB","code":"class Solution:\\n    def findLucky(self, arr: List[int]) -> int:\\n        count = {}\\n        for i in arr:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        largestluckiest = -1\\n        for i in count:\\n            if count[i] == i and i > largestluckiest:\\n                largestluckiest = i\\n        return largestluckiest\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-lucky-integer-in-an-array","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1685873571,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751613695,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1685873571/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"17.8 MB","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = 0\\n        k -= 1\\n        for i in range(k.bit_length() - 1, -1, -1):\\n            if (k >> i) & 1:\\n                ans += operations[i]\\n        return chr(ord(\\"a\\") + (ans % 26)) ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1684701607,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751525067,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684701607/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"17.8 MB","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = 0\\n        k -= 1\\n        for i in range(k.bit_length() - 1, -1, -1):\\n            if (k >> i) & 1:\\n                ans += operations[i]\\n        return chr(ord(\\"a\\") + (ans % 26)) ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1684697706,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751524861,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1684697706/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"17.9 MB","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = \'a\'\\n        while operations != []:\\n            if k > 2**(len(operations)-1):\\n                k -= 2**(len(operations)-1)\\n                ans = chr((ord(ans) - ord(\'a\') + operations[-1])%26 + ord(\'a\'))\\n            operations.pop()\\n        return ans        ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1684696489,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751524794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1684696489/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"N/A","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = \'a\'\\n        while operations != []:\\n            if k > 2**(len(operations)-1):\\n                k -= 2**(len(operations)-1)\\n                ans = chr(ord(ans) + operations[-1])\\n            operations.pop()\\n        return ans        ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":78}],"has_next":true,"last_key":""}'
2025-08-19 05:04:45,184 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 11.59.26 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:45,614 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:45,615 [INFO] __main__.py:250 - valid-parentheses/2025-07-10 11.38.26 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:46,100 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:46,101 [INFO] __main__.py:250 - longest-common-prefix/2025-07-09 13.41.03 - Accepted - runtime 0ms - memory 18.1MB.py already exists, skipping it
2025-08-19 05:04:46,516 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:46,517 [INFO] __main__.py:250 - roman-to-integer/2025-07-09 13.25.52 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:47,334 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:47,335 [INFO] __main__.py:250 - container-with-most-water/2025-07-09 13.11.04 - Accepted - runtime 67ms - memory 28.5MB.py already exists, skipping it
2025-08-19 05:04:47,335 [INFO] __main__.py:250 - container-with-most-water/2025-07-09 12.50.14 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,049 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:48,049 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 12.01.15 - Accepted - runtime 2ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:48,050 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 12.00.32 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,050 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 12.00.03 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,050 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.59.44 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,050 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.59.13 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,050 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.58.48 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,051 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.57.23 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,558 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:48,558 [INFO] __main__.py:250 - finding-pairs-with-a-certain-sum/2025-07-07 13.38.13 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,559 [INFO] __main__.py:250 - finding-pairs-with-a-certain-sum/2025-07-07 13.30.35 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:48,971 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:48,971 [INFO] __main__.py:250 - find-lucky-integer-in-an-array/2025-07-07 13.25.33 - Accepted - runtime 0ms - memory 18MB.py already exists, skipping it
2025-08-19 05:04:49,889 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:49,890 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-04 12.51.35 - Accepted - runtime 3ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:49,890 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-03 12.14.27 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:49,890 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-03 12.11.01 - Accepted - runtime 4ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:49,890 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-03 12.09.54 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:54,890 [DEBUG] leetcode.py:150 - Exporting submissions from 160 to 180
2025-08-19 05:04:55,317 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=160&limit=20 HTTP/1.1" 200 None
2025-08-19 05:04:55,317 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1684660747,"question_id":3600,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751522881,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684660747/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"7.9 MB","code":"class Solution {\\npublic:\\n    char kthCharacter(int k) {\\n        int x = 512;\\n        char ans = \'a\';\\n        while (k > 1){\\n            if (k > x){\\n                k -= x;\\n                ans ++;\\n            }\\n            x /= 2;\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1684577632,"question_id":3617,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751518117,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1684577632/","is_pending":"Not Pending","title":"Find the Original Typed String I","memory":"17.9 MB","code":"class Solution:\\n    def possibleStringCount(self, word: str) -> int:\\n        n, ans = len(word), 1\\n        for i in range(1, n):\\n            if word[i - 1] == word[i]:\\n                ans += 1\\n        return ans","compare_resulttitle_slug":"find-the-original-typed-string-i","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1684573868,"question_id":3617,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751517886,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1684573868/","is_pending":"Not Pending","title":"Find the Original Typed String I","memory":"17.8 MB","code":"class Solution:\\n    def possibleStringCount(self, word: str) -> int:\\n        possibilities = 1\\n        start = 0\\n        till = 0\\n        while start < len(word):\\n            while till < len(word) and word[start] == word[till]:\\n                till += 1\\n            possibilities += till - start - 1\\n            start = till\\n        return possibilities","compare_resulttitle_slug":"find-the-original-typed-string-i","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1684559976,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751517003,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1684559976/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        total_steps = 0\\n        step = 512\\n        while k > 1:\\n            if k > step:\\n                k -= step\\n                total_steps += 1\\n            step /= 2\\n        return chr(total_steps + 97)\\n\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1684559772,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751516990,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1684559772/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        total_steps = 0\\n        step = 512\\n        while k > 1:\\n            if k > step:\\n                k -= step\\n                total_steps += 1\\n            step /= 2\\n        return chr(total_steps + 97)\\n\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1684554564,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751516629,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684554564/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        route = [k]\\n        step = 512\\n        while k > 1:\\n            if k > step:\\n                k -= step\\n                route.append(k)\\n            step /= 2\\n        return chr(len(route) + 65 - 1 + 32)\\n\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1684548266,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751516185,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1684548266/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        word = \\"a\\"\\n        while len(word) < k:\\n            next = \\"\\"\\n            for i in word:\\n                next += chr(ord(i) + 1)\\n            word += next\\n        return word[k-1]\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1683760898,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751454247,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/1683760898/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"26.8 MB","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        min_price = prices[0]\\n        max_profit = 0\\n        \\n        for price in prices[1:]:\\n            max_profit = max(max_profit, price - min_price)\\n            min_price = min(min_price, price)\\n            \\n        return max_profit","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1683760672,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751454233,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/1683760672/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"26.8 MB","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        min_price = prices[0]\\n        max_profit = 0\\n        \\n        for price in prices[1:]:\\n            max_profit = max(max_profit, price - min_price)\\n            min_price = min(min_price, price)\\n            \\n        return max_profit","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1683754693,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751453816,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1683754693/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"26.9 MB","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        lowestprice = prices[0]\\n        maxprofit = 0\\n        for i in prices:\\n            if lowestprice > i:\\n                lowestprice = i\\n            if i - lowestprice > maxprofit:\\n                maxprofit = i - lowestprice\\n        return maxprofit\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1683733531,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751452388,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1683733531/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"N/A","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        profitgen = 0\\n        for i in range(len(prices)):\\n            for j in range(i, len(prices)):\\n                if prices[j] - prices[i] > profitgen:\\n                    profitgen = prices[j] - prices[i]\\n        return profitgen","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1683727644,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751452006,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1683727644/","is_pending":"Not Pending","title":"Rotate Array","memory":"25.8 MB","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        k = k % len(nums)\\n        def reverse(nums: List[int], start: int, stop: int):\\n            while start < stop:\\n                nums[start], nums[stop] = nums[stop], nums[start]\\n                start += 1\\n                stop -= 1\\n        \\n        reverse(nums, 0, len(nums)-1-k)\\n        reverse(nums, len(nums)-k, len(nums)-1)\\n        reverse(nums, 0, len(nums)-1)","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1683724588,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751451812,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1683724588/","is_pending":"Not Pending","title":"Rotate Array","memory":"25.7 MB","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        n = len(nums)\\n        k %= n\\n        nums.reverse()\\n        nums[:k] = reversed(nums[:k])\\n        nums[k:] = reversed(nums[k:])","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1683715670,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751451258,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1683715670/","is_pending":"Not Pending","title":"Rotate Array","memory":"25.8 MB","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        k = k % len(nums)\\n        def reverse(nums: List[int], start: int, stop: int):\\n            while start < stop:\\n                nums[start], nums[stop] = nums[stop], nums[start]\\n                start += 1\\n                stop -= 1\\n        \\n        reverse(nums, 0, len(nums)-1-k)\\n        reverse(nums, len(nums)-k, len(nums)-1)\\n        reverse(nums, 0, len(nums)-1)\\n        ","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1683714969,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751451216,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1683714969/","is_pending":"Not Pending","title":"Rotate Array","memory":"N/A","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        def reverse(nums: List[int], start: int, stop: int):\\n            while start < stop:\\n                nums[start], nums[stop] = nums[stop], nums[start]\\n                start += 1\\n                stop -= 1\\n        \\n        reverse(nums, 0, len(nums)-1-k)\\n        reverse(nums, len(nums)-k, len(nums)-1)\\n        reverse(nums, 0, len(nums)-1)\\n        ","compare_result":"11111111111111111111111000100011101000","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1683601532,"question_id":169,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751443966,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1683601532/","is_pending":"Not Pending","title":"Majority Element","memory":"19.4 MB","code":"class Solution:\\n    def majorityElement(self, nums: List[int]) -> int:\\n        count = 0\\n        for i in nums:\\n            if count == 0:\\n                candidate = i\\n                count += 1\\n            elif i != candidate:\\n                count -= 1\\n            else:\\n                count += 1\\n        return candidate","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1683595537,"question_id":169,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751443533,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1683595537/","is_pending":"Not Pending","title":"Majority Element","memory":"19.4 MB","code":"class Solution:\\n    def majorityElement(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i not in count:\\n                count[i] = 1\\n            else:\\n                count[i] += 1\\n        for i in count:\\n            if count[i] > len(nums)/2:\\n                return i\\n        return -1\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1683557393,"question_id":26,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440948,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1683557393/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"18.9 MB","code":"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        i = 1\\n        while i < len(nums):\\n            if nums[i-1] == nums[i]:\\n                nums.pop(i)\\n                continue\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1683556002,"question_id":26,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440861,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/1683556002/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"18.9 MB","code":"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        i = 1\\n        while i < len(nums):\\n            if nums[i-1] == nums[i]:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1683553023,"question_id":27,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440678,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1683553023/","is_pending":"Not Pending","title":"Remove Element","memory":"17.9 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        i = 0\\n        while i < len(nums):\\n            if nums[i] == val:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":58}],"has_next":true,"last_key":""}'
2025-08-19 05:04:55,838 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:55,839 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 11.38.01 - Accepted - runtime 0ms - memory 7.9MB.cpp already exists, skipping it
2025-08-19 05:04:56,653 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:56,654 [INFO] __main__.py:250 - find-the-original-typed-string-i/2025-07-03 10.18.37 - Accepted - runtime 45ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:04:56,654 [INFO] __main__.py:250 - find-the-original-typed-string-i/2025-07-03 10.14.46 - Accepted - runtime 39ms - memory 17.8MB.py already exists, skipping it
2025-08-19 05:04:56,655 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 10.00.03 - Accepted - runtime 2ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:56,655 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 09.59.50 - Accepted - runtime 1ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:56,655 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 09.53.49 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:56,655 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 09.46.25 - Accepted - runtime 9ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:04:57,065 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:57,066 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.34.07 - Accepted - runtime 135ms - memory 26.8MB.py already exists, skipping it
2025-08-19 05:04:57,067 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.33.53 - Accepted - runtime 125ms - memory 26.8MB.py already exists, skipping it
2025-08-19 05:04:57,067 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.26.56 - Accepted - runtime 28ms - memory 26.9MB.py already exists, skipping it
2025-08-19 05:04:57,067 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.03.08 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:57,728 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:57,728 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.56.46 - Accepted - runtime 5ms - memory 25.8MB.py already exists, skipping it
2025-08-19 05:04:57,728 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.53.32 - Accepted - runtime 4ms - memory 25.7MB.py already exists, skipping it
2025-08-19 05:04:57,729 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.44.18 - Accepted - runtime 6ms - memory 25.8MB.py already exists, skipping it
2025-08-19 05:04:57,729 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.43.36 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:04:58,184 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:58,185 [INFO] __main__.py:250 - majority-element/2025-07-02 13.42.46 - Accepted - runtime 7ms - memory 19.4MB.py already exists, skipping it
2025-08-19 05:04:58,185 [INFO] __main__.py:250 - majority-element/2025-07-02 13.35.33 - Accepted - runtime 15ms - memory 19.4MB.py already exists, skipping it
2025-08-19 05:04:58,494 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:58,496 [INFO] __main__.py:250 - remove-duplicates-from-sorted-array/2025-07-02 12.52.28 - Accepted - runtime 57ms - memory 18.9MB.py already exists, skipping it
2025-08-19 05:04:58,496 [INFO] __main__.py:250 - remove-duplicates-from-sorted-array/2025-07-02 12.51.01 - Accepted - runtime 58ms - memory 18.9MB.py already exists, skipping it
2025-08-19 05:04:58,910 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:04:58,911 [INFO] __main__.py:250 - remove-element/2025-07-02 12.47.58 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-19 05:05:03,911 [DEBUG] leetcode.py:150 - Exporting submissions from 180 to 200
2025-08-19 05:05:04,268 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=180&limit=20 HTTP/1.1" 200 None
2025-08-19 05:05:04,297 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1683552634,"question_id":27,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440657,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1683552634/","is_pending":"Not Pending","title":"Remove Element","memory":"17.7 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        i = 0\\n        while i < len(nums):\\n            if nums[i] == val:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return i\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1683550074,"question_id":27,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440503,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1683550074/","is_pending":"Not Pending","title":"Remove Element","memory":"17.5 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        i = 0\\n        while i < len(nums):\\n            if nums[i] == val:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1632388010,"question_id":3629,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747102677,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1632388010/","is_pending":"Not Pending","title":"Total Characters in String After Transformations I","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthAfterTransformations(string s, int t) {\\n        vector<int> x;\\n        for (char c : s){\\n            x.push_back((int)c - (int)(\'a\'));\\n            x[x.size()-1] += t;\\n        }\\n        long sum = 0;\\n        for (int i : x){\\n            sum += i / 26 + 1;\\n        }\\n        return sum;\\n    }\\n};","compare_resulttitle_slug":"total-characters-in-string-after-transformations-i","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1632387543,"question_id":3629,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747102624,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1632387543/","is_pending":"Not Pending","title":"Total Characters in String After Transformations I","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthAfterTransformations(string s, int t) {\\n        vector<int> x;\\n        for (char c : s){\\n            x.push_back((int)c - (int)(\'a\'));\\n            x[x.size()-1] += t;\\n        }\\n        int sum = 0;\\n        for (int i : x){\\n            sum += i / 26 + 1;\\n        }\\n        return sum;\\n    }\\n};","compare_resulttitle_slug":"total-characters-in-string-after-transformations-i","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1631517213,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747019387,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631517213/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"11.2 MB","code":"class Solution {\\npublic:\\n    string convert(string s, int numRows) {\\n        if (numRows == 1) return s;\\n        char a[10000];\\n        std::size_t len = s.length();\\n        int index =0;\\n        for (int i = 0; i < numRows; i++) {\\n            for (int j = i; j < len; j +=2*(numRows-1)) {\\n                a[index++] = s[j];\\n                if (i > 0 && i<numRows-1 && j+2*(numRows-1)-2*i<len) {\\n                    a[index++] = s[j + 2*(numRows - 1)-2*i];\\n                }\\n            }\\n        }\\n        a[index]=\'\\\\0\';\\n        return a;\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1631516555,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747019304,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1631516555/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"14.2 MB","code":"class Solution {\\npublic:\\n    string convert(string s, int numRows) {\\n    if(numRows <= 1) return s;\\n    vector<string>v(numRows, \\"\\"); \\n    int j = 0, dir = -1;\\n    for(int i = 0; i < s.length(); i++)\\n    {\\n        if(j == numRows - 1 || j == 0) dir *= (-1); \\n        v[j] += s[i];\\n        if(dir == 1) j++;\\n        else j--;\\n    }\\n    string res;\\n    for(auto &it : v) res += it; \\n    return res;\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1631515355,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747019156,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1631515355/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"17.5 MB","code":"class Solution {\\npublic:\\n    string convert(string s, int numRows) {\\n        if (numRows == 1 || numRows >= s.length()) {\\n            return s;\\n        }\\n\\n        vector<vector<char>> Vec(numRows);\\n        bool f = true;\\n        int j = 0;\\n\\n        for(int i = 0; i<s.size(); i++){\\n            Vec[j].push_back(s[i]);\\n            if(j == numRows-1){\\n                f = false;\\n            }\\n            if(j == 0){\\n                f = true;\\n            }\\n            if(f == true){\\n                j++;\\n            }\\n            else{\\n                j--;\\n            }\\n        }\\n\\n        string r;\\n        for(int i = 0; i<numRows; i++){\\n            for(char c : Vec[i]){\\n                r += c;\\n            }\\n        }\\n        return r;\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1631513645,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747018949,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1631513645/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"14.1 MB","code":"class Solution {\\npublic:\\n    int calcindex(int i, int numRows){\\n        i = i % (2* numRows - 2);\\n        if (i < numRows) return i;\\n        return 2 * numRows - i - 2;\\n    }\\n\\n    string convert(string s, int numRows) {\\n        if (numRows == 1) return s;\\n        vector<string> parts(numRows);\\n        for (int i = 0; i < s.size(); i++){\\n            parts[calcindex(i,numRows)] += s[i];\\n        }\\n        for (int i = 1; i < numRows; i++){\\n            parts[0] += parts[i];\\n        }\\n        return parts[0];\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1631494691,"question_id":2215,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747016491,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631494691/","is_pending":"Not Pending","title":"Finding 3-Digit Even Numbers","memory":"12.3 MB","code":"class Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        array<int, 10> freq={0}; \\n        int cntEven=0;\\n        for(int x: digits){\\n            freq[x]++;\\n            cntEven+=(x&1)==0;\\n        }\\n        if (cntEven==0) return {};\\n        vector<int> ans;\\n        for(int x=100; x<=999; x+=2){\\n            auto freq0=freq;\\n            int x0=x%10, x1=(x/10)%10, x2=x/100;\\n            if (freq0[x0]--<=0) continue;\\n            if (freq0[x1]--<=0) continue;\\n            if (freq0[x2]--<=0) continue;\\n            ans.push_back(x);\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"finding-3-digit-even-numbers","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1631493792,"question_id":2215,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747016362,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1631493792/","is_pending":"Not Pending","title":"Finding 3-Digit Even Numbers","memory":"12.5 MB","code":"class Solution {\\npublic:\\n    bool can_construct(int i, vector<int>& digits) {\\n        int ones = i % 10;\\n        int tens = (i / 10) % 10;\\n        int hundereds = i / 100;\\n        bool b_ones = false;\\n        bool b_tens = false;\\n        bool b_hundereds = false;\\n        for (auto x : digits) {\\n            if (x == ones && !b_ones) {\\n                b_ones = true;\\n                continue;\\n            }\\n            if (x == tens && !b_tens) {\\n                b_tens = true;\\n                continue;\\n            }\\n            if (x == hundereds && !b_hundereds) {\\n                b_hundereds = true;\\n                continue;\\n            }\\n        }\\n        return (b_ones && b_tens && b_hundereds);\\n    }\\n\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        int i = 100;\\n        while (i < 999) {\\n            if (can_construct(i, digits)) {\\n                ans.push_back(i);\\n            }\\n            i += 2;\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"finding-3-digit-even-numbers","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1631486654,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747015320,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1631486654/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"11.6 MB","code":"class Solution {\\npublic:\\n    string longestPalindrome(string s) {\\n        string processed = \\"#\\";\\n        for (char c : s)\\n            processed += c, processed += \'#\';\\n\\n        int n = processed.size(), center = 0, right = 0, max_len = 0, start = 0;\\n        vector<int> p(n, 0);\\n\\n        for (int i = 0; i < n; i++) {\\n            if (i < right)\\n                p[i] = min(right - i, p[2 * center - i]); // Mirror from left\\n\\n            // Expand around i\\n            int l = i - p[i] - 1, r = i + p[i] + 1;\\n            while (l >= 0 && r < n && processed[l] == processed[r]) {\\n                p[i]++;\\n                l--;\\n                r++;\\n            }\\n\\n            // Update rightmost palindrome\\n            if (i + p[i] > right) {\\n                center = i;\\n                right = i + p[i];\\n            }\\n\\n            // Track longest\\n            if (p[i] > max_len) {\\n                max_len = p[i];\\n                start = (i - max_len) / 2; // Convert to original indices\\n            }\\n        }\\n\\n        return s.substr(start, max_len);\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1631486252,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747015258,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1631486252/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    string processed = \\"#\\";\\n    for (char c : s) {\\n        processed += c; processed += \'#\';\\n    }\\n    \\n    int n = processed.size(), center = 0, right = 0, max_len = 0, start = 0;\\n    vector<int> p(n, 0);\\n\\n    for (int i = 0; i < n; i++) {\\n        if (i < right) \\n            p[i] = min(right - i, p[2*center - i]); // Mirror from left\\n        \\n        // Expand around i\\n        int l = i - p[i] - 1, r = i + p[i] + 1;\\n        while (l >= 0 && r < n && processed[l] == processed[r]) {\\n            p[i]++;\\n            l--;\\n            r++;\\n        }\\n        \\n        // Update rightmost palindrome\\n        if (i + p[i] > right) {\\n            center = i;\\n            right = i + p[i];\\n        }\\n        \\n        // Track longest\\n        if (p[i] > max_len) {\\n            max_len = p[i];\\n            start = (i - max_len) / 2; // Convert to original indices\\n        }\\n    }\\n    \\n    return s.substr(start, max_len);\\n};","compare_result":null,"title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1631486082,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747015233,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1631486082/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    string processed = \\"#\\";\\n    for (char c : s) processed += c, processed += \'#\';\\n    \\n    int n = processed.size(), center = 0, right = 0, max_len = 0, start = 0;\\n    vector<int> p(n, 0);\\n\\n    for (int i = 0; i < n; i++) {\\n        if (i < right) \\n            p[i] = min(right - i, p[2*center - i]); // Mirror from left\\n        \\n        // Expand around i\\n        int l = i - p[i] - 1, r = i + p[i] + 1;\\n        while (l >= 0 && r < n && processed[l] == processed[r]) {\\n            p[i]++;\\n            l--;\\n            r++;\\n        }\\n        \\n        // Update rightmost palindrome\\n        if (i + p[i] > right) {\\n            center = i;\\n            right = i + p[i];\\n        }\\n        \\n        // Track longest\\n        if (p[i] > max_len) {\\n            max_len = p[i];\\n            start = (i - max_len) / 2; // Convert to original indices\\n        }\\n    }\\n    \\n    return s.substr(start, max_len);\\n};","compare_result":null,"title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1631480818,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747014449,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/1631480818/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"9.5 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(const string& s, int left, int right) {\\n        while (left < right) {\\n            if (s[left++] != s[right--]) return false;\\n        }\\n        return true;\\n    }\\n\\n    string longestPalindrome(string s) {\\n        int n = s.size();\\n        for (int len = n; len > 0; --len) {\\n            for (int start = 0; start <= n - len; ++start) {\\n                int end = start + len - 1;\\n                if (isPalindrome(s, start, end))\\n                    return s.substr(start, len);\\n            }\\n        }\\n        return \\"\\";\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1631478823,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747014149,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1631478823/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s){\\n        for (int i = 0; i < s.size() / 2; i++){\\n            if (s[i] != s[s.size() -1 -i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    string longestPalindrome(string s) {\\n        for (int i = s.size(); i > 0; i--){\\n            for (int startindex = 0; startindex <= s.size() - i; startindex++)\\n            if (isPalindrome(s.substr(startindex, i))) return s.substr(startindex, i);\\n        }\\n        return \\"\\";\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1631478004,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747014020,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1631478004/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s){\\n        if (s.size() < 2) return true;\\n        if (s[0] != s[s.size()-1]) return false;\\n        return isPalindrome(s.substr(1, s.size()-2));\\n    }\\n\\n    string longestPalindrome(string s) {\\n        for (int i = s.size(); i > 0; i--){\\n            for (int startindex = 0; startindex <= s.size() - i; startindex++)\\n            if (isPalindrome(s.substr(startindex, i))) return s.substr(startindex, i);\\n        }\\n        return \\"\\";\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1631072999,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746970843,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1631072999/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"10.3 MB","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() < 2) return s.length();\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start++;\\n                    end--;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1631072602,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746970807,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631072602/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start++;\\n                    end--;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_result":"111101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1631021976,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966288,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631021976/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 1;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start++;\\n                    end = start;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_result":"100110101111010011111111111111111111111111111111111111111111111111011111101111110110111111011111111111101111111111111111111110111111111110111011011110110110111111111111111111101011111111111111011111111011101111101111011111111111111111111101011101111110111111110110111111111111111111111111111111111111111101111111111111111111111111110111111111100111101101111100110111111100101101111111111011101011101111111101111111111101111111011101111111101110111111101111111111111111111111110111111111111100111110111101110110111011101100111111111101111111111011111001111110111111111111111101111110111111101111111111011111111111111110111111110111011111111111111111111111000110111111111111111111101111111101111101111100101110111111011110011111011111111101111111111111111101111111101110111111110111111111111111111110111111111111111111111110111110111000111111010111111111011111111111101111111111111111111101011111110111111111100110111111011111111111110110111101111111111111101110111111111111111111111111111","title_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1631021607,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966255,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631021607/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 1;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":38}],"has_next":true,"last_key":""}'
2025-08-19 05:05:04,298 [INFO] __main__.py:250 - remove-element/2025-07-02 12.47.37 - Accepted - runtime 1ms - memory 17.7MB.py already exists, skipping it
2025-08-19 05:05:04,298 [INFO] __main__.py:250 - remove-element/2025-07-02 12.45.03 - Accepted - runtime 0ms - memory 17.5MB.py already exists, skipping it
2025-08-19 05:05:04,737 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:04,738 [INFO] __main__.py:250 - total-characters-in-string-after-transformations-i/2025-05-13 07.47.57 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:04,738 [INFO] __main__.py:250 - total-characters-in-string-after-transformations-i/2025-05-13 07.47.04 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:05,151 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:05,151 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.39.47 - Accepted - runtime 0ms - memory 11.2MB.cpp already exists, skipping it
2025-08-19 05:05:05,152 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.38.24 - Accepted - runtime 6ms - memory 14.2MB.cpp already exists, skipping it
2025-08-19 05:05:05,152 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.35.56 - Accepted - runtime 16ms - memory 17.5MB.cpp already exists, skipping it
2025-08-19 05:05:05,152 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.32.29 - Accepted - runtime 7ms - memory 14.1MB.cpp already exists, skipping it
2025-08-19 05:05:05,456 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:05,457 [INFO] __main__.py:250 - finding-3-digit-even-numbers/2025-05-12 07.51.31 - Accepted - runtime 0ms - memory 12.3MB.cpp already exists, skipping it
2025-08-19 05:05:05,462 [INFO] __main__.py:250 - finding-3-digit-even-numbers/2025-05-12 07.49.22 - Accepted - runtime 7ms - memory 12.5MB.cpp already exists, skipping it
2025-08-19 05:05:05,966 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:05,967 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.32.00 - Accepted - runtime 2ms - memory 11.6MB.cpp already exists, skipping it
2025-08-19 05:05:05,970 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.30.58 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:05,970 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.30.33 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:05,970 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.17.29 - Accepted - runtime 85ms - memory 9.5MB.cpp already exists, skipping it
2025-08-19 05:05:05,970 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.12.29 - Time Limit Exceeded - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:05,970 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.10.20 - Time Limit Exceeded - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:06,586 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:06,586 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 19.10.43 - Accepted - runtime 15ms - memory 10.3MB.cpp already exists, skipping it
2025-08-19 05:05:06,586 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 19.10.07 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:06,587 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.54.48 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:06,587 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.54.15 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:11,587 [DEBUG] leetcode.py:150 - Exporting submissions from 200 to 220
2025-08-19 05:05:12,006 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=200&limit=20 HTTP/1.1" 200 None
2025-08-19 05:05:12,007 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1631021334,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966230,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631021334/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1631020977,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966196,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631020977/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s == \\"\\") return 0;\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1631020608,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966163,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1631020608/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1631007308,"question_id":2,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746964964,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631007308/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"77.1 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummyHead = new ListNode(0);\\n        ListNode* tail = dummyHead;\\n        int carry = 0;\\n\\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\\n            int digit1 = (l1 != nullptr) ? l1->val : 0;\\n            int digit2 = (l2 != nullptr) ? l2->val : 0;\\n\\n            int sum = digit1 + digit2 + carry;\\n            int digit = sum % 10;\\n            carry = sum / 10;\\n\\n            ListNode* newNode = new ListNode(digit);\\n            tail->next = newNode;\\n            tail = tail->next;\\n\\n            l1 = (l1 != nullptr) ? l1->next : nullptr;\\n            l2 = (l2 != nullptr) ? l2->next : nullptr;\\n        }\\n\\n        ListNode* result = dummyHead->next;\\n        delete dummyHead;\\n        return result;\\n    }\\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1631005724,"question_id":2,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746964816,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1631005724/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"77 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int sum = 0;\\n        ListNode* head = new ListNode;\\n        ListNode* ptr = head;\\n        while (l1 != NULL || l2 != NULL || sum > 0) {\\n            sum += (l1 != NULL ? l1->val : 0) + (l2 != NULL ? l2->val : 0);\\n            ptr->val = sum % 10;\\n            sum /= 10;\\n            if (l1)\\n                l1 = l1->next;\\n            if (l2)\\n                l2 = l2->next;\\n            if (l1 != NULL || l2 != NULL || sum > 0) {\\n                ptr->next = new ListNode;\\n                ptr = ptr->next;\\n            }\\n        }\\n        return head;\\n    }\\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1630934494,"question_id":1293,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746958266,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1630934494/","is_pending":"Not Pending","title":"Three Consecutive Odds","memory":"11.9 MB","code":"class Solution {\\npublic:\\n    bool threeConsecutiveOdds(vector<int>& arr) {\\n        if (arr.size() < 3) return false;\\n        for(int i = 0; i < arr.size() - 2; i++){\\n            if (arr[i] % 2 == 1 && arr[i+1] % 2 == 1 && arr[i+2] % 2 == 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"three-consecutive-odds","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1630934011,"question_id":1293,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746958223,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1630934011/","is_pending":"Not Pending","title":"Three Consecutive Odds","memory":"N/A","code":"class Solution {\\npublic:\\n    bool threeConsecutiveOdds(vector<int>& arr) {\\n        for(int i = 0; i < arr.size() - 2; i++){\\n            if (arr[i] % 2 == 1 && arr[i+1] % 2 == 1 && arr[i+2] % 2 == 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11000000000000000000000000000000000000","title_slug":"three-consecutive-odds","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1549227781,"question_id":560,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740026012,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1549227781/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        presum = [0]\\n        for i in nums:\\n            presum.append(presum[-1]+i)\\n        \\n        count = 0\\n        for i in range(len(presum)):\\n            for j in range(i+1, len(presum)):\\n                if presum[j] - presum[i] == k:\\n                    count += 1\\n        return count\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1549225211,"question_id":560,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740025833,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1549225211/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                if to < len(nums):\\n                    numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            elif fro <= to:\\n                count += 1\\n                to +=1\\n            else: \\n                to +=1\\n\\n        return count","compare_result":"111110010000010000000000000101101011001000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1549224333,"question_id":560,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740025770,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1549224333/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            elif fro <= to:\\n                count += 1\\n                to +=1\\n            else: \\n                to +=1\\n\\n        return count","compare_result":"111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1549223781,"question_id":560,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740025734,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1549223781/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            elif fro < to:\\n                count += 1\\n                to +=1\\n            else: \\n                to +=1\\n\\n        return count","compare_result":"111010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1549221975,"question_id":560,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740025612,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1549221975/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            else:\\n                count += 1\\n                to +=1\\n                \\n        return count","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1549213622,"question_id":560,"lang":"python3","lang_name":"Python3","time":"5\xc2\xa0months, 4\xc2\xa0weeks","timestamp":1740025028,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1549213622/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        presum = [0]\\n        for i in nums:\\n            presum.append(presum[-1]+i)\\n        \\n        count = 0\\n        for i in range(len(presum)):\\n            for j in range(i+1, len(presum)):\\n                if presum[j] - presum[i] == k:\\n                    count += 1\\n        return count\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1275933312,"question_id":1,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1717389660,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1275933312/","is_pending":"Not Pending","title":"Two Sum","memory":"14.2 MB","code":"#include <unordered_map>\\n \\nclass Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        // Declare an unordered map to store the numbers and their indices\\n        unordered_map<int, int> mp;\\n       \\n        // Loop through the array\\n        for(int i = 0; i < nums.size(); i++){\\n            // Check if the complement of the current number exists in the map\\n            if(mp.find(target - nums[i]) == mp.end())\\n                // If not, add the current number and its index to the map\\n                mp[nums[i]] = i;\\n            else\\n                // If yes, return the indices of the current number and its complement\\n                return {mp[target - nums[i]], i};\\n        }\\n \\n        // If no pair is found, return {-1, -1} as a default value\\n        return {-1, -1};\\n    }\\n};\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1275927179,"question_id":1,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1717389197,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/1275927179/","is_pending":"Not Pending","title":"Two Sum","memory":"12.7 MB","code":"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        vector<int> ans;\\n        for(int i = 0; i<nums.size(); i++){\\n            for(int j = i+1; j<nums.size(); j++){\\n                if(nums[i]+nums[j]==target) {\\n                    ans.push_back(i);\\n                    ans.push_back(j);\\n                    return ans;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1264162068,"question_id":125,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1716309688,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1264162068/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"8.6 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        int i = 0, j = s.size() - 1;\\n        while (i < j) {\\n            if (!isalnum(s[i])) \\n                i++;\\n            else if (!isalnum(s[j])) \\n                j--;\\n            else if ((tolower(s[i]) != tolower(s[j]))) \\n                return false;\\n            else {\\n                i++;\\n                j--;\\n            }\\n        }\\n        return true;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1262057681,"question_id":125,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716106832,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1262057681/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"8.7 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        int i = 0, j = s.size() - 1;\\n        while (i < j) {\\n            if (!isalnum(s[i])) \\n                i++;\\n            else if (!isalnum(s[j])) \\n                j--;\\n            else if (!(tolower(s[i]) == tolower(s[j]))) \\n                return false;\\n            else {\\n                i++;\\n                j--;\\n            }\\n        }\\n        return true;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1261108159,"question_id":1013,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716016292,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1261108159/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"7 MB","code":"class Solution {\\npublic:\\n    int fib(int n) {\\n        int a=0,b=1;\\n        for(int i = 0; i<n; i++){\\n            b = a+b;\\n            a = b-a;\\n        }\\n        return a;\\n    }\\n};","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1261100048,"question_id":1013,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716015535,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1261100048/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"7 MB","code":"class Solution {\\npublic:\\n    int fib(int n) {\\n        if (n==0 || n==1){\\n            return n;\\n        }\\n        return fib(n-1)+fib(n-2);\\n    }\\n};","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1251164748,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023961,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251164748/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0|| x!=0 && x%10==0) return 0;\\n        else if (x<10) return 1;\\n        int n = x,p=0;\\n        do{\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n|| p==n/10) return 1;\\n            else if(n>p) return 0;\\n        }while(n);\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":18}],"has_next":true,"last_key":""}'
2025-08-19 05:05:12,007 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.53.50 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:12,007 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.53.16 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:12,008 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.52.43 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:12,525 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:12,526 [INFO] __main__.py:250 - add-two-numbers/2025-05-11 17.32.44 - Accepted - runtime 0ms - memory 77.1MB.cpp already exists, skipping it
2025-08-19 05:05:12,526 [INFO] __main__.py:250 - add-two-numbers/2025-05-11 17.30.16 - Accepted - runtime 3ms - memory 77MB.cpp already exists, skipping it
2025-08-19 05:05:13,030 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:13,031 [INFO] __main__.py:250 - three-consecutive-odds/2025-05-11 15.41.06 - Accepted - runtime 0ms - memory 11.9MB.cpp already exists, skipping it
2025-08-19 05:05:13,031 [INFO] __main__.py:250 - three-consecutive-odds/2025-05-11 15.40.23 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:13,956 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:13,957 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 10.03.32 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:05:13,958 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 10.00.33 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:05:13,958 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.59.30 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:05:13,958 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.58.54 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:05:13,958 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.56.52 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:05:13,958 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.47.08 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-19 05:05:13,959 [INFO] __main__.py:250 - two-sum/2024-06-03 10.11.00 - Accepted - runtime 12ms - memory 14.2MB.cpp already exists, skipping it
2025-08-19 05:05:13,959 [INFO] __main__.py:250 - two-sum/2024-06-03 10.03.17 - Accepted - runtime 104ms - memory 12.7MB.cpp already exists, skipping it
2025-08-19 05:05:14,366 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:14,367 [INFO] __main__.py:250 - valid-palindrome/2024-05-21 22.11.28 - Accepted - runtime 8ms - memory 8.6MB.cpp already exists, skipping it
2025-08-19 05:05:14,367 [INFO] __main__.py:250 - valid-palindrome/2024-05-19 13.50.32 - Accepted - runtime 4ms - memory 8.7MB.cpp already exists, skipping it
2025-08-19 05:05:14,876 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:14,877 [INFO] __main__.py:250 - fibonacci-number/2024-05-18 12.41.32 - Accepted - runtime 0ms - memory 7MB.cpp already exists, skipping it
2025-08-19 05:05:14,877 [INFO] __main__.py:250 - fibonacci-number/2024-05-18 12.28.55 - Accepted - runtime 8ms - memory 7MB.cpp already exists, skipping it
2025-08-19 05:05:14,877 [INFO] __main__.py:250 - palindrome-number/2024-05-07 01.02.41 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:19,877 [DEBUG] leetcode.py:150 - Exporting submissions from 220 to 240
2025-08-19 05:05:20,276 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=220&limit=20 HTTP/1.1" 200 None
2025-08-19 05:05:20,307 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1251164177,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023914,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251164177/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0|| x!=0 && x%10==0) return 0;\\n        int n = x,p=0;\\n        do{\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n|| p==n/10) return 1;\\n            else if(n>p) return 0;\\n        }while(n);\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1251163366,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023849,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251163366/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0|| x!=0 && x%10==0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n|| p==n/10) return 1;\\n            else if(n>p) return 0;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1251158324,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023406,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251158324/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n || p==n/10 ) return 1;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1251158108,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023386,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251158108/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n || p==n%10 ) return 1;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1251157601,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023344,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251157601/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n) return 1;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1251155857,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023193,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1251155857/","is_pending":"Not Pending","title":"Palindrome Number","memory":"8.2 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10 ;\\n            n/=10;\\n        }\\n        if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_result":"","title_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1251154955,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023114,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251154955/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + x% 10 ;\\n            x/=10;\\n        }\\n        if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1250038636,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714916150,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1250038636/","is_pending":"Not Pending","title":"Reverse Integer","memory":"7.4 MB","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p<INT_MIN/10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1250038155,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714916103,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250038155/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p<INT_MIN*10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1250037189,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714916011,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250037189/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p>INT_MIN*10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1250037052,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915998,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250037052/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p<INT_MIN*10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":7},{"id":1250036653,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915959,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250036653/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":6},{"id":1250036496,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915943,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1250036496/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10) return 0;\\n           r = r*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_result":null,"title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":5},{"id":1250034905,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915790,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250034905/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        try{\\n            while(x){\\n                p= p*10 + x%10;\\n                x/=10;\\n            }\\n        }\\n        catch(int p){\\n            return 0;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":4},{"id":1250033858,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915686,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1250033858/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        try{\\n            while(x){\\n                p= p*10 + x%10;\\n                x/=10;\\n            }\\n        }\\n        /*catch(UndefinedBehaviorSanitizer){\\n            return 0;\\n        }*/\\n        return p;\\n    }\\n};","compare_result":null,"title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":3},{"id":1250033470,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915648,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1250033470/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        try{\\n            while(x){\\n                p= p*10 + x%10;\\n                x/=10;\\n            }\\n        }\\n        catch(UndefinedBehaviorSanitizer){\\n            return 0;\\n        }\\n        return p;\\n    }\\n};","compare_result":null,"title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":2},{"id":1250031940,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915506,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250031940/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n            p= p*10 + x%10;\\n            x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-08-19 05:05:20,308 [INFO] __main__.py:250 - palindrome-number/2024-05-07 01.01.54 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,309 [INFO] __main__.py:250 - palindrome-number/2024-05-07 01.00.49 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,309 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.53.26 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,309 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.53.06 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,310 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.52.24 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,310 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.49.53 - Accepted - runtime 4ms - memory 8.2MB.cpp already exists, skipping it
2025-08-19 05:05:20,310 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.48.34 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,715 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 05:05:20,715 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.05.50 - Accepted - runtime 0ms - memory 7.4MB.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.05.03 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.03.31 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.03.18 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.02.39 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.02.23 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.59.50 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,716 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.58.06 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,717 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.57.28 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-19 05:05:20,717 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.55.06 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:21:12,997 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, folder='submissions', problem_folder_name='${question_id}-${title_slug}', no_problem_statement=False, problem_statement_filename='${question_id}-${title_slug}.md', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', only_accepted=False, only_last_submission=False, language_unprocessed=None, verbose=False, extra_verbose=False, language=None)
2025-08-22 12:21:12,997 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-22 12:21:15,250 [DEBUG] connectionpool.py:1049 - Starting new HTTPS connection (1): leetcode.com:443
2025-08-22 12:21:17,695 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-08-22 12:21:17,696 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1744004921,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"34Â minutes","timestamp":1755843408,"status":10,"status_display":"Accepted","runtime":"2569 ms","url":"/submissions/detail/1744004921/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"48 MB","code":"class Solution:\n    def minimumArea(self, grid: List[List[int]]) -> int:\n        l=[0,0]\n        b=[float('inf'),0]\n        f1=True\n        for i in range(len(grid)):\n            if 1 in grid[i]:\n                if f1:\n                    l[0]=i\n                    f1=False\n                l[1]=i\n            else:\n                continue\n            c=grid[i][::-1]\n            b[0]=min(b[0],grid[i].index(1))\n            b[1]=max(b[1],len(grid[i])-c.index(1))\n        l=l[1]-l[0]+1\n        b=b[1]-b[0]\n        return l*b\n","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":249}],"has_next":true,"last_key":""}
2025-08-22 12:21:18,697 [DEBUG] leetcode.py:112 - User is logged in
2025-08-22 12:21:18,697 [INFO] leetcode.py:95 - Cookie set successful
2025-08-22 12:21:18,697 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-08-22 12:21:20,267 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-08-22 12:21:20,566 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1744004921,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"34\xc2\xa0minutes","timestamp":1755843408,"status":10,"status_display":"Accepted","runtime":"2569 ms","url":"/submissions/detail/1744004921/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"48 MB","code":"class Solution:\\n    def minimumArea(self, grid: List[List[int]]) -> int:\\n        l=[0,0]\\n        b=[float(\'inf\'),0]\\n        f1=True\\n        for i in range(len(grid)):\\n            if 1 in grid[i]:\\n                if f1:\\n                    l[0]=i\\n                    f1=False\\n                l[1]=i\\n            else:\\n                continue\\n            c=grid[i][::-1]\\n            b[0]=min(b[0],grid[i].index(1))\\n            b[1]=max(b[1],len(grid[i])-c.index(1))\\n        l=l[1]-l[0]+1\\n        b=b[1]-b[0]\\n        return l*b\\n","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":249},{"id":1744002038,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"37\xc2\xa0minutes","timestamp":1755843233,"status":10,"status_display":"Accepted","runtime":"2949 ms","url":"/submissions/detail/1744002038/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"47.8 MB","code":"class Solution:\\n    def minimumArea(self, grid: List[List[int]]) -> int:\\n        m, n = len(grid), len(grid[0])\\n        minRow, maxRow = m, -1\\n        minCol, maxCol = n, -1\\n\\n        for i in range(m):\\n            for j in range(n):\\n                if grid[i][j] == 1:\\n                    minRow = min(minRow, i)\\n                    maxRow = max(maxRow, i)\\n                    minCol = min(minCol, j)\\n                    maxCol = max(maxCol, j)\\n\\n        return (maxRow - minRow + 1) * (maxCol - minCol + 1)","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":248},{"id":1743997259,"question_id":104,"lang":"cpp","lang_name":"C++","time":"42\xc2\xa0minutes","timestamp":1755842948,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1743997259/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"18.9 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int maxDepth(TreeNode* root) {\\n        if (root == NULL){\\n            return 0;\\n        }\\n        return 1 + max(maxDepth(root->left),maxDepth(root->right));\\n    }\\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree","has_notes":false,"flag_type":1,"frontend_id":247},{"id":1743991289,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"48\xc2\xa0minutes","timestamp":1755842592,"status":10,"status_display":"Accepted","runtime":"2921 ms","url":"/submissions/detail/1743991289/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"47.8 MB","code":"class Solution:\\n    def minimumArea(self, grid: List[List[int]]) -> int:\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                if grid[i][j] == 1:\\n                    u = i\\n\\n        for j in range(len(grid[0])):\\n            for i in range(len(grid)):\\n                if grid[i][j] == 1:\\n                    l = j\\n\\n        for i in range(len(grid) - 1, -1, -1):\\n            for j in range(len(grid[0])):\\n                if grid[i][j] == 1:\\n                    d = i\\n\\n        for j in range(len(grid[0]) - 1, -1, -1):\\n            for i in range(len(grid)):\\n                if grid[i][j] == 1:\\n                    r = j\\n\\n        print(u,l,d,r)\\n        return (u-d+1) * (l-r+1)\\n\\n","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":246},{"id":1743985302,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"54\xc2\xa0minutes","timestamp":1755842227,"status":10,"status_display":"Accepted","runtime":"2721 ms","url":"/submissions/detail/1743985302/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"47.7 MB","code":"class Solution:\\n    def minimumArea(self, grid: List[List[int]]) -> int:\\n        u = l = d = r = -1\\n\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                if grid[i][j] == 1:\\n                    if i < u or u == -1:\\n                        u = i\\n                    if i > d or d == -1:\\n                        d = i\\n                    if j < l or l == -1:\\n                        l = j \\n                    if j > r or r == -1:\\n                        r = j\\n\\n        print(u,l,d,r)\\n        return (d-u+1) * (r-l+1)\\n\\n","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":245},{"id":1743961864,"question_id":3461,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0hour, 20\xc2\xa0minutes","timestamp":1755840670,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1743961864/","is_pending":"Not Pending","title":"Find the Minimum Area to Cover All Ones I","memory":"N/A","code":"class Solution:\\n    def minimumArea(self, grid: List[List[int]]) -> int:\\n        llim = ulim = 0\\n        rlim = len(grid[0])\\n        dlim = len(grid)\\n\\n        # check upper limit\\n        i = 0\\n        while grid[ulim][i] == 0:\\n            i += 1\\n            if i >= len(grid[ulim]):\\n                i = 0\\n                ulim += 1\\n\\n        # check left limit\\n        i = 0\\n        while grid[i][llim] == 0:\\n            i += 1\\n            if i >= len(grid[llim]):\\n                i = 0\\n                llim += 1\\n\\n        # check right limit\\n        i = len(grid[0]) - 1\\n        while grid[i][rlim] == 0:\\n            if i >= len(grid[rlim]):\\n                i = len(grid[0]) - 1\\n                rlim -= 1\\n            i -= 1\\n\\n        # check left limit\\n        i = len(grid) - 1\\n        while grid[dlim][i] == 0:\\n            if i >= len(grid[dlim]):\\n                i = len(grid) - 1\\n                dlim -= 1\\n            i -= 1\\n\\n        return (ulim-dlim+1) * (rlim-llim+1)\\n","compare_resulttitle_slug":"find-the-minimum-area-to-cover-all-ones-i","has_notes":false,"flag_type":1,"frontend_id":244},{"id":1743842333,"question_id":119,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0hours","timestamp":1755831070,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1743842333/","is_pending":"Not Pending","title":"Pascal\'s Triangle II","memory":"17.9 MB","code":"class Solution:\\n    def getRow(self, rowIndex: int) -> List[int]:\\n        row = [1]\\n        for _ in range(rowIndex):\\n            for i in range(len(row) - 1, 0, -1):\\n                row[i] = row[i] + row[i-1]\\n            row.append(1)\\n        return row","compare_result":"1111111111111111111111111111111111","title_slug":"pascals-triangle-ii","has_notes":false,"flag_type":1,"frontend_id":243},{"id":1743839513,"question_id":119,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0hours, 5\xc2\xa0minutes","timestamp":1755830760,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1743839513/","is_pending":"Not Pending","title":"Pascal\'s Triangle II","memory":"17.6 MB","code":"class Solution:\\n    def getRow(self, rowIndex: int) -> List[int]:\\n        row = [1]\\n        for _ in range(rowIndex):\\n            for i in range(1, len(row)):\\n                row[i-1] = row[i] + row[i-1]\\n            row = [1] + row\\n        return row","compare_result":"1111111111111111111111111111111111","title_slug":"pascals-triangle-ii","has_notes":false,"flag_type":1,"frontend_id":242},{"id":1743832383,"question_id":119,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0hours, 19\xc2\xa0minutes","timestamp":1755829939,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1743832383/","is_pending":"Not Pending","title":"Pascal\'s Triangle II","memory":"17.9 MB","code":"class Solution:\\n    def getRow(self, rowIndex: int) -> List[int]:\\n        if rowIndex == 0:\\n            return [1]\\n        row = [0] + self.getRow(rowIndex-1) + [0]\\n        newrow = []\\n        for i in range(len(row)-1):\\n            newrow.append(row[i]+row[i+1])\\n        return newrow","compare_result":"1111111111111111111111111111111111","title_slug":"pascals-triangle-ii","has_notes":false,"flag_type":1,"frontend_id":241},{"id":1741084447,"question_id":826,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 14\xc2\xa0hours","timestamp":1755620859,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1741084447/","is_pending":"Not Pending","title":"Soup Servings","memory":"22.1 MB","code":"class Solution:\\n    def soupServings(self, n: int) -> float:\\n        if n > 4800:\\n            return 1.00000\\n        memo = {}\\n        def count_paths(a, b, n):\\n            if (a, b) in memo:\\n                return memo[(a, b)]\\n\\n            factor = 0.25**n\\n\\n            # tuple is (a_first, both_same_time, total)\\n            if a <= 0 and b <= 0:\\n                return (0, factor, factor)\\n            if a <= 0:\\n                return (factor, 0, factor)\\n            if b <= 0:\\n                return (0, 0, factor)\\n\\n            res_a = 0\\n            res_both = 0\\n            res_total = 0\\n            for da, db in [(100, 0), (75, 25), (50, 50), (25, 75)]:\\n                temp_a, temp_both, temp_total = count_paths(a - da, b - db, n + 1)\\n                res_a += temp_a\\n                res_both += temp_both\\n                res_total += temp_total\\n\\n            memo[(a, b)] = (res_a, res_both, res_total)\\n            return memo[(a, b)]\\n\\n        a_first, both, total = count_paths(n, n, 0)\\n        return (a_first + 0.5 * both) / total","compare_result":"1111111111111111111111111111111111111111111","title_slug":"soup-servings","has_notes":false,"flag_type":1,"frontend_id":240},{"id":1741067261,"question_id":826,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 14\xc2\xa0hours","timestamp":1755620088,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1741067261/","is_pending":"Not Pending","title":"Soup Servings","memory":"N/A","code":"class Solution:\\n    def soupServings(self, n: int) -> float:\\n        memo = {}\\n        def count_paths(a, b, n):\\n            if (a, b) in memo:\\n                return memo[(a, b)]\\n\\n            factor = 0.25**n\\n            # tuple is (a_first, both_same_time, total)\\n            if a <= 0 and b <= 0:\\n                return (0, factor, factor)\\n            if a <= 0:\\n                return (factor, 0, factor)\\n            if b <= 0:\\n                return (0, 0, factor)\\n\\n            res_a = 0\\n            res_both = 0\\n            res_total = 0\\n            for da, db in [(100, 0), (75, 25), (50, 50), (25, 75)]:\\n                temp_a, temp_both, temp_total = count_paths(a - da, b - db, n + 1)\\n                res_a += temp_a\\n                res_both += temp_both\\n                res_total += temp_total\\n\\n            memo[(a, b)] = (res_a, res_both, res_total)\\n            return memo[(a, b)]\\n\\n        a_first, both, total = count_paths(n, n, 0)\\n        return (a_first + 0.5 * both) / total","compare_result":"1111111111111111111100000000000000000000000","title_slug":"soup-servings","has_notes":false,"flag_type":1,"frontend_id":239},{"id":1740906373,"question_id":826,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0days, 16\xc2\xa0hours","timestamp":1755611986,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1740906373/","is_pending":"Not Pending","title":"Soup Servings","memory":"N/A","code":"class Solution:\\n    def soupServings(self, n: int) -> float:\\n        memo = {}\\n        def count_paths(a, b):\\n            if (a, b) in memo:\\n                return memo[(a, b)]\\n\\n            # tuple is (a_first, both_same_time, total)\\n            if a <= 0 and b <= 0:\\n                return (0, 1, 1)\\n            if a <= 0:\\n                return (1, 0, 1)\\n            if b <= 0:\\n                return (0, 0, 1)\\n\\n            res_a = 0\\n            res_both = 0\\n            res_total = 0\\n            for da, db in [(100, 0), (75, 25), (50, 50), (25, 75)]:\\n                temp_a, temp_both, temp_total = count_paths(a - da, b - db)\\n                res_a += temp_a\\n                res_both += temp_both\\n                res_total += temp_total\\n\\n            memo[(a, b)] = (res_a, res_both, res_total)\\n            return memo[(a, b)]\\n\\n        a_first, both, total = count_paths(n, n)\\n        return (a_first + 0.5 * both) / total","compare_result":"1011000110000000000000000000000000000000000","title_slug":"soup-servings","has_notes":false,"flag_type":1,"frontend_id":238},{"id":1740192866,"question_id":101,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0days, 7\xc2\xa0hours","timestamp":1755558743,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1740192866/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"18.5 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool symmetricEquality(TreeNode* left, TreeNode* right){\\n        if ((left && !right) || (!left && right)) return false;\\n        if (!left && !right) return true;\\n        if (left->val != right->val) return false;\\n        return symmetricEquality(left->left, right->right) && symmetricEquality(left->right,right->left);\\n    }\\n    bool isSymmetric(TreeNode* root) {\\n        if (!root) return true;\\n        return symmetricEquality(root->left, root->right);\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1,"frontend_id":237},{"id":1740186834,"question_id":94,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0days, 7\xc2\xa0hours","timestamp":1755557794,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1740186834/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"10.9 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void subinorderTraversal(TreeNode* root, vector<int> & ans){\\n        if (!root) return;\\n        subinorderTraversal(root->left,ans);\\n        ans.push_back(root->val);\\n        subinorderTraversal(root->right,ans);\\n    }\\n    vector<int> inorderTraversal(TreeNode* root) {\\n        vector<int> ans;\\n        subinorderTraversal(root,ans);\\n        return ans;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1,"frontend_id":236},{"id":1738421107,"question_id":100,"lang":"cpp","lang_name":"C++","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755428520,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1738421107/","is_pending":"Not Pending","title":"Same Tree","memory":"12.9 MB","code":"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool isSameTree(TreeNode* p, TreeNode* q) {\\n        if (p == NULL && q == NULL) return true;\\n        if (p == NULL && q != NULL) return false;\\n        if (p != NULL && q == NULL) return false;\\n        if (p->val != q->val) return false;\\n        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"same-tree","has_notes":false,"flag_type":1,"frontend_id":235},{"id":1736771768,"question_id":594,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755315849,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1736771768/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"19.2 MB","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = Counter(nums)\\n        ans = 0\\n        for i in count:\\n            if i+1 in count:\\n                ans = max(ans, count[i] + count[i+1])\\n        return ans\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":234},{"id":1736769809,"question_id":594,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755315642,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1736769809/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"19.2 MB","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        max = 0\\n        for i in count:\\n            if i+1 in count and count[i] + count[i+1] > max:\\n                max = count[i] + count[i+1]\\n        return max\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":233},{"id":1736767643,"question_id":594,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755315396,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1736767643/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"N/A","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        max = 0\\n        for i in count:\\n            for j in count:\\n                if i <= j:\\n                    continue\\n                if i-j == 1 and count[i] + count[j] > max:\\n                    max = count[i] + count[j]\\n        return max\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":232},{"id":1736767007,"question_id":594,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755315320,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1736767007/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"N/A","code":"class Solution:\\n    def findLHS(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        max = 0\\n        for i in count:\\n            for j in count:\\n                if i-j == 1 and count[i] + count[j] > max:\\n                    max = count[i] + count[j]\\n        return max\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1,"frontend_id":231},{"id":1736763584,"question_id":1448,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755314917,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1736763584/","is_pending":"Not Pending","title":"Maximum 69 Number","memory":"17.6 MB","code":"class Solution:\\n    def maximum69Number (self, num: int) -> int:\\n        x = str(num)\\n        ans = x\\n        for i in range(len(x)):\\n            if x[i] == \\"6\\":\\n                ans = x[:i] + \\"9\\" + x[i+1:]\\n                break\\n        return int(ans)\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-69-number","has_notes":false,"flag_type":1,"frontend_id":230}],"has_next":true,"last_key":""}'
2025-08-22 12:21:21,181 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:21,183 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-08-22 11.46.48 - Accepted - runtime 2569ms - memory 48MB.py
2025-08-22 12:21:21,184 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-08-22 11.43.53 - Accepted - runtime 2949ms - memory 47.8MB.py
2025-08-22 12:21:21,623 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:21,625 [INFO] __main__.py:245 - Writing maximum-depth-of-binary-tree/2025-08-22 11.39.08 - Accepted - runtime 0ms - memory 18.9MB.cpp
2025-08-22 12:21:21,626 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-08-22 11.33.12 - Accepted - runtime 2921ms - memory 47.8MB.py
2025-08-22 12:21:21,626 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-08-22 11.27.07 - Accepted - runtime 2721ms - memory 47.7MB.py
2025-08-22 12:21:21,627 [INFO] __main__.py:245 - Writing find-the-minimum-area-to-cover-all-ones-i/2025-08-22 11.01.10 - Runtime Error - runtime NA - memory NA.py
2025-08-22 12:21:22,134 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:22,136 [INFO] __main__.py:245 - Writing pascals-triangle-ii/2025-08-22 08.21.10 - Accepted - runtime 0ms - memory 17.9MB.py
2025-08-22 12:21:22,136 [INFO] __main__.py:245 - Writing pascals-triangle-ii/2025-08-22 08.16.00 - Accepted - runtime 0ms - memory 17.6MB.py
2025-08-22 12:21:22,137 [INFO] __main__.py:245 - Writing pascals-triangle-ii/2025-08-22 08.02.19 - Accepted - runtime 0ms - memory 17.9MB.py
2025-08-22 12:21:22,636 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:22,638 [INFO] __main__.py:245 - Writing soup-servings/2025-08-19 21.57.39 - Accepted - runtime 19ms - memory 22.1MB.py
2025-08-22 12:21:22,639 [INFO] __main__.py:245 - Writing soup-servings/2025-08-19 21.44.48 - Runtime Error - runtime NA - memory NA.py
2025-08-22 12:21:22,639 [INFO] __main__.py:245 - Writing soup-servings/2025-08-19 19.29.46 - Wrong Answer - runtime NA - memory NA.py
2025-08-22 12:21:23,336 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:23,364 [INFO] __main__.py:250 - symmetric-tree/2025-08-19 04.42.23 - Accepted - runtime 0ms - memory 18.5MB.cpp already exists, skipping it
2025-08-22 12:21:25,415 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:25,418 [INFO] __main__.py:250 - binary-tree-inorder-traversal/2025-08-19 04.26.34 - Accepted - runtime 0ms - memory 10.9MB.cpp already exists, skipping it
2025-08-22 12:21:25,995 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:25,996 [INFO] __main__.py:250 - same-tree/2025-08-17 16.32.00 - Accepted - runtime 0ms - memory 12.9MB.cpp already exists, skipping it
2025-08-22 12:21:26,635 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:26,636 [INFO] __main__.py:250 - longest-harmonious-subsequence/2025-08-16 09.14.09 - Accepted - runtime 16ms - memory 19.2MB.py already exists, skipping it
2025-08-22 12:21:26,637 [INFO] __main__.py:250 - longest-harmonious-subsequence/2025-08-16 09.10.42 - Accepted - runtime 31ms - memory 19.2MB.py already exists, skipping it
2025-08-22 12:21:26,637 [INFO] __main__.py:250 - longest-harmonious-subsequence/2025-08-16 09.06.36 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:26,638 [INFO] __main__.py:250 - longest-harmonious-subsequence/2025-08-16 09.05.20 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:27,046 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:27,048 [INFO] __main__.py:250 - maximum-69-number/2025-08-16 08.58.37 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:21:32,049 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-08-22 12:21:32,753 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-08-22 12:21:32,754 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1736762950,"question_id":1448,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1755314846,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1736762950/","is_pending":"Not Pending","title":"Maximum 69 Number","memory":"17.9 MB","code":"class Solution:\\n    def maximum69Number (self, num: int) -> int:\\n        x = list(str(num))\\n        ans = x\\n        for i in range(len(x)):\\n            if x[i] == \\"6\\":\\n                x[i] = \\"9\\"\\n                break\\n        return int(\\"\\".join(ans))\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-69-number","has_notes":false,"flag_type":1,"frontend_id":229},{"id":1736077347,"question_id":46,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755260260,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1736077347/","is_pending":"Not Pending","title":"Permutations","memory":"17.9 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":228},{"id":1736077176,"question_id":46,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755260249,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1736077176/","is_pending":"Not Pending","title":"Permutations","memory":"18.2 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":227},{"id":1736077020,"question_id":46,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755260239,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1736077020/","is_pending":"Not Pending","title":"Permutations","memory":"18.2 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":226},{"id":1736076926,"question_id":46,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755260234,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1736076926/","is_pending":"Not Pending","title":"Permutations","memory":"18.1 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":225},{"id":1736076728,"question_id":46,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755260222,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1736076728/","is_pending":"Not Pending","title":"Permutations","memory":"17.9 MB","code":"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        perms = []\\n        def generator(arr: List[int], unusedindices: List[int]):\\n            if not unusedindices:\\n                perms.append(arr[:])\\n            else:\\n                for i in unusedindices:\\n                    new_unused = [j for j in unusedindices if j != i]\\n                    generator(arr + [nums[i]], new_unused)\\n        generator([], [i for i in range(len(nums))])\\n        return perms","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1,"frontend_id":224},{"id":1736063852,"question_id":45,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755259416,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1736063852/","is_pending":"Not Pending","title":"Jump Game II","memory":"18.6 MB","code":"class Solution:\\n    def jump(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        if n <= 1:\\n            return 0\\n        \\n        jumps = 0\\n        current_end = 0\\n        farthest = 0\\n        \\n        for i in range(n - 1):\\n            farthest = max(farthest, i + nums[i])\\n            if i == current_end:\\n                jumps += 1\\n                current_end = farthest\\n                if current_end >= n - 1:\\n                    break\\n        return jumps","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":223},{"id":1736059074,"question_id":45,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755259102,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1736059074/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"class Solution:\\n    def jump(self, nums: List[int]) -> int:\\n        def recursive(nums: List[int], curindex: int):\\n            if curindex >= len(nums) - 1:\\n                return 0\\n            elif nums[curindex] == 0:\\n                return 9999999999\\n            else:\\n                return 1 + min([recursive(nums, curindex + i) for i in range(1, nums[curindex] + 1)])\\n\\n        return recursive(nums, 0)\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":222},{"id":1736058615,"question_id":45,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1755259070,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1736058615/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"class Solution:\\n    def jump(self, nums: List[int]) -> int:\\n        def recursive(nums: List[int], curindex: int):\\n            if curindex == len(nums) - 1:\\n                return 0\\n            elif nums[curindex] == 0:\\n                return 9999999999\\n            else:\\n                return 1 + min([recursive(nums, curindex + i) for i in range(1, nums[curindex] + 1)])\\n\\n        return recursive(nums, 0)\\n        ","compare_result":"11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"jump-game-ii","has_notes":false,"flag_type":1,"frontend_id":221},{"id":1736049426,"question_id":2998,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0days, 19\xc2\xa0hours","timestamp":1755258489,"status":10,"status_display":"Accepted","runtime":"439 ms","url":"/submissions/detail/1736049426/","is_pending":"Not Pending","title":"  Count Symmetric Integers","memory":"17.8 MB","code":"class Solution:\\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\\n        def isSymmetric(i: int) -> int:\\n            x = i\\n            n = 0\\n            while x > 0:\\n                n += 1\\n                x //= 10\\n            if n % 2 == 1:\\n                return False\\n            sum1 = 0\\n            threshold = n / 2\\n            while n > threshold:\\n                sum1 += i % 10\\n                i //= 10\\n                n -= 1\\n            sum2 = 0\\n            while n > 0:\\n                sum2 += i % 10\\n                i //= 10\\n                n-=1\\n            return sum1 == sum2\\n\\n        count = 0\\n        for i in range(low, high + 1):\\n            if isSymmetric(i):\\n                count += 1\\n        return count ","compare_resulttitle_slug":"count-symmetric-integers","has_notes":false,"flag_type":1,"frontend_id":220},{"id":1735628846,"question_id":342,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1755233037,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1735628846/","is_pending":"Not Pending","title":"Power of Four","memory":"17.6 MB","code":"class Solution:\\n    def isPowerOfFour(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while n & 11 == 0:\\n            n = n >> 2\\n        return n == 1\\n        ","compare_resulttitle_slug":"power-of-four","has_notes":false,"flag_type":1,"frontend_id":219},{"id":1734837986,"question_id":278,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1755168866,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1734837986/","is_pending":"Not Pending","title":"First Bad Version","memory":"17.7 MB","code":"# The isBadVersion API is already defined for you.\\n# def isBadVersion(version: int) -> bool:\\n\\nclass Solution:\\n    def firstBadVersion(self, n: int) -> int:\\n        start = 1\\n        end = n\\n        mid = (start + end) // 2\\n        while start < end:\\n            if isBadVersion(mid):\\n                end = mid\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2 \\n        return mid\\n        ","compare_result":"111111111111111111111111","title_slug":"first-bad-version","has_notes":false,"flag_type":1,"frontend_id":218},{"id":1734835928,"question_id":278,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1755168716,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1734835928/","is_pending":"Not Pending","title":"First Bad Version","memory":"17.8 MB","code":"# The isBadVersion API is already defined for you.\\n# def isBadVersion(version: int) -> bool:\\n\\nclass Solution:\\n    def firstBadVersion(self, n: int) -> int:\\n        start = 1\\n        end = n\\n        mid = (start + end) // 2\\n        while start < end:\\n            if isBadVersion(mid):\\n                end = mid\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2 \\n        return mid\\n        ","compare_result":"111111111111111111111111","title_slug":"first-bad-version","has_notes":false,"flag_type":1,"frontend_id":217},{"id":1734789135,"question_id":34,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1755165441,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1734789135/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"19.1 MB","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        def findFirst(nums, target):\\n            start, end = 0, len(nums) - 1\\n            first = -1\\n            while start <= end:\\n                mid = (start + end) // 2\\n                if nums[mid] >= target:\\n                    if nums[mid] == target:\\n                        first = mid\\n                    end = mid - 1\\n                else:\\n                    start = mid + 1\\n            return first\\n\\n        def findLast(nums, target):\\n            start, end = 0, len(nums) - 1\\n            last = -1\\n            while start <= end:\\n                mid = (start + end) // 2\\n                if nums[mid] <= target:\\n                    if nums[mid] == target:\\n                        last = mid\\n                    start = mid + 1\\n                else:\\n                    end = mid - 1\\n            return last\\n\\n        return [findFirst(nums, target), findLast(nums, target)]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":216},{"id":1734746825,"question_id":34,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1755162669,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1734746825/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        if nums == [] :\\n            return [-1, -1]\\n        start = 0\\n        end = len(nums) - 1\\n        if start == end:\\n            if nums[start] == target:\\n                return [start, end]\\n            else:\\n                return [-1,-1]\\n        while start < end:\\n            midstart = (start + end) // 2\\n            if nums[midstart] == target:\\n                if nums[midstart - 1] != target or midstart == 0:\\n                    break\\n                else:\\n                    end = midstart\\n            elif nums[midstart] < target:\\n                start = midstart + 1\\n            else:\\n                end = midstart\\n        if nums[midstart] != target:\\n            return [-1,-1]\\n        start = 0\\n        end = len(nums) - 1\\n        while start < end:\\n            midend = (start + end) // 2\\n            if nums[midend] == target:\\n                if midend == len(nums) - 1 or nums[midend + 1] != target:\\n                    break\\n                else:\\n                    start = midend + 1\\n            elif nums[midend] < target:\\n                start = midend + 1\\n            else:\\n                end = midend\\n        return [midstart, midend]","compare_result":"1111111010111010100111111010111111011111110110111100111110111111111110111111101110001011","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":215},{"id":1734745378,"question_id":34,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week","timestamp":1755162572,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1734745378/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"N/A","code":"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        if nums == [] :\\n            return [-1, -1]\\n        start = 0\\n        end = len(nums) - 1\\n        while start < end:\\n            midstart = (start + end) // 2\\n            if nums[midstart] == target:\\n                if nums[midstart - 1] != target or midstart == 0:\\n                    break\\n                else:\\n                    end = midstart\\n            elif nums[midstart] < target:\\n                start = midstart + 1\\n            else:\\n                end = midstart\\n        if nums[midstart] != target:\\n            return [-1,-1]\\n        start = 0\\n        end = len(nums) - 1\\n        while start < end:\\n            midend = (start + end) // 2\\n            if nums[midend] == target:\\n                if midend == len(nums) - 1 or nums[midend + 1] != target:\\n                    break\\n                else:\\n                    start = midend + 1\\n            elif nums[midend] < target:\\n                start = midend + 1\\n            else:\\n                end = midend\\n        return [midstart, midend]","compare_result":"1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":214},{"id":1734471904,"question_id":49,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755145169,"status":10,"status_display":"Accepted","runtime":"2963 ms","url":"/submissions/detail/1734471904/","is_pending":"Not Pending","title":"Group Anagrams","memory":"22 MB","code":"class Solution:\\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\\n        counters = []\\n        for i in range(len(strs)):\\n            counters.append({})\\n            for char in strs[i]:\\n                if char in counters[i]:\\n                    counters[i][char] += 1\\n                else:\\n                    counters[i][char] = 1\\n        ans = []\\n        while strs != []:\\n            currhash = counters[0]\\n            indices = []\\n            group = []\\n            index = 0\\n            while index < len(strs):\\n                if counters[index] == currhash:\\n                    indices.append(index)\\n                index += 1\\n            for i in sorted(indices, reverse=True):\\n                group.append(strs.pop(i))\\n                counters.pop(i)\\n            ans.append(group.copy())\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1,"frontend_id":213},{"id":1734442533,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755142963,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1734442533/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.9 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        i = 0\\n        while i < len(num)-2:\\n            if num[i] == num[i+1] == num[i+2]:\\n                if curr == \\"\\" or curr[0] < num[i]:\\n                    curr = num[i:i+3]\\n                i += 3\\n            elif num[i+1] == num[i+2]:\\n                i += 1\\n            else:\\n                i += 2\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":212},{"id":1734441855,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755142913,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1734441855/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.9 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        i = 0\\n        while i < len(num)-2:\\n            if num[i] == num[i+1] == num[i+2]:\\n                if curr == \\"\\" or curr[0] < num[i]:\\n                    curr = num[i:i+3]\\n                i += 3\\n            elif num[i+1] == num[i+2]:\\n                i += 1\\n            else:\\n                i += 2\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":211},{"id":1734440075,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755142764,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1734440075/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.7 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        for i in range(len(num)-2):\\n            if num[i] == num[i+1] == num[i+2]:\\n                if curr == \\"\\" or curr[0] < num[i]:\\n                    curr = num[i:i+3]\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":210}],"has_next":true,"last_key":""}'
2025-08-22 12:21:32,756 [INFO] __main__.py:250 - maximum-69-number/2025-08-16 08.57.26 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:33,366 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:33,368 [INFO] __main__.py:250 - permutations/2025-08-15 17.47.40 - Accepted - runtime 4ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:33,368 [INFO] __main__.py:250 - permutations/2025-08-15 17.47.29 - Accepted - runtime 3ms - memory 18.2MB.py already exists, skipping it
2025-08-22 12:21:33,369 [INFO] __main__.py:250 - permutations/2025-08-15 17.47.19 - Accepted - runtime 3ms - memory 18.2MB.py already exists, skipping it
2025-08-22 12:21:33,370 [INFO] __main__.py:250 - permutations/2025-08-15 17.47.14 - Accepted - runtime 3ms - memory 18.1MB.py already exists, skipping it
2025-08-22 12:21:33,371 [INFO] __main__.py:250 - permutations/2025-08-15 17.47.02 - Accepted - runtime 1ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:33,773 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:33,776 [INFO] __main__.py:250 - jump-game-ii/2025-08-15 17.33.36 - Accepted - runtime 8ms - memory 18.6MB.py already exists, skipping it
2025-08-22 12:21:33,777 [INFO] __main__.py:250 - jump-game-ii/2025-08-15 17.28.22 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:33,778 [INFO] __main__.py:250 - jump-game-ii/2025-08-15 17.27.50 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:34,282 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:34,284 [INFO] __main__.py:250 - count-symmetric-integers/2025-08-15 17.18.09 - Accepted - runtime 439ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:34,800 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:34,802 [INFO] __main__.py:250 - power-of-four/2025-08-15 10.13.57 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:21:35,309 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:35,311 [INFO] __main__.py:250 - first-bad-version/2025-08-14 16.24.26 - Accepted - runtime 36ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:21:35,311 [INFO] __main__.py:250 - first-bad-version/2025-08-14 16.21.56 - Accepted - runtime 40ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:35,927 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:35,928 [INFO] __main__.py:250 - find-first-and-last-position-of-element-in-sorted-array/2025-08-14 15.27.21 - Accepted - runtime 0ms - memory 19.1MB.py already exists, skipping it
2025-08-22 12:21:35,929 [INFO] __main__.py:250 - find-first-and-last-position-of-element-in-sorted-array/2025-08-14 14.41.09 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:35,929 [INFO] __main__.py:250 - find-first-and-last-position-of-element-in-sorted-array/2025-08-14 14.39.32 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:36,488 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:36,491 [INFO] __main__.py:250 - group-anagrams/2025-08-14 09.49.29 - Accepted - runtime 2963ms - memory 22MB.py already exists, skipping it
2025-08-22 12:21:37,040 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:37,042 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.12.43 - Accepted - runtime 3ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:37,042 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.11.53 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:37,043 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.09.24 - Accepted - runtime 3ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:21:42,043 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-08-22 12:21:42,580 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-08-22 12:21:42,630 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1734437862,"question_id":2346,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755142576,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1734437862/","is_pending":"Not Pending","title":"Largest 3-Same-Digit Number in String","memory":"17.8 MB","code":"class Solution:\\n    def largestGoodInteger(self, num: str) -> str:\\n        curr = \\"\\"\\n        valids = [\\"999\\",\\"888\\",\\"777\\",\\"666\\",\\"555\\",\\"444\\",\\"333\\",\\"222\\",\\"111\\",\\"000\\"]\\n        for i in range(len(num)-2):\\n            for j in valids:\\n                if j == curr:\\n                    break\\n                if num[i:i+3] == j:\\n                    curr = j\\n        return curr\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-3-same-digit-number-in-string","has_notes":false,"flag_type":1,"frontend_id":209},{"id":1733871170,"question_id":50,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755097450,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1733871170/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n == 0:\\n            return 1\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = x\\n        currentpower = 1\\n        while (currentpower < n//2):\\n            prod *= prod\\n            currentpower *=2\\n        while currentpower < n:\\n            prod *= x\\n            currentpower += 1\\n        return prod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":208},{"id":1733669600,"question_id":168,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755086153,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1733669600/","is_pending":"Not Pending","title":"Excel Sheet Column Title","memory":"17.8 MB","code":"class Solution:\\n    def convertToTitle(self, columnNumber: int) -> str:\\n        alphas = [columnNumber - 1]\\n        while alphas[0] > 25:\\n            alphas = [alphas[0] // 26 - 1] + alphas\\n            alphas[1] = alphas[1]%26\\n        print(alphas)\\n        ans = \\"\\"\\n        for i in alphas:\\n            ans += chr(i + 65)\\n        return ans\\n        ","compare_result":"1111111111111111111111","title_slug":"excel-sheet-column-title","has_notes":false,"flag_type":1,"frontend_id":207},{"id":1733659995,"question_id":168,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755085470,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1733659995/","is_pending":"Not Pending","title":"Excel Sheet Column Title","memory":"N/A","code":"class Solution:\\n    def convertToTitle(self, columnNumber: int) -> str:\\n        alphas = [columnNumber]\\n        while alphas[0] > 26:\\n            alphas = [alphas[0]//26] + alphas\\n            alphas[1] = alphas[1] % 26\\n        ans = \\"\\"\\n        for i in alphas:\\n            ans += chr(i+64)\\n        return ans","compare_result":"1111111110110111101000","title_slug":"excel-sheet-column-title","has_notes":false,"flag_type":1,"frontend_id":206},{"id":1733408709,"question_id":342,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755069381,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1733408709/","is_pending":"Not Pending","title":"Power of Four","memory":"17.9 MB","code":"class Solution:\\n    def isPowerOfFour(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while n & 11 == 0:\\n            n = n >> 2\\n        return n == 1\\n        ","compare_resulttitle_slug":"power-of-four","has_notes":false,"flag_type":1,"frontend_id":205},{"id":1733384888,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1755068023,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1733384888/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.6 MB","code":"class Solution:    \\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        rows = [{},{},{},{},{},{},{},{},{}]\\n        cols = [{},{},{},{},{},{},{},{},{}]\\n        grid = [{},{},{},{},{},{},{},{},{}]\\n        \\n        for r in range(9):\\n            for c in range(9):\\n                if board[r][c] == \\".\\":\\n                    continue\\n                elif board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in grid[(c//3)*3 + r//3]:\\n                    return False\\n                rows[r][board[r][c]] = 1\\n                cols[c][board[r][c]] = 1\\n                grid[((c//3)*3 + r//3)][board[r][c]] = 1\\n                    \\n        return True    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":204},{"id":1733377613,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755067643,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1733377613/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:    \\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        rows = [{},{},{},{},{},{},{},{},{}]\\n        cols = [{},{},{},{},{},{},{},{},{}]\\n        grid = [{},{},{},{},{},{},{},{},{}]\\n        \\n        for r in range(9):\\n            for c in range(9):\\n                if board[r][c] == \\".\\":\\n                    continue\\n                else:\\n                    if board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in grid[(c//3)*3 + r//3]:\\n                        return False\\n                    rows[r][board[r][c]] = 1\\n                    cols[c][board[r][c]] = 1\\n                    grid[((c//3)*3 + r//3)][board[r][c]] = 1\\n                    \\n        return True    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":203},{"id":1733367549,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755067103,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1733367549/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        res = set()\\n        for i in range(9):\\n            for j in range(9):\\n                element = board[i][j]\\n                fun = ((i,element),(element,j), (i//3, j//3, element))\\n                if element == \'.\':\\n                    continue\\n                else:\\n                    for k in fun:\\n                        if k in res:\\n                            print(\\"dup found\\", k)\\n                            return False\\n                        res.add(k)\\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":202},{"id":1733356654,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755066541,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1733356654/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.9 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        res = []\\n        for i in range(9):\\n            for j in range(9):\\n                element = board[i][j]\\n                if element != \'.\':\\n                    res += [(i, element), (element, j), (i // 3, j // 3, element)]\\n        return len(res) == len(set(res))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":201},{"id":1733353581,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755066381,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1733353581/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # Checking rows and columns\\n        for i in range(9):\\n            count_r = {}\\n            count_c = {}\\n            for j in range(9):\\n                if board[i][j] != \\".\\":\\n                    if board[i][j] in count_r:\\n                        return False\\n                    count_r[board[i][j]] = 1\\n\\n                if board[j][i] != \\".\\":\\n                    if board[j][i] in count_c:\\n                        return False\\n                    count_c[board[j][i]] = 1\\n\\n        # Checking 3x3 sub-boxes\\n        for i in (0, 3, 6):\\n            for j in (0, 3, 6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        val = board[i + del_i][j + del_j]\\n                        if val == \\".\\":\\n                            continue\\n                        if val in count:\\n                            return False\\n                        count[val] = 1\\n\\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":200},{"id":1733351894,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755066294,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1733351894/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"N/A","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # checking rows and columns\\n        for i in range(9):\\n            count_r = {}\\n            count_c = {}\\n            for j in range(9):\\n                if board[i][j] == \\".\\":\\n                    continue\\n                if board[i][j] not in count_r:\\n                    count_r[board[i][j]] = 1\\n                else:\\n                    return False\\n                if board[j][i] == \\".\\":\\n                    continue\\n                if board[j][i] not in count_c:\\n                    count_c[board[j][i]] = 1\\n                else:\\n                    print(board[j][j], j, i)\\n                    return False\\n\\n        # checking sub-boxes\\n        for i in (0,3,6):\\n            for j in (0,3,6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        if board[i + del_i][j + del_j] == \\".\\":\\n                            continue\\n                        if board[i + del_i][j + del_j] not in count:\\n                            count[board[i + del_i][j + del_j]] = 1\\n                        else:\\n                            return False\\n        \\n        return True","compare_result":"111110111111011111111111111111111111111111111111111011111111111111111111111111111111111101111111111011111011111011111111110111111111111101111111111111111111111101110011111111111110111101111111111111101111111111011011111111111111111110111111110100111111111111111111110001111101111111100111111110111111110111111110011011111101111111111111111111011110111111111111111110111111111111111111110110011111111111011111110110111111110101101111111111111111110111111111101110111111111111101111111111111011111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":199},{"id":1733342892,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755065839,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1733342892/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.8 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # checking rows and columns\\n        for i in range(9):\\n            count = {}\\n            for j in range(9):\\n                if board[i][j] == \\".\\":\\n                    continue\\n                if board[i][j] not in count:\\n                    count[board[i][j]] = 1\\n                else:\\n                    return False\\n\\n        for j in range(9):\\n            count = {}\\n            for i in range(9):\\n                if board[i][j] == \\".\\":\\n                    continue\\n                if board[i][j] not in count:\\n                    count[board[i][j]] = 1\\n                else:\\n                    return False\\n\\n        # checking sub-boxes\\n        for i in (0,3,6):\\n            for j in (0,3,6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        if board[i + del_i][j + del_j] == \\".\\":\\n                            continue\\n                        if board[i + del_i][j + del_j] not in count:\\n                            count[board[i + del_i][j + del_j]] = 1\\n                        else:\\n                            return False\\n        \\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":198},{"id":1733335610,"question_id":36,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755065476,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1733335610/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"17.6 MB","code":"class Solution:\\n    def isValidSudoku(self, board: List[List[str]]) -> bool:\\n        # checking rows and columns\\n        for i in range(9):\\n            for j in range(9):\\n                if board[i][j] != \\".\\":\\n                    for k in range(9):\\n                        if (board[k][j] == board[i][j] and i != k) or (board[i][k] == board[i][j] and j != k):\\n                            return False\\n\\n        # checking sub-boxes\\n        for i in (0,3,6):\\n            for j in (0,3,6):\\n                count = {}\\n                for del_i in range(3):\\n                    for del_j in range(3):\\n                        if board[i + del_i][j + del_j] == \\".\\":\\n                            continue\\n                        if board[i + del_i][j + del_j] not in count:\\n                            count[board[i + del_i][j + del_j]] = 1\\n                        else:\\n                            return False\\n        \\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku","has_notes":false,"flag_type":1,"frontend_id":197},{"id":1733275246,"question_id":326,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755062322,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1733275246/","is_pending":"Not Pending","title":"Power of Three","memory":"18 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        return 3486784401 % n == 0","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":196},{"id":1733267587,"question_id":326,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755061931,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1733267587/","is_pending":"Not Pending","title":"Power of Three","memory":"17.7 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while n % 3 == 0:\\n            n /= 3\\n        return n == 1","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":195},{"id":1733265092,"question_id":326,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755061796,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1733265092/","is_pending":"Not Pending","title":"Power of Three","memory":"17.9 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        i = 1\\n        while i < n:\\n            i *= 3\\n        return i == n","compare_resulttitle_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":194},{"id":1733256587,"question_id":326,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1755061338,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/1733256587/","is_pending":"Not Pending","title":"Power of Three","memory":"18 MB","code":"class Solution:\\n    def isPowerOfThree(self, n: int) -> bool:\\n        if n < 0:\\n            return False\\n        while n > 1:\\n            n /= 3\\n        return n == 1\\n        ","compare_result":"","title_slug":"power-of-three","has_notes":false,"flag_type":1,"frontend_id":193},{"id":1732368894,"question_id":191,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754998424,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1732368894/","is_pending":"Not Pending","title":"Number of 1 Bits","memory":"17.7 MB","code":"class Solution:\\n    def hammingWeight(self, n: int) -> int:\\n        count = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                count += 1\\n            n = n >> 1\\n        return count ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-1-bits","has_notes":false,"flag_type":1,"frontend_id":192},{"id":1732163601,"question_id":3973,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754984297,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1732163601/","is_pending":"Not Pending","title":"Flip Square Submatrix Vertically","memory":"18.2 MB","code":"class Solution:\\n    def reverseSubmatrix(self, grid: List[List[int]], x: int, y: int, k: int) -> List[List[int]]:\\n        for i in range(k//2):\\n            for j in range(k):  \\n                temp = grid[x+i][y + j]\\n                grid[x+i][y + j] = grid[x+k-i-1][y + j]\\n                grid[x+k-i-1][y + j] = temp\\n        return grid","compare_resulttitle_slug":"flip-square-submatrix-vertically","has_notes":false,"flag_type":1,"frontend_id":191},{"id":1732134990,"question_id":70,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754982340,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1732134990/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"17.8 MB","code":"class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        if n <= 3:\\n            return n\\n        \\n        jump1 = 3\\n        jump2 = 2\\n        ans = 0\\n\\n        for _ in range(n-3):\\n            ans = jump1 + jump2\\n            jump2 = jump1\\n            jump1 = ans\\n\\n        return ans","compare_result":"111111111111111111111111111111111111111111111","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":190}],"has_next":true,"last_key":""}'
2025-08-22 12:21:42,634 [INFO] __main__.py:250 - largest-3-same-digit-number-in-string/2025-08-14 09.06.16 - Accepted - runtime 9ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:43,291 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:43,293 [INFO] __main__.py:250 - powx-n/2025-08-13 20.34.10 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:44,021 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:44,022 [INFO] __main__.py:250 - excel-sheet-column-title/2025-08-13 17.25.53 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:44,023 [INFO] __main__.py:250 - excel-sheet-column-title/2025-08-13 17.14.30 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:44,023 [INFO] __main__.py:250 - power-of-four/2025-08-13 12.46.21 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:44,938 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:44,939 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 12.23.43 - Accepted - runtime 3ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:21:44,940 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 12.17.23 - Accepted - runtime 1ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:44,940 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 12.08.23 - Accepted - runtime 7ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:44,941 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.59.01 - Accepted - runtime 3ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:44,941 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.56.21 - Accepted - runtime 6ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:44,942 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.54.54 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:44,942 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.47.19 - Accepted - runtime 5ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:44,942 [INFO] __main__.py:250 - valid-sudoku/2025-08-13 11.41.16 - Accepted - runtime 6ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:21:45,951 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:45,953 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.48.42 - Accepted - runtime 4ms - memory 18MB.py already exists, skipping it
2025-08-22 12:21:45,953 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.42.11 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:21:45,954 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.39.56 - Accepted - runtime 7ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:45,954 [INFO] __main__.py:250 - power-of-three/2025-08-13 10.32.18 - Accepted - runtime 35ms - memory 18MB.py already exists, skipping it
2025-08-22 12:21:46,986 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:46,988 [INFO] __main__.py:250 - number-of-1-bits/2025-08-12 17.03.44 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:21:48,254 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:48,257 [INFO] __main__.py:250 - flip-square-submatrix-vertically/2025-08-12 13.08.17 - Accepted - runtime 4ms - memory 18.2MB.py already exists, skipping it
2025-08-22 12:21:48,697 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:48,699 [INFO] __main__.py:250 - climbing-stairs/2025-08-12 12.35.40 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:53,699 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-08-22 12:21:54,596 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-08-22 12:21:54,597 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1732127969,"question_id":70,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1754981910,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1732127969/","is_pending":"Not Pending","title":"Climbing Stairs","memory":"N/A","code":"class Solution:\\n    def climbStairs(self, n: int) -> int:\\n        count = 0\\n        def backtrack(sum: int, target: int):\\n            nonlocal count\\n            if sum == target:\\n                count += 1\\n                return \\n            if sum > target:\\n                return\\n            \\n            backtrack(sum + 1, target)\\n            backtrack(sum + 2, target)\\n\\n        backtrack(0, n)\\n        return count\\n        ","compare_result":"111111111111111100000000000000000000000000000","title_slug":"climbing-stairs","has_notes":false,"flag_type":1,"frontend_id":189},{"id":1731929090,"question_id":88,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754969183,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1731929090/","is_pending":"Not Pending","title":"Merge Sorted Array","memory":"17.8 MB","code":"class Solution:\\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\\n        i = m - 1  \\n        j = n - 1  \\n        k = m + n - 1  \\n\\n        while i >= 0 and j >= 0:\\n            if nums1[i] > nums2[j]:\\n                nums1[k] = nums1[i]\\n                i -= 1\\n            else:\\n                nums1[k] = nums2[j]\\n                j -= 1\\n            k -= 1\\n\\n        while j >= 0:\\n            nums1[k] = nums2[j]\\n            j -= 1\\n            k -= 1\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"merge-sorted-array","has_notes":false,"flag_type":1,"frontend_id":188},{"id":1731920522,"question_id":2882,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754968391,"status":10,"status_display":"Accepted","runtime":"293 ms","url":"/submissions/detail/1731920522/","is_pending":"Not Pending","title":"Ways to Express an Integer as Sum of Powers","memory":"17.9 MB","code":"\\nclass Solution:\\n    def numberOfWays(self, n: int, x: int) -> int:\\n        mod = 10**9 + 7\\n        powers = []\\n        i = 1\\n        p = i ** x\\n        while p <= n:\\n            powers.append(p)\\n            i += 1\\n            p = i ** x\\n\\n        dp = [0] * (n + 1)\\n        dp[0] = 1\\n        for p in powers:\\n            for s in range(n, p - 1, -1):\\n                dp[s] = (dp[s] + dp[s - p]) % mod\\n\\n        return dp[n]\\n","compare_resulttitle_slug":"ways-to-express-an-integer-as-sum-of-powers","has_notes":false,"flag_type":1,"frontend_id":187},{"id":1731915583,"question_id":2882,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754967908,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1731915583/","is_pending":"Not Pending","title":"Ways to Express an Integer as Sum of Powers","memory":"N/A","code":"class Solution:\\n    def numberOfWays(self, n: int, x: int) -> int:\\n        mod = 10**9 + 7\\n        count = 0\\n\\n        def backtrack(exploring : List[int], n: int, x:int):\\n            nonlocal count\\n            s = 0\\n            for i in exploring:\\n                s += i**x\\n            \\n            if s > n:\\n                return\\n            if s == n:\\n\\n                count += 1\\n                return\\n\\n            if exploring == []:\\n                addition = 1\\n            else:\\n                addition = exploring[-1] + 1\\n\\n            while addition**x <= n:\\n                backtrack(exploring + [addition], n, x)\\n                addition += 1\\n            \\n        backtrack([], n, x)\\n        return count \\n        \\n\\n        ","compare_resulttitle_slug":"ways-to-express-an-integer-as-sum-of-powers","has_notes":false,"flag_type":1,"frontend_id":186},{"id":1731013437,"question_id":40,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754902802,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1731013437/","is_pending":"Not Pending","title":"Combination Sum II","memory":"18 MB","code":"class Solution:\\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\\n        ans = []\\n        ds = []\\n        candidates.sort()\\n\\n\\n        def findCombination(ind, target):\\n            if target == 0:\\n                ans.append(ds[:])\\n                return\\n            for i in range(ind, len(candidates)):\\n                if i > ind and candidates[i] == candidates[i - 1]:\\n                    continue\\n                if candidates[i] > target:\\n                    break\\n                ds.append(candidates[i])\\n                findCombination(i + 1, target - candidates[i])\\n                ds.pop()\\n\\n\\n        findCombination(0, target)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":185},{"id":1731008679,"question_id":40,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754902482,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1731008679/","is_pending":"Not Pending","title":"Combination Sum II","memory":"17.8 MB","code":"class Solution:\\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\\n        def backtrack(start: int, path: List[int], remainingTarget: int):\\n            if remainingTarget == 0:\\n                ans.append(path[:])\\n                return\\n            if remainingTarget < 0:\\n                return\\n            \\n            for i in range(start, len(candidates)):\\n                if i > start and candidates[i] == candidates[i - 1]:\\n                    continue\\n                path.append(candidates[i])\\n                backtrack(i + 1, path, remainingTarget - candidates[i])\\n                path.pop()\\n        \\n        candidates.sort()\\n        ans = []\\n        backtrack(0, [], target)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":184},{"id":1731003919,"question_id":40,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754902153,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1731003919/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"class Solution:\\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\\n        def backtrack(nums: List[int], rest: List[int], remainingTarget: int):\\n            if nums in ans or remainingTarget < 0:\\n                return\\n            if remainingTarget == 0:\\n                ans.append(nums[:])\\n                return\\n            \\n            for i in range(len(rest)):\\n                backtrack(nums + [rest[i]], rest[i+1:], remainingTarget - rest[i])\\n\\n        ans = []\\n        candidates = sorted(candidates)\\n        backtrack([], candidates, target)\\n        return ans\\n\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1,"frontend_id":183},{"id":1730926131,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1754896173,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730926131/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        # powers.pop(0)\\n        ans = []\\n        # for left, right in queries:\\n        #     result = powers[right]\\n        #     if left != 0:\\n        #         result -= powers[left - 1]\\n        #     result = (1 << result) % mod\\n        #     ans.append(result)\\n        ans = [((1 << (powers[right + 1] - (powers[left] if left > 1 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1110110001101001011011100010100000010010000101011111101001011101100110","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":182},{"id":1730741063,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883629,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1730741063/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":181},{"id":1730740929,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883615,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1730740929/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        ans = [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":180},{"id":1730740643,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883586,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/1730740643/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans =  [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":179},{"id":1730740409,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883564,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1730740409/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        return [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":178},{"id":1730740284,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883551,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1730740284/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.3 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        return [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":177},{"id":1730739852,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883512,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1730739852/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        # for left, right in queries:\\n        #     result = powers[right]\\n        #     if left != 0:\\n        #         result -= powers[left - 1]\\n        #     result = (1 << result) % mod\\n        #     ans.append(result)\\n        ans = [((1 << (powers[right] - (powers[left - 1] if left > 0 else 0))) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":176},{"id":1730738362,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883368,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730738362/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        # for left, right in queries:\\n        #     result = powers[right]\\n        #     if left != 0:\\n        #         result -= powers[left - 1]\\n        #     result = (1 << result) % mod\\n        #     ans.append(result)\\n        ans = [(1 << (powers[right] - (powers[left - 1] if left > 0 else 0)) % mod) for left, right in queries]\\n        return ans","compare_result":"1111111111110101110111111110000000000000000000000000000000000000000000","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":175},{"id":1730735243,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754883058,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1730735243/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.6 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = [0]\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(powers[-1] + power)\\n            n = n >> 1\\n            power += 1\\n        powers.pop(0)\\n        ans = []\\n        for left, right in queries:\\n            result = powers[right]\\n            if left != 0:\\n                result -= powers[left - 1]\\n            result = (1 << result) % mod\\n            ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":174},{"id":1730726587,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754882155,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1730726587/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.7 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(power)\\n            n = n >> 1\\n            power += 1\\n        for i in range(1,len(powers)):\\n            powers[i] += powers[i-1]\\n        ans = []\\n        for left, right in queries:\\n            result = powers[right]\\n            if left != 0:\\n                result -= powers[left - 1]\\n            result = 1 << result\\n            if result > mod:\\n                result %= mod\\n            ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":173},{"id":1730725412,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754882029,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1730725412/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.8 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        mod = 10**9 + 7\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(1 << power)\\n            n = n >> 1\\n            power += 1\\n        for i in range(1,len(powers)):\\n            powers[i] *= powers[i-1]\\n        ans = []\\n        for left, right in queries:\\n            result = powers[right]\\n            if left != 0:\\n                result //= powers[left - 1]\\n            if result > mod:\\n                result %= mod\\n            ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":172},{"id":1730718731,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754881266,"status":10,"status_display":"Accepted","runtime":"175 ms","url":"/submissions/detail/1730718731/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"48.2 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            exp = 0\\n            for j in range(i[0],i[1]+1):\\n                exp += powers[j]\\n            result = 2**exp\\n            if result > 10**9 + 7:\\n                ans.append(result % (10**9 + 7))\\n            else:\\n                ans.append(result)\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":171},{"id":1730717420,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754881107,"status":10,"status_display":"Accepted","runtime":"188 ms","url":"/submissions/detail/1730717420/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.3 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            exp = 0\\n            for j in range(i[0],i[1]+1):\\n                exp += powers[j]\\n            ans.append(2**exp % (10**9 + 7))\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":170}],"has_next":true,"last_key":""}'
2025-08-22 12:21:54,598 [INFO] __main__.py:250 - climbing-stairs/2025-08-12 12.28.30 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:55,380 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:55,381 [INFO] __main__.py:250 - merge-sorted-array/2025-08-12 08.56.23 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:55,903 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:55,905 [INFO] __main__.py:250 - ways-to-express-an-integer-as-sum-of-powers/2025-08-12 08.43.11 - Accepted - runtime 293ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:21:55,906 [INFO] __main__.py:250 - ways-to-express-an-integer-as-sum-of-powers/2025-08-12 08.35.08 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:56,404 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:56,406 [INFO] __main__.py:250 - combination-sum-ii/2025-08-11 14.30.02 - Accepted - runtime 5ms - memory 18MB.py already exists, skipping it
2025-08-22 12:21:56,407 [INFO] __main__.py:250 - combination-sum-ii/2025-08-11 14.24.42 - Accepted - runtime 23ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:21:56,407 [INFO] __main__.py:250 - combination-sum-ii/2025-08-11 14.19.13 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:57,114 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:21:57,116 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 12.39.33 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:57,117 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.10.29 - Accepted - runtime 40ms - memory 48.2MB.py already exists, skipping it
2025-08-22 12:21:57,117 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.10.15 - Accepted - runtime 38ms - memory 48.2MB.py already exists, skipping it
2025-08-22 12:21:57,117 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.09.46 - Accepted - runtime 40ms - memory 48.2MB.py already exists, skipping it
2025-08-22 12:21:57,118 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.09.24 - Accepted - runtime 43ms - memory 48.2MB.py already exists, skipping it
2025-08-22 12:21:57,118 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.09.11 - Accepted - runtime 42ms - memory 48.3MB.py already exists, skipping it
2025-08-22 12:21:57,118 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.08.32 - Accepted - runtime 37ms - memory 48.2MB.py already exists, skipping it
2025-08-22 12:21:57,119 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.06.08 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:21:57,119 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 09.00.58 - Accepted - runtime 38ms - memory 47.6MB.py already exists, skipping it
2025-08-22 12:21:57,119 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.45.55 - Accepted - runtime 46ms - memory 47.7MB.py already exists, skipping it
2025-08-22 12:21:57,120 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.43.49 - Accepted - runtime 47ms - memory 47.8MB.py already exists, skipping it
2025-08-22 12:21:57,120 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.31.06 - Accepted - runtime 175ms - memory 48.2MB.py already exists, skipping it
2025-08-22 12:21:57,120 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.28.27 - Accepted - runtime 188ms - memory 47.3MB.py already exists, skipping it
2025-08-22 12:22:02,120 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-08-22 12:22:03,268 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-08-22 12:22:03,270 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1730715948,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754880931,"status":10,"status_display":"Accepted","runtime":"193 ms","url":"/submissions/detail/1730715948/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"47.4 MB","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(2**power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            prod = 1\\n            for j in range(i[0],i[1]+1):\\n                prod *= powers[j]\\n            ans.append(prod % (10**9 + 7))\\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":169},{"id":1730714466,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754880741,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730714466/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(2**power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            prod = 1\\n            for j in range(i[0],i[1]+1):\\n                prod *= powers[j]\\n            ans.append(prod)\\n        return ans","compare_result":"1111111111110101110111111110000000000000000000000000000000000000000000","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":168},{"id":1730713871,"question_id":2529,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754880668,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1730713871/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"N/A","code":"class Solution:\\n    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:\\n        powers = []\\n        power = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                powers.append(2**power)\\n            n = n >> 1\\n            power += 1\\n        ans = []\\n        for i in queries:\\n            prod = 1\\n            for j in range(i[0],i[1]+1):\\n                prod *= powers[j]\\n            ans.append(prod)\\n        return ans","compare_result":"1111111111110101110111111110000000000000000000000000000000000000000000","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1,"frontend_id":167},{"id":1730695212,"question_id":118,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754878321,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1730695212/","is_pending":"Not Pending","title":"Pascal\'s Triangle","memory":"17.7 MB","code":"class Solution:\\n    def generate(self, numRows: int) -> List[List[int]]:\\n        ans = []\\n        for _ in range(numRows):\\n            if ans == []:\\n                ans.append([1])\\n                continue\\n            nextrow = [1]\\n            for i in range(len(ans[-1])-1):\\n                nextrow.append(ans[-1][i] + ans[-1][i+1])\\n            nextrow.append(1)\\n            ans.append(nextrow[:])\\n        return ans","compare_result":"111111111111111111111111111111","title_slug":"pascals-triangle","has_notes":false,"flag_type":1,"frontend_id":166},{"id":1730090166,"question_id":900,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754828887,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1730090166/","is_pending":"Not Pending","title":"Reordered Power of 2","memory":"18 MB","code":"import copy\\nclass Solution:\\n    def reorderedPowerOf2(self, number: int) -> bool:\\n        legals = {}\\n        n = 1\\n        while n <= 10**9:\\n            subdict = {}\\n            num = str(n)\\n            subdict[\\"len\\"] = len(num)\\n            subdict[\\"count\\"] = {}\\n            for i in num:\\n                if i not in subdict[\\"count\\"]:\\n                    subdict[\\"count\\"][i] = 1\\n                else:\\n                    subdict[\\"count\\"][i] += 1\\n            legals[n] = copy.deepcopy(subdict)\\n            n *= 2\\n        \\n        n_str = str(number)\\n        count = {}\\n        for i in n_str:\\n            if i not in count:\\n                count[i] = 1\\n            else:\\n                count[i] += 1\\n        print(count)\\n        for i in legals:\\n            if len(n_str) != legals[i][\\"len\\"]:\\n                continue\\n            if count == legals[i][\\"count\\"]:\\n                print(legals[i][\\"count\\"])\\n                return True\\n\\n        return False","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reordered-power-of-2","has_notes":false,"flag_type":1,"frontend_id":165},{"id":1730064322,"question_id":39,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754827090,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1730064322/","is_pending":"Not Pending","title":"Combination Sum","memory":"17.8 MB","code":"class Solution:\\n    def combinationSum(self, candidates, target):\\n        result = []\\n\\n        def backtrack(start, combination, target_left):\\n            if target_left == 0:\\n                result.append(combination.copy())\\n                return\\n            if target_left < 0:\\n                return\\n\\n            for i in range(start, len(candidates)):\\n                combination.append(candidates[i])\\n                backtrack(i, combination, target_left - candidates[i])\\n                combination.pop()\\n\\n        backtrack(0, [], target)\\n        return result\\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1,"frontend_id":164},{"id":1730052801,"question_id":38,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754826299,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1730052801/","is_pending":"Not Pending","title":"Count and Say","memory":"17.9 MB","code":"class Solution:\\n    def countAndSay(self, n: int) -> str:\\n        def RLE(n: int) -> str:\\n            num = str(n)\\n            out = \\"\\"\\n            index = 0\\n            while index < len(num):\\n                currchar = num[index]\\n                count = 0\\n                while index < len(num) and currchar == num[index]:\\n                    count += 1\\n                    index += 1\\n                out += str(count) + str(currchar)\\n            return out \\n\\n        res = 1\\n        for _ in range(n-1):\\n            res = RLE(res)\\n        return str(res)","compare_result":"111111111111111111111111111111","title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":163},{"id":1730050441,"question_id":38,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754826134,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1730050441/","is_pending":"Not Pending","title":"Count and Say","memory":"17.9 MB","code":"class Solution:\\n    def countAndSay(self, n: int) -> str:\\n        def RLE(n: int) -> str:\\n            num = str(n)\\n            out = \\"\\"\\n            index = 0\\n            while index < len(num):\\n                currchar = num[index]\\n                count = 0\\n                while index < len(num) and currchar == num[index]:\\n                    count += 1\\n                    index += 1\\n                out += str(count) + str(currchar)\\n            return out \\n\\n        if n == 1:\\n            return \\"1\\"\\n        return RLE(self.countAndSay(n-1))","compare_result":"111111111111111111111111111111","title_slug":"count-and-say","has_notes":false,"flag_type":1,"frontend_id":162},{"id":1730031549,"question_id":191,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754824840,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1730031549/","is_pending":"Not Pending","title":"Number of 1 Bits","memory":"17.7 MB","code":"class Solution:\\n    def hammingWeight(self, n: int) -> int:\\n        if n <= 1:\\n            return n\\n        return (n & 1) + self.hammingWeight(n >> 1)","compare_resulttitle_slug":"number-of-1-bits","has_notes":false,"flag_type":1,"frontend_id":161},{"id":1730029064,"question_id":191,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754824673,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1730029064/","is_pending":"Not Pending","title":"Number of 1 Bits","memory":"18 MB","code":"class Solution:\\n    def hammingWeight(self, n: int) -> int:\\n        count = 0\\n        while n > 0:\\n            if n & 1 == 1:\\n                count += 1\\n            n = n >> 1\\n        return count ","compare_resulttitle_slug":"number-of-1-bits","has_notes":false,"flag_type":1,"frontend_id":160},{"id":1730027908,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754824595,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1730027908/","is_pending":"Not Pending","title":"Power of Two","memory":"17.7 MB","code":"class Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        return n > 0 and n & (n-1) == 0","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":159},{"id":1729058347,"question_id":193,"lang":"bash","lang_name":"Bash","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1754750634,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1729058347/","is_pending":"Not Pending","title":"Valid Phone Numbers","memory":"N/A","code":"# Read from the file file.txt and output all valid phone numbers to stdout.\\ncat file.txt | grep \\"\\\\d{3}-\\\\d{4}\\" ","compare_result":"10011111111111111111111000","title_slug":"valid-phone-numbers","has_notes":false,"flag_type":1,"frontend_id":158},{"id":1728817352,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1754733287,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728817352/","is_pending":"Not Pending","title":"Power of Two","memory":"17.6 MB","code":"class Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while (n & 1 == 0):\\n            n = n >> 1\\n        return (n == 1)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":157},{"id":1728815102,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1754733114,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728815102/","is_pending":"Not Pending","title":"Power of Two","memory":"17.6 MB","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while (n & 1 == 0):\\n            n = n >> 1\\n        return (n == 1)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":156},{"id":1728796102,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1754731630,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1728796102/","is_pending":"Not Pending","title":"Power of Two","memory":"17.8 MB","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        if n < 1:\\n            return False\\n        while (n % 2 == 0):\\n            n /= 2\\n        return (n == 1)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":155},{"id":1728794006,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1754731467,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1728794006/","is_pending":"Not Pending","title":"Power of Two","memory":"17.6 MB","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        return (n > 0 and math.log2(n) % 1 == 0)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":154},{"id":1728790430,"question_id":231,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1754731204,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1728790430/","is_pending":"Not Pending","title":"Power of Two","memory":"N/A","code":"import math\\nclass Solution:\\n    def isPowerOfTwo(self, n: int) -> bool:\\n        return (math.log2(n) % 1 == 0)","compare_resulttitle_slug":"power-of-two","has_notes":false,"flag_type":1,"frontend_id":153},{"id":1728207494,"question_id":67,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754674016,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1728207494/","is_pending":"Not Pending","title":"Add Binary","memory":"18 MB","code":"class Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        if len(a) > len(b):\\n            b = \'0\'*(len(a)-len(b)) + b\\n        elif len(a) < len(b):\\n            a = \'0\'*(len(b)-len(a)) + a\\n        res = \\"\\"\\n        index = -1\\n        carry = False\\n        while index >= -len(a):\\n            if a[index] != b[index]:\\n                if carry:\\n                    res = \'0\' + res\\n                    carry = True\\n                else:\\n                    res = \'1\' + res\\n                    carry = False\\n            else:\\n                if a[index] == \'0\':\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = False\\n                    else:\\n                        res = \'0\' + res\\n                        carry = False\\n                else:\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = True\\n                    else:\\n                        res = \'0\' + res\\n                        carry = True\\n            index -= 1\\n        if carry:\\n            res = \'1\' + res\\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-binary","has_notes":false,"flag_type":1,"frontend_id":152},{"id":1728185076,"question_id":67,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754672816,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1728185076/","is_pending":"Not Pending","title":"Add Binary","memory":"18 MB","code":"class Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        if len(a) > len(b):\\n            b = \'0\'*(len(a)-len(b)) + b\\n        elif len(a) < len(b):\\n            a = \'0\'*(len(b)-len(a)) + a\\n        res = \\"\\"\\n        index = -1\\n        carry = False\\n        while index >= -len(a):\\n            if a[index] != b[index]:\\n                if carry:\\n                    res = \'0\' + res\\n                    carry = True\\n                else:\\n                    res = \'1\' + res\\n                    carry = False\\n            else:\\n                if a[index] == \'0\':\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = False\\n                    else:\\n                        res = \'0\' + res\\n                        carry = False\\n                else:\\n                    if carry:\\n                        res = \'1\' + res\\n                        carry = True\\n                    else:\\n                        res = \'0\' + res\\n                        carry = True\\n            index -= 1\\n        if carry:\\n            res = \'1\' + res\\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-binary","has_notes":false,"flag_type":1,"frontend_id":151},{"id":1727829229,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647960,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1727829229/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.6 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        set_t = set(t)\\n        set_s = set(s)\\n\\n        if len(set_s) != len(set_t):\\n            return False\\n\\n        for char in set_t:\\n            if s.count(char) != t.count(char):\\n                return False\\n                break\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":150}],"has_next":true,"last_key":""}'
2025-08-22 12:22:03,272 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.25.31 - Accepted - runtime 193ms - memory 47.4MB.py already exists, skipping it
2025-08-22 12:22:03,273 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.22.21 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:03,273 [INFO] __main__.py:250 - range-product-queries-of-powers/2025-08-11 08.21.08 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:03,869 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:03,871 [INFO] __main__.py:250 - pascals-triangle/2025-08-11 07.42.01 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:04,632 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:04,634 [INFO] __main__.py:250 - reordered-power-of-2/2025-08-10 17.58.07 - Accepted - runtime 13ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:05,214 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:05,216 [INFO] __main__.py:250 - combination-sum/2025-08-10 17.28.10 - Accepted - runtime 10ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:06,332 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:06,333 [INFO] __main__.py:250 - count-and-say/2025-08-10 17.14.59 - Accepted - runtime 10ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:06,334 [INFO] __main__.py:250 - count-and-say/2025-08-10 17.12.14 - Accepted - runtime 14ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:06,334 [INFO] __main__.py:250 - number-of-1-bits/2025-08-10 16.50.40 - Accepted - runtime 1ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:06,335 [INFO] __main__.py:250 - number-of-1-bits/2025-08-10 16.47.53 - Accepted - runtime 0ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:06,955 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:06,956 [INFO] __main__.py:250 - power-of-two/2025-08-10 16.46.35 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:08,085 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:08,087 [INFO] __main__.py:250 - valid-phone-numbers/2025-08-09 20.13.54 - Wrong Answer - runtime NA - memory NA.sh already exists, skipping it
2025-08-22 12:22:08,088 [INFO] __main__.py:250 - power-of-two/2025-08-09 15.24.47 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:22:08,088 [INFO] __main__.py:250 - power-of-two/2025-08-09 15.21.54 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:22:08,088 [INFO] __main__.py:250 - power-of-two/2025-08-09 14.57.10 - Accepted - runtime 5ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:08,089 [INFO] __main__.py:250 - power-of-two/2025-08-09 14.54.27 - Accepted - runtime 4ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:22:08,089 [INFO] __main__.py:250 - power-of-two/2025-08-09 14.50.04 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:09,004 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:09,005 [INFO] __main__.py:250 - add-binary/2025-08-08 22.56.56 - Accepted - runtime 3ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:09,006 [INFO] __main__.py:250 - add-binary/2025-08-08 22.36.56 - Accepted - runtime 0ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:09,515 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:09,516 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.42.40 - Accepted - runtime 1ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:22:14,516 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-08-22 12:22:15,143 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-08-22 12:22:15,144 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1727826688,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647776,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1727826688/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.7 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":149},{"id":1727826539,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647765,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1727826539/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.9 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        if len(s) != len(t):\\n            return False\\n\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":148},{"id":1727826320,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647749,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1727826320/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.8 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        if len(s) != len(t):\\n            return False\\n\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in t:\\n                return False\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in s:\\n                return False\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n\\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":147},{"id":1727825158,"question_id":242,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647663,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1727825158/","is_pending":"Not Pending","title":"Valid Anagram","memory":"17.7 MB","code":"class Solution:\\n    def isAnagram(self, s: str, t: str) -> bool:\\n        s_count = {}\\n        t_count = {}\\n\\n        for i in s:\\n            if i not in s_count:\\n                s_count[i] = 1\\n            else:\\n                s_count[i] += 1\\n        \\n        for i in t:\\n            if i not in t_count:\\n                t_count[i] = 1\\n            else:\\n                t_count[i] += 1\\n        \\n        for i in s_count:\\n            if i not in t_count or s_count[i] != t_count[i]:\\n                return False\\n        \\n        for i in t_count:\\n            if i not in s_count or t_count[i] != s_count[i]:\\n                return False\\n                \\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":146},{"id":1727820888,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647358,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1727820888/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.9 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_set<int> seen;\\n        for (int num : nums){\\n            if (seen.count(num) > 0){\\n                return true;\\n            }\\n            seen.insert(num);\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":145},{"id":1727818203,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647164,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1727818203/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.9 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":144},{"id":1727818022,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647151,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1727818022/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.7 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":143},{"id":1727817940,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647145,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1727817940/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"91 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":142},{"id":1727817738,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647130,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/1727817738/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.7 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":141},{"id":1727817538,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647115,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/1727817538/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"92.2 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":140},{"id":1727817050,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754647079,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1727817050/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"90.8 MB","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        unordered_map<int,int> count;\\n        for (int num : nums){\\n            count[num]++;\\n            if (count[num] > 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":139},{"id":1727814283,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754646888,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1727814283/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"N/A","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        // Sorting the list using selection sort\\n        for (int i = 0; i < nums.size(); i++){\\n            int minIndex = i;\\n            for (int j = i; j < nums.size(); j++){\\n                if (nums[j] < nums[minIndex]){\\n                    minIndex = j;\\n                }\\n            }\\n            // swapping nums[i] and nums[minIndex]\\n            int temp = nums[i];\\n            nums[i] = nums[minIndex];\\n            nums[minIndex] = temp;\\n        }\\n\\n        for (int i = 0; i < nums.size() - 1; i++){\\n            if (nums[i] == nums[i+1]){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111000000000000000","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":138},{"id":1727811914,"question_id":217,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754646716,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1727811914/","is_pending":"Not Pending","title":"Contains Duplicate","memory":"N/A","code":"class Solution {\\npublic:\\n    bool containsDuplicate(vector<int>& nums) {\\n        // Sorting the list using selection sort\\n        for (int i = 0; i < nums.size(); i++){\\n            int minIndex = i;\\n            for (int j = i; j < nums.size(); j++){\\n                if (nums[j] < nums[i]){\\n                    minIndex = j;\\n                }\\n            }\\n            // swapping nums[i] and nums[j]\\n            int temp = nums[i];\\n            nums[i] = nums[minIndex];\\n            nums[minIndex] = temp;\\n        }\\n\\n        for (int i = 0; i < nums.size() - 1; i++){\\n            if (nums[i] == nums[i+1]){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111011111111110111111111110111101010111010010010000101111000000000000000","title_slug":"contains-duplicate","has_notes":false,"flag_type":1,"frontend_id":137},{"id":1727798289,"question_id":82,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754645730,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1727798289/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List II","memory":"15.6 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        if (!head || !head->next) return head;\\n\\n        ListNode* dummy = new ListNode(-1);\\n        dummy->next = head;\\n        ListNode* prev = dummy;\\n        ListNode* cur = head;\\n\\n        while (cur && cur->next) {\\n            if (cur->val == cur->next->val) {\\n                while (cur->next && cur->val == cur->next->val) {\\n                    cur = cur->next;\\n                }\\n                prev->next = cur->next; \\n            } else {\\n                prev = prev->next;\\n            }\\n            cur = cur->next;\\n        }\\n\\n        return dummy->next;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list-ii","has_notes":false,"flag_type":1,"frontend_id":136},{"id":1727778848,"question_id":83,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1754644359,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1727778848/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted List","memory":"16.4 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* deleteDuplicates(ListNode* head) {\\n        ListNode* ptr = head;\\n        ListNode* nextdiff = head;\\n        while(nextdiff != NULL){\\n            nextdiff = nextdiff->next;\\n            if (nextdiff == NULL || ptr-> val != nextdiff->val){\\n                ptr->next = nextdiff;\\n                ptr = ptr->next;\\n            }\\n        }\\n        return head;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-list","has_notes":false,"flag_type":1,"frontend_id":135},{"id":1722729475,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754290648,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1722729475/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"18 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1 or x == 0:\\n            return x\\n        start = 0\\n        end = x / 2\\n        while start <= end:\\n            mid = (start + end) // 2\\n            if mid * mid > x:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n        return int((start + end) // 2)","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":134},{"id":1722728946,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754290616,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1722728946/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"17.7 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1 or x == 0:\\n            return x\\n        start = 0\\n        end = x\\n        while start <= end:\\n            mid = (start + end) // 2\\n            if mid * mid > x:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n        return int((start + end) // 2)","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":133},{"id":1722727923,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754290558,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1722727923/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"N/A","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        if x == 1 or x == 0:\\n            return x\\n        start = 0\\n        end = x / 2\\n        while start < end:\\n            mid = start + end \\n            mid //= 2\\n            if mid * mid > x:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n        return int((start + end) // 2)","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":132},{"id":1722720808,"question_id":69,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1754290154,"status":10,"status_display":"Accepted","runtime":"983 ms","url":"/submissions/detail/1722720808/","is_pending":"Not Pending","title":"Sqrt(x)","memory":"17.5 MB","code":"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        i = 1\\n        while i * i <= x:\\n            i += 1\\n        return i - 1","compare_resulttitle_slug":"sqrtx","has_notes":false,"flag_type":1,"frontend_id":131},{"id":1722560727,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1754280523,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1722560727/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        if nums.count(0) >= 3:\\n            ans.append([0,0,0])\\n        positives = []\\n        negatives = []\\n        for i in nums:\\n            if i >= 0:\\n                positives.append(i)\\n            elif i < 0:\\n                negatives.append(i)\\n        for i in range(len(positives)):\\n            for j in range(i + 1, len(positives)):\\n                complement = - positives[i] - positives[j]\\n                if complement in negatives:\\n                    if positives[i] < positives[j] and [complement, positives[i], positives[j]] not in ans:\\n                        ans.append([complement, positives[i], positives[j]])\\n                    elif positives[i] >= positives[j] and [complement, positives[j], positives[i]] not in ans:\\n                        ans.append([complement, positives[j], positives[i]])\\n        for i in range(len(negatives)):\\n            for j in range(i + 1, len(negatives)):\\n                complement = - negatives[i] - negatives[j]\\n                if complement in positives:\\n                    if negatives[i] < negatives[j]  and [negatives[i], negatives[j], complement] not in ans:\\n                        ans.append([negatives[i], negatives[j], complement])\\n                    elif negatives[i] >= negatives[j] and [negatives[j], negatives[i], complement] not in ans:\\n                        ans.append([negatives[j], negatives[i], complement])\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":130}],"has_next":true,"last_key":""}'
2025-08-22 12:22:15,145 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.39.36 - Accepted - runtime 11ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:15,146 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.39.25 - Accepted - runtime 14ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:15,146 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.39.09 - Accepted - runtime 15ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:15,146 [INFO] __main__.py:250 - valid-anagram/2025-08-08 15.37.43 - Accepted - runtime 11ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:15,888 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:15,890 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.32.38 - Accepted - runtime 51ms - memory 90.9MB.cpp already exists, skipping it
2025-08-22 12:22:15,891 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.29.24 - Accepted - runtime 50ms - memory 90.9MB.cpp already exists, skipping it
2025-08-22 12:22:15,897 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.29.11 - Accepted - runtime 56ms - memory 90.7MB.cpp already exists, skipping it
2025-08-22 12:22:15,897 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.29.05 - Accepted - runtime 51ms - memory 91MB.cpp already exists, skipping it
2025-08-22 12:22:15,897 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.28.50 - Accepted - runtime 48ms - memory 90.7MB.cpp already exists, skipping it
2025-08-22 12:22:15,898 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.28.35 - Accepted - runtime 103ms - memory 92.2MB.cpp already exists, skipping it
2025-08-22 12:22:15,898 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.27.59 - Accepted - runtime 44ms - memory 90.8MB.cpp already exists, skipping it
2025-08-22 12:22:15,898 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.24.48 - Time Limit Exceeded - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:22:15,899 [INFO] __main__.py:250 - contains-duplicate/2025-08-08 15.21.56 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:22:16,277 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:16,279 [INFO] __main__.py:250 - remove-duplicates-from-sorted-list-ii/2025-08-08 15.05.30 - Accepted - runtime 0ms - memory 15.6MB.cpp already exists, skipping it
2025-08-22 12:22:16,927 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:16,928 [INFO] __main__.py:250 - remove-duplicates-from-sorted-list/2025-08-08 14.42.39 - Accepted - runtime 0ms - memory 16.4MB.cpp already exists, skipping it
2025-08-22 12:22:17,861 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:17,862 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.27.28 - Accepted - runtime 5ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:17,863 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.26.56 - Accepted - runtime 4ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:17,863 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.25.58 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:17,864 [INFO] __main__.py:250 - sqrtx/2025-08-04 12.19.14 - Accepted - runtime 983ms - memory 17.5MB.py already exists, skipping it
2025-08-22 12:22:18,526 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:18,528 [INFO] __main__.py:250 - 3sum/2025-08-04 09.38.43 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:23,528 [DEBUG] leetcode.py:150 - Exporting submissions from 120 to 140
2025-08-22 12:22:24,076 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=120&limit=20 HTTP/1.1" 200 None
2025-08-22 12:22:24,287 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1721576411,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754203341,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721576411/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        if nums.count(0) >= 3:\\n            ans.append([0,0,0])\\n        positives = []\\n        negatives = []\\n        for i in nums:\\n            if i >= 0:\\n                positives.append(i)\\n            elif i < 0:\\n                negatives.append(i)\\n        for i in range(len(positives)):\\n            for j in range(i + 1, len(positives)):\\n                complement = - positives[i] - positives[j]\\n                if complement in negatives:\\n                    if positives[i] < positives[j] and [complement, positives[i], positives[j]] not in ans:\\n                        ans.append([complement, positives[i], positives[j]])\\n                    elif positives[i] >= positives[j] and [complement, positives[j], positives[i]] not in ans:\\n                        ans.append([complement, positives[j], positives[i]])\\n        for i in range(len(negatives)):\\n            for j in range(i + 1, len(negatives)):\\n                complement = - negatives[i] - negatives[j]\\n                if complement in positives:\\n                    if negatives[i] < negatives[j]  and [negatives[i], negatives[j], complement] not in ans:\\n                        ans.append([negatives[i], negatives[j], complement])\\n                    elif negatives[i] >= negatives[j] and [negatives[j], negatives[i], complement] not in ans:\\n                        ans.append([negatives[j], negatives[i], complement])\\n\\n\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":129},{"id":1721567829,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754202747,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721567829/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        if nums.count(0) >= 3:\\n            ans.append([0,0,0])\\n        positives = []\\n        negatives = []\\n        for i in nums:\\n            if i >= 0:\\n                positives.append(i)\\n            elif i < 0:\\n                negatives.append(i)\\n        positives.sort()\\n        negatives.sort()\\n        for i in range(len(positives)):\\n            for j in range(i + 1, len(positives)):\\n                complement = - positives[i] - positives[j]\\n                if complement in negatives and [complement, positives[i], positives[j]] not in ans:\\n                    ans.append([complement, positives[i], positives[j]])\\n        for i in range(len(negatives)):\\n            for j in range(i + 1, len(negatives)):\\n                complement = - negatives[i] - negatives[j]\\n                if complement in positives and [negatives[i], negatives[j], complement] not in ans:\\n                    ans.append([negatives[i], negatives[j], complement])\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":128},{"id":1721555982,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754201889,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721555982/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        for i in range(len(nums)):\\n            for j in range(i+1, len(nums)):\\n                complement = -nums[i] - nums[j]\\n                if complement in nums[j+1:]:\\n                    triplet = [nums[i], nums[j] , complement]\\n                    triplet.sort()\\n                    if triplet not in ans:\\n                        ans.append(triplet)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":127},{"id":1721548616,"question_id":15,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754200717,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1721548616/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        ans = []\\n        for i in range(len(nums)):\\n            for j in range(i+1, len(nums)):\\n                for k in range(j+1, len(nums)):\\n                    if nums[i] + nums[j] + nums[k] == 0:\\n                        triplet = [nums[i], nums[j] , nums[k]]\\n                        triplet.sort()\\n                        if triplet not in ans:\\n                            ans.append(triplet)\\n        return ans\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"3sum","has_notes":false,"flag_type":1,"frontend_id":126},{"id":1721001652,"question_id":58,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754155569,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1721001652/","is_pending":"Not Pending","title":"Length of Last Word","memory":"17.9 MB","code":"class Solution:\\n    def lengthOfLastWord(self, s: str) -> int:\\n        return len(s.strip().split(\\" \\")[-1])\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"length-of-last-word","has_notes":false,"flag_type":1,"frontend_id":125},{"id":1720997498,"question_id":66,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754155374,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720997498/","is_pending":"Not Pending","title":"Plus One","memory":"17.7 MB","code":"class Solution:\\n    def plusOne(self, digits: List[int]) -> List[int]:\\n        digits[-1] += 1\\n        while max(digits) >= 10:\\n            for i in range(len(digits)):\\n                if digits[i] >= 10:\\n                    digits[i] %= 10\\n                    if i == 0:\\n                        digits = [1] + digits\\n                    else:\\n                        digits[i - 1] += 1\\n        return digits","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"plus-one","has_notes":false,"flag_type":1,"frontend_id":124},{"id":1720956666,"question_id":35,"lang":"cpp","lang_name":"C++","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754153318,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720956666/","is_pending":"Not Pending","title":"Search Insert Position","memory":"13.7 MB","code":"class Solution {\\npublic:\\n    int searchInsert(vector<int>& nums, int target) {\\n        int start = 0;\\n        int end = nums.size() - 1;\\n        int mid = (start + end) / 2;\\n\\n        while (start < end){\\n            if (nums[mid] == target){\\n                return mid;\\n            } else if (nums[mid] > target){\\n                end = mid;\\n            } else if (nums[mid] < target){\\n                start = mid + 1;\\n            }\\n            mid = (start + end) / 2;\\n        }\\n\\n        if (target > nums[mid]){\\n            return mid + 1;\\n        } else {\\n            return mid;\\n        }\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":123},{"id":1720308193,"question_id":35,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754118566,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720308193/","is_pending":"Not Pending","title":"Search Insert Position","memory":"18.7 MB","code":"class Solution:\\n    def searchInsert(self, nums: List[int], target: int) -> int:\\n        start = 0\\n        end = len(nums) - 1\\n        mid = (start + end) // 2\\n\\n        while start < end:\\n            if nums[mid] == target:\\n                return mid\\n            elif nums[mid] > target:\\n                end = mid\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2\\n        \\n        if target > nums[mid]:\\n            return mid + 1\\n        return mid","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":122},{"id":1720307646,"question_id":35,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1754118531,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1720307646/","is_pending":"Not Pending","title":"Search Insert Position","memory":"N/A","code":"class Solution:\\n    def searchInsert(self, nums: List[int], target: int) -> int:\\n        start = 0\\n        end = len(nums) - 1\\n        mid = (start + end) // 2\\n\\n        while start < end:\\n            if nums[mid] == target:\\n                return mid\\n            elif nums[mid] > target:\\n                end = mid - 1\\n            else:\\n                start = mid + 1\\n            mid = (start + end) // 2\\n        \\n        if target > nums[mid]:\\n            return mid + 1\\n        return mid","compare_result":"111111101111111111110111011101111110111111111111111111111111111101","title_slug":"search-insert-position","has_notes":false,"flag_type":1,"frontend_id":121},{"id":1720291210,"question_id":21,"lang":"cpp","lang_name":"C++","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754117537,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720291210/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"19.5 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\\n        if (list1 == NULL){\\n            return list2;\\n        }\\n        else if (list2 == NULL){\\n            return list1;\\n        }\\n        \\n        ListNode* next1 = list1;\\n        ListNode* next2 = list2;\\n        ListNode* head;\\n        if (list1->val > list2->val){\\n            head = list2;\\n            next2 = next2->next;\\n        }\\n        else {\\n            head = list1;\\n            next1 = next1->next;\\n        }\\n        ListNode* next = head;\\n        while (next1 != NULL && next2 != NULL){\\n            if (next1->val < next2->val){\\n                next->next = next1;\\n                next = next->next;\\n                next1 = next1->next;\\n            }\\n            else{\\n                next->next = next2;\\n                next = next->next;\\n                next2 = next2->next;\\n            }\\n        }\\n        if (next1 == NULL){\\n            next->next = next2;\\n        }\\n        else{\\n            next->next = next1;\\n        }\\n\\n        return head;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1,"frontend_id":120},{"id":1720278100,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754116777,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1720278100/","is_pending":"Not Pending","title":"Palindrome Number","memory":"18 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        if x < 0:\\n            return False\\n        if x < 10:\\n            return True\\n        x = str(x)\\n        end = len(x) - 1\\n        start = 0\\n\\n        while start < end:\\n            if x[start] != x[end]:\\n                return False\\n            start += 1\\n            end -= 1\\n        return True\\n","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":119},{"id":1720276965,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754116711,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1720276965/","is_pending":"Not Pending","title":"Palindrome Number","memory":"17.9 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        if x < 0:\\n            return False\\n        elif x < 10:\\n            return True\\n        num = str(x)\\n        while len(num) > 1:\\n            if num[0] != num[-1]:\\n                return False\\n            num = num[1:-1]\\n        return True","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":118},{"id":1720261927,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754115862,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1720261927/","is_pending":"Not Pending","title":"Palindrome Number","memory":"17.9 MB","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        x = str(x)\\n        end = len(x) - 1\\n        start = 0\\n\\n        while start < end:\\n            if x[start] != x[end]:\\n                return False\\n            start += 1\\n            end -= 1\\n        return True\\n","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1720259873,"question_id":9,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754115745,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1720259873/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution:\\n    def isPalindrome(self, x: int) -> bool:\\n        x = str(x)\\n        if len(x) < 2:\\n            return True\\n        elif x[0] != x[-1]:\\n            return False\\n        return self.isPalindrome(int(x[1:-1]))\\n        ","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1720250518,"question_id":1,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754115220,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1720250518/","is_pending":"Not Pending","title":"Two Sum","memory":"19.2 MB","code":"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        record = {}\\n        for i in range(len(nums)):\\n            complement = target - nums[i]\\n            if complement in record:\\n                return (record[complement], i)\\n            record[nums[i]] = i\\n        return (-1,-1)","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1720238622,"question_id":1,"lang":"python3","lang_name":"Python3","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1754114530,"status":10,"status_display":"Accepted","runtime":"1796 ms","url":"/submissions/detail/1720238622/","is_pending":"Not Pending","title":"Two Sum","memory":"18.6 MB","code":"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        for i in range(len(nums)):\\n            for j in range(i+1,len(nums)):\\n                if nums[i] + nums[j] == target:\\n                    return (i,j)\\n        return (-1,-1)\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708249632,"question_id":50,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753260020,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1708249632/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n ==0:\\n            return 1\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = x\\n        currentpower = 1\\n        while (currentpower < n//2):\\n            prod *= prod\\n            currentpower *=2\\n        while currentpower < n:\\n            prod *= x\\n            currentpower += 1\\n        return prod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708249168,"question_id":50,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753259988,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1708249168/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = x\\n        currentpower = 1\\n        while (currentpower < n//2):\\n            prod *= prod\\n            currentpower *=2\\n        while currentpower < n:\\n            prod *= x\\n            currentpower += 1\\n        return prod","compare_result":"1111111110111111111111111011111011111111101010111111011111101111111111111111101001111111111111111111110111111111111111111111111011111111111110111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1708244856,"question_id":50,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753259700,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1708244856/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        if n < 0:\\n            return 1/(self.myPow(x,-n))\\n        prod = 1\\n        for _ in range(n):\\n            prod *= x\\n        return prod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1708234053,"question_id":1302,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753258937,"status":10,"status_display":"Accepted","runtime":"7160 ms","url":"/submissions/detail/1708234053/","is_pending":"Not Pending","title":"Delete Characters to Make Fancy String","memory":"18.9 MB","code":"class Solution:\\n    def makeFancyString(self, s: str) -> str:\\n        if len(s) <= 2:\\n            return s\\n        parser = 2\\n        while parser < len(s):\\n            if s[parser] == s[parser-1] and s[parser] == s[parser-2]:\\n                s = s[:parser] + s[parser+1:]\\n            else:\\n                parser += 1\\n        return s\\n\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-characters-to-make-fancy-string","has_notes":false,"flag_type":1,"frontend_id":110}],"has_next":true,"last_key":""}'
2025-08-22 12:22:24,289 [INFO] __main__.py:250 - 3sum/2025-08-03 12.12.21 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:24,289 [INFO] __main__.py:250 - 3sum/2025-08-03 12.02.27 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:24,290 [INFO] __main__.py:250 - 3sum/2025-08-03 11.48.09 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:24,290 [INFO] __main__.py:250 - 3sum/2025-08-03 11.28.37 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:24,772 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:24,773 [INFO] __main__.py:250 - length-of-last-word/2025-08-02 22.56.09 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:25,307 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:25,308 [INFO] __main__.py:250 - plus-one/2025-08-02 22.52.54 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:25,890 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:25,892 [INFO] __main__.py:250 - search-insert-position/2025-08-02 22.18.38 - Accepted - runtime 0ms - memory 13.7MB.cpp already exists, skipping it
2025-08-22 12:22:25,892 [INFO] __main__.py:250 - search-insert-position/2025-08-02 12.39.26 - Accepted - runtime 0ms - memory 18.7MB.py already exists, skipping it
2025-08-22 12:22:25,893 [INFO] __main__.py:250 - search-insert-position/2025-08-02 12.38.51 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:26,518 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:26,519 [INFO] __main__.py:250 - merge-two-sorted-lists/2025-08-02 12.22.17 - Accepted - runtime 0ms - memory 19.5MB.cpp already exists, skipping it
2025-08-22 12:22:27,328 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:27,330 [INFO] __main__.py:250 - palindrome-number/2025-08-02 12.09.37 - Accepted - runtime 4ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:27,330 [INFO] __main__.py:250 - palindrome-number/2025-08-02 12.08.31 - Accepted - runtime 11ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:27,331 [INFO] __main__.py:250 - palindrome-number/2025-08-02 11.54.22 - Accepted - runtime 6ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:27,331 [INFO] __main__.py:250 - palindrome-number/2025-08-02 11.52.25 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:27,944 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:27,946 [INFO] __main__.py:250 - two-sum/2025-08-02 11.43.40 - Accepted - runtime 0ms - memory 19.2MB.py already exists, skipping it
2025-08-22 12:22:27,946 [INFO] __main__.py:250 - two-sum/2025-08-02 11.32.10 - Accepted - runtime 1796ms - memory 18.6MB.py already exists, skipping it
2025-08-22 12:22:27,947 [INFO] __main__.py:250 - powx-n/2025-07-23 14.10.20 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:27,947 [INFO] __main__.py:250 - powx-n/2025-07-23 14.09.48 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:27,948 [INFO] __main__.py:250 - powx-n/2025-07-23 14.05.00 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:28,490 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:28,492 [INFO] __main__.py:250 - delete-characters-to-make-fancy-string/2025-07-23 13.52.17 - Accepted - runtime 7160ms - memory 18.9MB.py already exists, skipping it
2025-08-22 12:22:33,493 [DEBUG] leetcode.py:150 - Exporting submissions from 140 to 160
2025-08-22 12:22:33,986 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=140&limit=20 HTTP/1.1" 200 None
2025-08-22 12:22:33,992 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1708231266,"question_id":1302,"lang":"python3","lang_name":"Python3","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753258743,"status":10,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/1708231266/","is_pending":"Not Pending","title":"Delete Characters to Make Fancy String","memory":"19.1 MB","code":"class Solution:\\n    def makeFancyString(self, s: str) -> str:\\n        fancystring = s[:2]\\n        for i in s[2:]:\\n            if i != fancystring[-1] or i != fancystring[-2]:\\n                fancystring += i\\n        return fancystring\\n\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-characters-to-make-fancy-string","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1700864405,"question_id":3490,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month","timestamp":1752729748,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/1700864405/","is_pending":"Not Pending","title":"Find the Maximum Length of Valid Subsequence I","memory":"39.1 MB","code":"class Solution:\\n    def maximumLength(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        if n==2: return 2\\n        z=nums[0]&1\\n        Len=[1-z, z, 1]\\n        for xx in nums[1:]:\\n            x=xx&1\\n            Len[x&1]+=1\\n            if x!=z:\\n                Len[2]+=1\\n                z=1-z\\n        return max(Len)\\n        ","compare_resulttitle_slug":"find-the-maximum-length-of-valid-subsequence-i","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1699020439,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752595745,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1699020439/","is_pending":"Not Pending","title":"Valid Word","memory":"17.6 MB","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        vowel = False\\n        consonant = False\\n        for i in word:\\n            if i.lower() in \\"aoeui\\":\\n                vowel = True\\n            elif i.lower() in \\"pyfgcrldhtnsqjkxbmwvz\\":\\n                consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return len(word) > 2 and vowel and consonant","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1699020083,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752595729,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699020083/","is_pending":"Not Pending","title":"Valid Word","memory":"N/A","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        vowel = False\\n        consonant = True\\n        for i in word:\\n            if i.lower() in \\"aoeui\\":\\n                vowel = True\\n            elif i.lower() in \\"pyfgcrldhtnsqjkxbmwvz\\":\\n                consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return len(word) > 2 and vowel and consonant","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1699017897,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752595622,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699017897/","is_pending":"Not Pending","title":"Valid Word","memory":"N/A","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        vowel = False\\n        consonant = True\\n        for i in word:\\n            if i.lower() in \\"pyfgcrlaoeuidhtnsqjkxbmwvz\\":\\n                if i.lower() in \\"aoeui\\":\\n                    vowel = True\\n                else:\\n                    consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return len(word) > 2 and vowel and consonant","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1699017009,"question_id":3396,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752595579,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699017009/","is_pending":"Not Pending","title":"Valid Word","memory":"N/A","code":"class Solution:\\n    def isValid(self, word: str) -> bool:\\n        charcount = 0\\n        vowel = False\\n        consonant = True\\n        for i in word:\\n            if i.lower() in \\"pyfgcrlaoeuidhtnsqjkxbmwvz\\":\\n                charcount += 1\\n                if i.lower() in \\"aoeui\\":\\n                    vowel = True\\n                else:\\n                    consonant = True\\n            elif i in \\"7531902468\\":\\n                continue\\n            else:\\n                return False\\n        return charcount > 2 and vowel and consonant","compare_resulttitle_slug":"valid-word","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1692830753,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129883,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1692830753/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.7 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)+1):\\n            if haystack[i:i+len(needle)] == needle:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1692821328,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129347,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1692821328/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.9 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)+1):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1692820842,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129321,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1692820842/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"17.7 MB","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        if haystack == needle:\\n            return 0\\n        for i in range(len(haystack)-len(needle)+1):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1692818315,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129179,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692818315/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        if haystack == needle:\\n            return 0\\n        for i in range(len(haystack)-len(needle)):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11111011111111110101111111111110111111111101011111111111111111111111111111111110101","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1692817149,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129111,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692817149/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11110011011011110101111111111110111111111101011111111111111111111111111111111110101","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1692815141,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129001,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692815141/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)-1):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[i+j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11010010010000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1692814523,"question_id":28,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752128966,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1692814523/","is_pending":"Not Pending","title":"Find the Index of the First Occurrence in a String","memory":"N/A","code":"class Solution:\\n    def strStr(self, haystack: str, needle: str) -> int:\\n        for i in range(len(haystack)-len(needle)):\\n            skip = False\\n            for j in range(len(needle)):\\n                if haystack[i+j] != needle[i+j]:\\n                    skip = True\\n                    break\\n            if skip:\\n                continue\\n            else:\\n                return i\\n        return -1","compare_result":"11000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-the-index-of-the-first-occurrence-in-a-string","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1692792283,"question_id":20,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752127706,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1692792283/","is_pending":"Not Pending","title":"Valid Parentheses","memory":"17.8 MB","code":"class Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        corres = {\\n            \\")\\" : \\"(\\",\\n            \\"}\\" : \\"{\\",\\n            \\"]\\" : \\"[\\",\\n        }\\n        for i in s:\\n            if i in \\"[{(\\":\\n                stack.append(i)\\n            elif stack == []:\\n                return False\\n            elif stack[-1] == corres[i]:\\n                stack.pop(-1)\\n            else:\\n                return False\\n        return stack == []\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-parentheses","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1691730864,"question_id":14,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752048663,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1691730864/","is_pending":"Not Pending","title":"Longest Common Prefix","memory":"18.1 MB","code":"class Solution:\\n    def longestCommonPrefix(self, strs: List[str]) -> str:\\n        index = 0\\n        longestprefix = \\"\\"\\n        minlen = len(strs[0])\\n        for i in strs:\\n            if len(i) < minlen:\\n                minlen = len(i)\\n        while index < minlen:\\n            char = strs[0][index]\\n            for i in strs:\\n                if i[index] != char:\\n                    return longestprefix\\n            longestprefix += char\\n            index += 1\\n        return longestprefix\\n\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-common-prefix","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1691718183,"question_id":13,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752047752,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1691718183/","is_pending":"Not Pending","title":"Roman to Integer","memory":"17.7 MB","code":"class Solution:\\n    def romanToInt(self, s: str) -> int:\\n        val = 0\\n        valmap = {\\n            \\"I\\" : 1,\\n            \\"V\\" : 5,\\n            \\"X\\" : 10,\\n            \\"L\\" : 50,\\n            \\"C\\" : 100,\\n            \\"D\\" : 500,\\n            \\"M\\" : 1000,\\n        }\\n        prev = 0\\n        for i in s[::-1]:\\n            if valmap[i] >= prev:\\n                val += valmap[i]\\n            else:\\n                val -= valmap[i]\\n            prev = valmap[i]\\n        return val\\n\\n\\n\\n        ","compare_resulttitle_slug":"roman-to-integer","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1691705436,"question_id":11,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752046864,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/1691705436/","is_pending":"Not Pending","title":"Container With Most Water","memory":"28.5 MB","code":"class Solution:\\n    def maxArea(self, height: List[int]) -> int:\\n        start = 0\\n        end = len(height) -1\\n        maxarea = 0\\n        while start < end:\\n            area = min(height[start],height[end]) * (end - start)\\n            if height[start] < height[end]:\\n                start += 1\\n            else:\\n                end -= 1\\n            if maxarea < area:\\n                maxarea = area\\n        return maxarea\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"container-with-most-water","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1691686694,"question_id":11,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752045614,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1691686694/","is_pending":"Not Pending","title":"Container With Most Water","memory":"N/A","code":"class Solution:\\n    def maxArea(self, height: List[int]) -> int:\\n        maxarea = 0\\n        for i in range(len(height)-1):\\n            for j in range(i+1, len(height)):\\n                area = min(height[i], height[j]) * (j - i)\\n                if maxarea < area:\\n                    maxarea = area\\n        return maxarea\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111110000000000","title_slug":"container-with-most-water","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1691635842,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042675,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1691635842/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"17.7 MB","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while index < len(s) and s[index] == \\" \\":\\n            index += 1\\n        if index < len(s) and s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif index < len(s) and s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31 - 1,out)\\n            \\n            \\n            \\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1691635051,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042632,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1691635051/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while index < len(s) and s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31 - 1,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":90}],"has_next":true,"last_key":""}'
2025-08-22 12:22:33,994 [INFO] __main__.py:250 - delete-characters-to-make-fancy-string/2025-07-23 13.49.03 - Accepted - runtime 228ms - memory 19.1MB.py already exists, skipping it
2025-08-22 12:22:34,806 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:34,808 [INFO] __main__.py:250 - find-the-maximum-length-of-valid-subsequence-i/2025-07-17 10.52.28 - Accepted - runtime 55ms - memory 39.1MB.py already exists, skipping it
2025-08-22 12:22:35,526 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:35,528 [INFO] __main__.py:250 - valid-word/2025-07-15 21.39.05 - Accepted - runtime 0ms - memory 17.6MB.py already exists, skipping it
2025-08-22 12:22:35,529 [INFO] __main__.py:250 - valid-word/2025-07-15 21.38.49 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:35,530 [INFO] __main__.py:250 - valid-word/2025-07-15 21.37.02 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:35,531 [INFO] __main__.py:250 - valid-word/2025-07-15 21.36.19 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:36,187 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:36,189 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.14.43 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:36,189 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.05.47 - Accepted - runtime 3ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:36,190 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.05.21 - Accepted - runtime 4ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:36,190 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.02.59 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:36,190 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.01.51 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:36,191 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 12.00.01 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:36,191 [INFO] __main__.py:250 - find-the-index-of-the-first-occurrence-in-a-string/2025-07-10 11.59.26 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:36,643 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:36,645 [INFO] __main__.py:250 - valid-parentheses/2025-07-10 11.38.26 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:37,168 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:37,169 [INFO] __main__.py:250 - longest-common-prefix/2025-07-09 13.41.03 - Accepted - runtime 0ms - memory 18.1MB.py already exists, skipping it
2025-08-22 12:22:37,804 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:37,806 [INFO] __main__.py:250 - roman-to-integer/2025-07-09 13.25.52 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:38,351 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:38,354 [INFO] __main__.py:250 - container-with-most-water/2025-07-09 13.11.04 - Accepted - runtime 67ms - memory 28.5MB.py already exists, skipping it
2025-08-22 12:22:38,354 [INFO] __main__.py:250 - container-with-most-water/2025-07-09 12.50.14 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:39,238 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:39,240 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 12.01.15 - Accepted - runtime 2ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:39,240 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 12.00.32 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:44,241 [DEBUG] leetcode.py:150 - Exporting submissions from 160 to 180
2025-08-22 12:22:45,253 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=160&limit=20 HTTP/1.1" 200 None
2025-08-22 12:22:45,311 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1691634556,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042603,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1691634556/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31 - 1,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1691634219,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042584,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1691634219/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        elif s[index] == \\"+\\":\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1691633675,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042553,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1691633675/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        if s == \\"\\":\\n            return out \\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1691633218,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042528,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1691633218/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return max(-2**31,-out)\\n        return min(2**31,out)\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1691631619,"question_id":8,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752042443,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1691631619/","is_pending":"Not Pending","title":"String to Integer (atoi)","memory":"N/A","code":"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        out = 0\\n        neg = False\\n        index = 0\\n        while s[index] == \\" \\":\\n            index += 1\\n        if s[index] == \\"-\\":\\n            neg = True\\n            index += 1\\n        while index < len(s) and s[index] in \\"1234567890\\":\\n            out = out * 10 + int(s[index])\\n            index += 1\\n        if neg:\\n            return -out\\n        return out\\n            \\n            \\n            \\n        ","compare_resulttitle_slug":"string-to-integer-atoi","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1689292595,"question_id":1995,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751875693,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1689292595/","is_pending":"Not Pending","title":"Finding Pairs With a Certain Sum","memory":"N/A","code":"class FindSumPairs:\\n\\n    def __init__(self, nums1: List[int], nums2: List[int]):\\n        self.nums1 = nums1\\n        self.nums2 = nums2\\n        \\n\\n    def add(self, index: int, val: int) -> None:\\n        self.nums2[index] += val\\n        \\n\\n    def count(self, tot: int) -> int:\\n        count1 = {}\\n        count2 = {}\\n        for i in self.nums1:\\n            if i in count1:\\n                count1[i] += 1\\n            else:\\n                count1[i] = 1\\n        for j in self.nums2:\\n            if j in count2:\\n                count2[j] += 1\\n            else:\\n                count2[j] = 1\\n        count = 0\\n        for i in count1:\\n            for j in count2:\\n                if i + j == tot:\\n                    count += count1[i] * count2[j]\\n        return count\\n        \\n\\n\\n# Your FindSumPairs object will be instantiated and called as such:\\n# obj = FindSumPairs(nums1, nums2)\\n# obj.add(index,val)\\n# param_2 = obj.count(tot)","compare_result":"11111111111111111111111100","title_slug":"finding-pairs-with-a-certain-sum","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1689286083,"question_id":1995,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751875235,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1689286083/","is_pending":"Not Pending","title":"Finding Pairs With a Certain Sum","memory":"N/A","code":"class FindSumPairs:\\n\\n    def __init__(self, nums1: List[int], nums2: List[int]):\\n        self.nums1 = nums1\\n        self.nums2 = nums2\\n        \\n\\n    def add(self, index: int, val: int) -> None:\\n        self.nums2[index] += val\\n        \\n\\n    def count(self, tot: int) -> int:\\n        count = 0\\n        for i in self.nums1:\\n            for j in self.nums2:\\n                if i + j == tot:\\n                    count += 1\\n        return count\\n        \\n\\n\\n# Your FindSumPairs object will be instantiated and called as such:\\n# obj = FindSumPairs(nums1, nums2)\\n# obj.add(index,val)\\n# param_2 = obj.count(tot)","compare_result":"11111111111111111100000000","title_slug":"finding-pairs-with-a-certain-sum","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1689281832,"question_id":1510,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751874933,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1689281832/","is_pending":"Not Pending","title":"Find Lucky Integer in an Array","memory":"18 MB","code":"class Solution:\\n    def findLucky(self, arr: List[int]) -> int:\\n        count = {}\\n        for i in arr:\\n            if i in count:\\n                count[i] += 1\\n            else:\\n                count[i] = 1\\n        largestluckiest = -1\\n        for i in count:\\n            if count[i] == i and i > largestluckiest:\\n                largestluckiest = i\\n        return largestluckiest\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-lucky-integer-in-an-array","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1685873571,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751613695,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1685873571/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"17.8 MB","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = 0\\n        k -= 1\\n        for i in range(k.bit_length() - 1, -1, -1):\\n            if (k >> i) & 1:\\n                ans += operations[i]\\n        return chr(ord(\\"a\\") + (ans % 26)) ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1684701607,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751525067,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684701607/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"17.8 MB","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = 0\\n        k -= 1\\n        for i in range(k.bit_length() - 1, -1, -1):\\n            if (k >> i) & 1:\\n                ans += operations[i]\\n        return chr(ord(\\"a\\") + (ans % 26)) ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1684697706,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751524861,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1684697706/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"17.9 MB","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = \'a\'\\n        while operations != []:\\n            if k > 2**(len(operations)-1):\\n                k -= 2**(len(operations)-1)\\n                ans = chr((ord(ans) - ord(\'a\') + operations[-1])%26 + ord(\'a\'))\\n            operations.pop()\\n        return ans        ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1684696489,"question_id":3601,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751524794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1684696489/","is_pending":"Not Pending","title":"Find the K-th Character in String Game II","memory":"N/A","code":"class Solution:\\n    def kthCharacter(self, k: int, operations: List[int]) -> str:\\n        ans = \'a\'\\n        while operations != []:\\n            if k > 2**(len(operations)-1):\\n                k -= 2**(len(operations)-1)\\n                ans = chr(ord(ans) + operations[-1])\\n            operations.pop()\\n        return ans        ","compare_resulttitle_slug":"find-the-k-th-character-in-string-game-ii","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1684660747,"question_id":3600,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751522881,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684660747/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"7.9 MB","code":"class Solution {\\npublic:\\n    char kthCharacter(int k) {\\n        int x = 512;\\n        char ans = \'a\';\\n        while (k > 1){\\n            if (k > x){\\n                k -= x;\\n                ans ++;\\n            }\\n            x /= 2;\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1684577632,"question_id":3617,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751518117,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/1684577632/","is_pending":"Not Pending","title":"Find the Original Typed String I","memory":"17.9 MB","code":"class Solution:\\n    def possibleStringCount(self, word: str) -> int:\\n        n, ans = len(word), 1\\n        for i in range(1, n):\\n            if word[i - 1] == word[i]:\\n                ans += 1\\n        return ans","compare_resulttitle_slug":"find-the-original-typed-string-i","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1684573868,"question_id":3617,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751517886,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/1684573868/","is_pending":"Not Pending","title":"Find the Original Typed String I","memory":"17.8 MB","code":"class Solution:\\n    def possibleStringCount(self, word: str) -> int:\\n        possibilities = 1\\n        start = 0\\n        till = 0\\n        while start < len(word):\\n            while till < len(word) and word[start] == word[till]:\\n                till += 1\\n            possibilities += till - start - 1\\n            start = till\\n        return possibilities","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-original-typed-string-i","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1684559976,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751517003,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1684559976/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        total_steps = 0\\n        step = 512\\n        while k > 1:\\n            if k > step:\\n                k -= step\\n                total_steps += 1\\n            step /= 2\\n        return chr(total_steps + 97)\\n\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1684559772,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751516990,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1684559772/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        total_steps = 0\\n        step = 512\\n        while k > 1:\\n            if k > step:\\n                k -= step\\n                total_steps += 1\\n            step /= 2\\n        return chr(total_steps + 97)\\n\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1684554564,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751516629,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1684554564/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        route = [k]\\n        step = 512\\n        while k > 1:\\n            if k > step:\\n                k -= step\\n                route.append(k)\\n            step /= 2\\n        return chr(len(route) + 65 - 1 + 32)\\n\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1684548266,"question_id":3600,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751516185,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1684548266/","is_pending":"Not Pending","title":"Find the K-th Character in String Game I","memory":"17.7 MB","code":"class Solution:\\n    def kthCharacter(self, k: int) -> str:\\n        word = \\"a\\"\\n        while len(word) < k:\\n            next = \\"\\"\\n            for i in word:\\n                next += chr(ord(i) + 1)\\n            word += next\\n        return word[k-1]\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-k-th-character-in-string-game-i","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1683760898,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751454247,"status":10,"status_display":"Accepted","runtime":"135 ms","url":"/submissions/detail/1683760898/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"26.8 MB","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        min_price = prices[0]\\n        max_profit = 0\\n        \\n        for price in prices[1:]:\\n            max_profit = max(max_profit, price - min_price)\\n            min_price = min(min_price, price)\\n            \\n        return max_profit","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":70}],"has_next":true,"last_key":""}'
2025-08-22 12:22:45,313 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 12.00.03 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:45,314 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.59.44 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:45,315 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.59.13 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:45,316 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.58.48 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:45,316 [INFO] __main__.py:250 - string-to-integer-atoi/2025-07-09 11.57.23 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:45,813 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:45,815 [INFO] __main__.py:250 - finding-pairs-with-a-certain-sum/2025-07-07 13.38.13 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:45,816 [INFO] __main__.py:250 - finding-pairs-with-a-certain-sum/2025-07-07 13.30.35 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:46,912 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:46,950 [INFO] __main__.py:250 - find-lucky-integer-in-an-array/2025-07-07 13.25.33 - Accepted - runtime 0ms - memory 18MB.py already exists, skipping it
2025-08-22 12:22:47,436 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:47,437 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-04 12.51.35 - Accepted - runtime 3ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:47,438 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-03 12.14.27 - Accepted - runtime 0ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:47,438 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-03 12.11.01 - Accepted - runtime 4ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:47,439 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-ii/2025-07-03 12.09.54 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:48,463 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:48,465 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 11.38.01 - Accepted - runtime 0ms - memory 7.9MB.cpp already exists, skipping it
2025-08-22 12:22:48,924 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:48,925 [INFO] __main__.py:250 - find-the-original-typed-string-i/2025-07-03 10.18.37 - Accepted - runtime 45ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:48,926 [INFO] __main__.py:250 - find-the-original-typed-string-i/2025-07-03 10.14.46 - Accepted - runtime 39ms - memory 17.8MB.py already exists, skipping it
2025-08-22 12:22:48,926 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 10.00.03 - Accepted - runtime 2ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:48,927 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 09.59.50 - Accepted - runtime 1ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:48,927 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 09.53.49 - Accepted - runtime 0ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:48,927 [INFO] __main__.py:250 - find-the-k-th-character-in-string-game-i/2025-07-03 09.46.25 - Accepted - runtime 9ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:49,342 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:49,343 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.34.07 - Accepted - runtime 135ms - memory 26.8MB.py already exists, skipping it
2025-08-22 12:22:54,344 [DEBUG] leetcode.py:150 - Exporting submissions from 180 to 200
2025-08-22 12:22:54,873 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=180&limit=20 HTTP/1.1" 200 None
2025-08-22 12:22:54,874 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1683760672,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751454233,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/1683760672/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"26.8 MB","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        min_price = prices[0]\\n        max_profit = 0\\n        \\n        for price in prices[1:]:\\n            max_profit = max(max_profit, price - min_price)\\n            min_price = min(min_price, price)\\n            \\n        return max_profit","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1683754693,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751453816,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1683754693/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"26.9 MB","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        lowestprice = prices[0]\\n        maxprofit = 0\\n        for i in prices:\\n            if lowestprice > i:\\n                lowestprice = i\\n            if i - lowestprice > maxprofit:\\n                maxprofit = i - lowestprice\\n        return maxprofit\\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1683733531,"question_id":121,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751452388,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1683733531/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"N/A","code":"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        profitgen = 0\\n        for i in range(len(prices)):\\n            for j in range(i, len(prices)):\\n                if prices[j] - prices[i] > profitgen:\\n                    profitgen = prices[j] - prices[i]\\n        return profitgen","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1683727644,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751452006,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1683727644/","is_pending":"Not Pending","title":"Rotate Array","memory":"25.8 MB","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        k = k % len(nums)\\n        def reverse(nums: List[int], start: int, stop: int):\\n            while start < stop:\\n                nums[start], nums[stop] = nums[stop], nums[start]\\n                start += 1\\n                stop -= 1\\n        \\n        reverse(nums, 0, len(nums)-1-k)\\n        reverse(nums, len(nums)-k, len(nums)-1)\\n        reverse(nums, 0, len(nums)-1)","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1683724588,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751451812,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1683724588/","is_pending":"Not Pending","title":"Rotate Array","memory":"25.7 MB","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        n = len(nums)\\n        k %= n\\n        nums.reverse()\\n        nums[:k] = reversed(nums[:k])\\n        nums[k:] = reversed(nums[k:])","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1683715670,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751451258,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1683715670/","is_pending":"Not Pending","title":"Rotate Array","memory":"25.8 MB","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        k = k % len(nums)\\n        def reverse(nums: List[int], start: int, stop: int):\\n            while start < stop:\\n                nums[start], nums[stop] = nums[stop], nums[start]\\n                start += 1\\n                stop -= 1\\n        \\n        reverse(nums, 0, len(nums)-1-k)\\n        reverse(nums, len(nums)-k, len(nums)-1)\\n        reverse(nums, 0, len(nums)-1)\\n        ","compare_result":"11111111111111111111111111111111111111","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1683714969,"question_id":189,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751451216,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1683714969/","is_pending":"Not Pending","title":"Rotate Array","memory":"N/A","code":"class Solution:\\n    def rotate(self, nums: List[int], k: int) -> None:\\n        \\"\\"\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\"\\"\\"\\n        def reverse(nums: List[int], start: int, stop: int):\\n            while start < stop:\\n                nums[start], nums[stop] = nums[stop], nums[start]\\n                start += 1\\n                stop -= 1\\n        \\n        reverse(nums, 0, len(nums)-1-k)\\n        reverse(nums, len(nums)-k, len(nums)-1)\\n        reverse(nums, 0, len(nums)-1)\\n        ","compare_result":"11111111111111111111111000100011101000","title_slug":"rotate-array","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1683601532,"question_id":169,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751443966,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1683601532/","is_pending":"Not Pending","title":"Majority Element","memory":"19.4 MB","code":"class Solution:\\n    def majorityElement(self, nums: List[int]) -> int:\\n        count = 0\\n        for i in nums:\\n            if count == 0:\\n                candidate = i\\n                count += 1\\n            elif i != candidate:\\n                count -= 1\\n            else:\\n                count += 1\\n        return candidate","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1683595537,"question_id":169,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751443533,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1683595537/","is_pending":"Not Pending","title":"Majority Element","memory":"19.4 MB","code":"class Solution:\\n    def majorityElement(self, nums: List[int]) -> int:\\n        count = {}\\n        for i in nums:\\n            if i not in count:\\n                count[i] = 1\\n            else:\\n                count[i] += 1\\n        for i in count:\\n            if count[i] > len(nums)/2:\\n                return i\\n        return -1\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"majority-element","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1683557393,"question_id":26,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440948,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1683557393/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"18.9 MB","code":"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        i = 1\\n        while i < len(nums):\\n            if nums[i-1] == nums[i]:\\n                nums.pop(i)\\n                continue\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1683556002,"question_id":26,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440861,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/1683556002/","is_pending":"Not Pending","title":"Remove Duplicates from Sorted Array","memory":"18.9 MB","code":"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        i = 1\\n        while i < len(nums):\\n            if nums[i-1] == nums[i]:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicates-from-sorted-array","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1683553023,"question_id":27,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440678,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1683553023/","is_pending":"Not Pending","title":"Remove Element","memory":"17.9 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        i = 0\\n        while i < len(nums):\\n            if nums[i] == val:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1683552634,"question_id":27,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440657,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1683552634/","is_pending":"Not Pending","title":"Remove Element","memory":"17.7 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        i = 0\\n        while i < len(nums):\\n            if nums[i] == val:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return i\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1683550074,"question_id":27,"lang":"python3","lang_name":"Python3","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1751440503,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1683550074/","is_pending":"Not Pending","title":"Remove Element","memory":"17.5 MB","code":"class Solution:\\n    def removeElement(self, nums: List[int], val: int) -> int:\\n        i = 0\\n        while i < len(nums):\\n            if nums[i] == val:\\n                nums.pop(i)\\n                i = i - 1\\n            i = i + 1\\n        return len(nums)\\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-element","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1632388010,"question_id":3629,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747102677,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1632388010/","is_pending":"Not Pending","title":"Total Characters in String After Transformations I","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthAfterTransformations(string s, int t) {\\n        vector<int> x;\\n        for (char c : s){\\n            x.push_back((int)c - (int)(\'a\'));\\n            x[x.size()-1] += t;\\n        }\\n        long sum = 0;\\n        for (int i : x){\\n            sum += i / 26 + 1;\\n        }\\n        return sum;\\n    }\\n};","compare_resulttitle_slug":"total-characters-in-string-after-transformations-i","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1632387543,"question_id":3629,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747102624,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1632387543/","is_pending":"Not Pending","title":"Total Characters in String After Transformations I","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthAfterTransformations(string s, int t) {\\n        vector<int> x;\\n        for (char c : s){\\n            x.push_back((int)c - (int)(\'a\'));\\n            x[x.size()-1] += t;\\n        }\\n        int sum = 0;\\n        for (int i : x){\\n            sum += i / 26 + 1;\\n        }\\n        return sum;\\n    }\\n};","compare_resulttitle_slug":"total-characters-in-string-after-transformations-i","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1631517213,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747019387,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631517213/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"11.2 MB","code":"class Solution {\\npublic:\\n    string convert(string s, int numRows) {\\n        if (numRows == 1) return s;\\n        char a[10000];\\n        std::size_t len = s.length();\\n        int index =0;\\n        for (int i = 0; i < numRows; i++) {\\n            for (int j = i; j < len; j +=2*(numRows-1)) {\\n                a[index++] = s[j];\\n                if (i > 0 && i<numRows-1 && j+2*(numRows-1)-2*i<len) {\\n                    a[index++] = s[j + 2*(numRows - 1)-2*i];\\n                }\\n            }\\n        }\\n        a[index]=\'\\\\0\';\\n        return a;\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1631516555,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747019304,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1631516555/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"14.2 MB","code":"class Solution {\\npublic:\\n    string convert(string s, int numRows) {\\n    if(numRows <= 1) return s;\\n    vector<string>v(numRows, \\"\\"); \\n    int j = 0, dir = -1;\\n    for(int i = 0; i < s.length(); i++)\\n    {\\n        if(j == numRows - 1 || j == 0) dir *= (-1); \\n        v[j] += s[i];\\n        if(dir == 1) j++;\\n        else j--;\\n    }\\n    string res;\\n    for(auto &it : v) res += it; \\n    return res;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1631515355,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747019156,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1631515355/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"17.5 MB","code":"class Solution {\\npublic:\\n    string convert(string s, int numRows) {\\n        if (numRows == 1 || numRows >= s.length()) {\\n            return s;\\n        }\\n\\n        vector<vector<char>> Vec(numRows);\\n        bool f = true;\\n        int j = 0;\\n\\n        for(int i = 0; i<s.size(); i++){\\n            Vec[j].push_back(s[i]);\\n            if(j == numRows-1){\\n                f = false;\\n            }\\n            if(j == 0){\\n                f = true;\\n            }\\n            if(f == true){\\n                j++;\\n            }\\n            else{\\n                j--;\\n            }\\n        }\\n\\n        string r;\\n        for(int i = 0; i<numRows; i++){\\n            for(char c : Vec[i]){\\n                r += c;\\n            }\\n        }\\n        return r;\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1631513645,"question_id":6,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747018949,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1631513645/","is_pending":"Not Pending","title":"Zigzag Conversion","memory":"14.1 MB","code":"class Solution {\\npublic:\\n    int calcindex(int i, int numRows){\\n        i = i % (2* numRows - 2);\\n        if (i < numRows) return i;\\n        return 2 * numRows - i - 2;\\n    }\\n\\n    string convert(string s, int numRows) {\\n        if (numRows == 1) return s;\\n        vector<string> parts(numRows);\\n        for (int i = 0; i < s.size(); i++){\\n            parts[calcindex(i,numRows)] += s[i];\\n        }\\n        for (int i = 1; i < numRows; i++){\\n            parts[0] += parts[i];\\n        }\\n        return parts[0];\\n    }\\n};","compare_resulttitle_slug":"zigzag-conversion","has_notes":false,"flag_type":1,"frontend_id":50}],"has_next":true,"last_key":""}'
2025-08-22 12:22:54,876 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.33.53 - Accepted - runtime 125ms - memory 26.8MB.py already exists, skipping it
2025-08-22 12:22:54,876 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.26.56 - Accepted - runtime 28ms - memory 26.9MB.py already exists, skipping it
2025-08-22 12:22:54,877 [INFO] __main__.py:250 - best-time-to-buy-and-sell-stock/2025-07-02 16.03.08 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:55,383 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:55,385 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.56.46 - Accepted - runtime 5ms - memory 25.8MB.py already exists, skipping it
2025-08-22 12:22:55,385 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.53.32 - Accepted - runtime 4ms - memory 25.7MB.py already exists, skipping it
2025-08-22 12:22:55,386 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.44.18 - Accepted - runtime 6ms - memory 25.8MB.py already exists, skipping it
2025-08-22 12:22:55,386 [INFO] __main__.py:250 - rotate-array/2025-07-02 15.43.36 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:22:55,888 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:55,890 [INFO] __main__.py:250 - majority-element/2025-07-02 13.42.46 - Accepted - runtime 7ms - memory 19.4MB.py already exists, skipping it
2025-08-22 12:22:55,890 [INFO] __main__.py:250 - majority-element/2025-07-02 13.35.33 - Accepted - runtime 15ms - memory 19.4MB.py already exists, skipping it
2025-08-22 12:22:56,924 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:56,926 [INFO] __main__.py:250 - remove-duplicates-from-sorted-array/2025-07-02 12.52.28 - Accepted - runtime 57ms - memory 18.9MB.py already exists, skipping it
2025-08-22 12:22:56,927 [INFO] __main__.py:250 - remove-duplicates-from-sorted-array/2025-07-02 12.51.01 - Accepted - runtime 58ms - memory 18.9MB.py already exists, skipping it
2025-08-22 12:22:57,438 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:57,440 [INFO] __main__.py:250 - remove-element/2025-07-02 12.47.58 - Accepted - runtime 0ms - memory 17.9MB.py already exists, skipping it
2025-08-22 12:22:57,440 [INFO] __main__.py:250 - remove-element/2025-07-02 12.47.37 - Accepted - runtime 1ms - memory 17.7MB.py already exists, skipping it
2025-08-22 12:22:57,441 [INFO] __main__.py:250 - remove-element/2025-07-02 12.45.03 - Accepted - runtime 0ms - memory 17.5MB.py already exists, skipping it
2025-08-22 12:22:58,259 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:58,261 [INFO] __main__.py:250 - total-characters-in-string-after-transformations-i/2025-05-13 07.47.57 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:22:58,262 [INFO] __main__.py:250 - total-characters-in-string-after-transformations-i/2025-05-13 07.47.04 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:22:58,768 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:22:58,770 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.39.47 - Accepted - runtime 0ms - memory 11.2MB.cpp already exists, skipping it
2025-08-22 12:22:58,770 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.38.24 - Accepted - runtime 6ms - memory 14.2MB.cpp already exists, skipping it
2025-08-22 12:22:58,771 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.35.56 - Accepted - runtime 16ms - memory 17.5MB.cpp already exists, skipping it
2025-08-22 12:22:58,771 [INFO] __main__.py:250 - zigzag-conversion/2025-05-12 08.32.29 - Accepted - runtime 7ms - memory 14.1MB.cpp already exists, skipping it
2025-08-22 12:23:03,771 [DEBUG] leetcode.py:150 - Exporting submissions from 200 to 220
2025-08-22 12:23:04,304 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=200&limit=20 HTTP/1.1" 200 None
2025-08-22 12:23:04,307 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1631494691,"question_id":2215,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747016491,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631494691/","is_pending":"Not Pending","title":"Finding 3-Digit Even Numbers","memory":"12.3 MB","code":"class Solution {\\npublic:\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        array<int, 10> freq={0}; \\n        int cntEven=0;\\n        for(int x: digits){\\n            freq[x]++;\\n            cntEven+=(x&1)==0;\\n        }\\n        if (cntEven==0) return {};\\n        vector<int> ans;\\n        for(int x=100; x<=999; x+=2){\\n            auto freq0=freq;\\n            int x0=x%10, x1=(x/10)%10, x2=x/100;\\n            if (freq0[x0]--<=0) continue;\\n            if (freq0[x1]--<=0) continue;\\n            if (freq0[x2]--<=0) continue;\\n            ans.push_back(x);\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"finding-3-digit-even-numbers","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1631493792,"question_id":2215,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747016362,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1631493792/","is_pending":"Not Pending","title":"Finding 3-Digit Even Numbers","memory":"12.5 MB","code":"class Solution {\\npublic:\\n    bool can_construct(int i, vector<int>& digits) {\\n        int ones = i % 10;\\n        int tens = (i / 10) % 10;\\n        int hundereds = i / 100;\\n        bool b_ones = false;\\n        bool b_tens = false;\\n        bool b_hundereds = false;\\n        for (auto x : digits) {\\n            if (x == ones && !b_ones) {\\n                b_ones = true;\\n                continue;\\n            }\\n            if (x == tens && !b_tens) {\\n                b_tens = true;\\n                continue;\\n            }\\n            if (x == hundereds && !b_hundereds) {\\n                b_hundereds = true;\\n                continue;\\n            }\\n        }\\n        return (b_ones && b_tens && b_hundereds);\\n    }\\n\\n    vector<int> findEvenNumbers(vector<int>& digits) {\\n        vector<int> ans;\\n        int i = 100;\\n        while (i < 999) {\\n            if (can_construct(i, digits)) {\\n                ans.push_back(i);\\n            }\\n            i += 2;\\n        }\\n        return ans;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"finding-3-digit-even-numbers","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1631486654,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747015320,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1631486654/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"11.6 MB","code":"class Solution {\\npublic:\\n    string longestPalindrome(string s) {\\n        string processed = \\"#\\";\\n        for (char c : s)\\n            processed += c, processed += \'#\';\\n\\n        int n = processed.size(), center = 0, right = 0, max_len = 0, start = 0;\\n        vector<int> p(n, 0);\\n\\n        for (int i = 0; i < n; i++) {\\n            if (i < right)\\n                p[i] = min(right - i, p[2 * center - i]); // Mirror from left\\n\\n            // Expand around i\\n            int l = i - p[i] - 1, r = i + p[i] + 1;\\n            while (l >= 0 && r < n && processed[l] == processed[r]) {\\n                p[i]++;\\n                l--;\\n                r++;\\n            }\\n\\n            // Update rightmost palindrome\\n            if (i + p[i] > right) {\\n                center = i;\\n                right = i + p[i];\\n            }\\n\\n            // Track longest\\n            if (p[i] > max_len) {\\n                max_len = p[i];\\n                start = (i - max_len) / 2; // Convert to original indices\\n            }\\n        }\\n\\n        return s.substr(start, max_len);\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1631486252,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747015258,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1631486252/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    string processed = \\"#\\";\\n    for (char c : s) {\\n        processed += c; processed += \'#\';\\n    }\\n    \\n    int n = processed.size(), center = 0, right = 0, max_len = 0, start = 0;\\n    vector<int> p(n, 0);\\n\\n    for (int i = 0; i < n; i++) {\\n        if (i < right) \\n            p[i] = min(right - i, p[2*center - i]); // Mirror from left\\n        \\n        // Expand around i\\n        int l = i - p[i] - 1, r = i + p[i] + 1;\\n        while (l >= 0 && r < n && processed[l] == processed[r]) {\\n            p[i]++;\\n            l--;\\n            r++;\\n        }\\n        \\n        // Update rightmost palindrome\\n        if (i + p[i] > right) {\\n            center = i;\\n            right = i + p[i];\\n        }\\n        \\n        // Track longest\\n        if (p[i] > max_len) {\\n            max_len = p[i];\\n            start = (i - max_len) / 2; // Convert to original indices\\n        }\\n    }\\n    \\n    return s.substr(start, max_len);\\n};","compare_result":null,"title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1631486082,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747015233,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1631486082/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    string processed = \\"#\\";\\n    for (char c : s) processed += c, processed += \'#\';\\n    \\n    int n = processed.size(), center = 0, right = 0, max_len = 0, start = 0;\\n    vector<int> p(n, 0);\\n\\n    for (int i = 0; i < n; i++) {\\n        if (i < right) \\n            p[i] = min(right - i, p[2*center - i]); // Mirror from left\\n        \\n        // Expand around i\\n        int l = i - p[i] - 1, r = i + p[i] + 1;\\n        while (l >= 0 && r < n && processed[l] == processed[r]) {\\n            p[i]++;\\n            l--;\\n            r++;\\n        }\\n        \\n        // Update rightmost palindrome\\n        if (i + p[i] > right) {\\n            center = i;\\n            right = i + p[i];\\n        }\\n        \\n        // Track longest\\n        if (p[i] > max_len) {\\n            max_len = p[i];\\n            start = (i - max_len) / 2; // Convert to original indices\\n        }\\n    }\\n    \\n    return s.substr(start, max_len);\\n};","compare_result":null,"title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1631480818,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747014449,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/1631480818/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"9.5 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(const string& s, int left, int right) {\\n        while (left < right) {\\n            if (s[left++] != s[right--]) return false;\\n        }\\n        return true;\\n    }\\n\\n    string longestPalindrome(string s) {\\n        int n = s.size();\\n        for (int len = n; len > 0; --len) {\\n            for (int start = 0; start <= n - len; ++start) {\\n                int end = start + len - 1;\\n                if (isPalindrome(s, start, end))\\n                    return s.substr(start, len);\\n            }\\n        }\\n        return \\"\\";\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1631478823,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747014149,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1631478823/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s){\\n        for (int i = 0; i < s.size() / 2; i++){\\n            if (s[i] != s[s.size() -1 -i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    string longestPalindrome(string s) {\\n        for (int i = s.size(); i > 0; i--){\\n            for (int startindex = 0; startindex <= s.size() - i; startindex++)\\n            if (isPalindrome(s.substr(startindex, i))) return s.substr(startindex, i);\\n        }\\n        return \\"\\";\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1631478004,"question_id":5,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1747014020,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1631478004/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s){\\n        if (s.size() < 2) return true;\\n        if (s[0] != s[s.size()-1]) return false;\\n        return isPalindrome(s.substr(1, s.size()-2));\\n    }\\n\\n    string longestPalindrome(string s) {\\n        for (int i = s.size(); i > 0; i--){\\n            for (int startindex = 0; startindex <= s.size() - i; startindex++)\\n            if (isPalindrome(s.substr(startindex, i))) return s.substr(startindex, i);\\n        }\\n        return \\"\\";\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1631072999,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746970843,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1631072999/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"10.3 MB","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() < 2) return s.length();\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start++;\\n                    end--;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1631072602,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746970807,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631072602/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start++;\\n                    end--;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1631021976,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966288,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631021976/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 1;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start++;\\n                    end = start;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1631021607,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966255,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631021607/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 1;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_result":"111111111111111111101111111101111110111111011111110110011111111111111110010110111011011011111011110011011111001110101011001101110000001011010100110011101011100000110001001100011101110010011110110000001101010001110100100101000000010010000010100110100001000000001001000011111011000010000000000001000000010111000001001010100000100001001000100000111111110010001011001100000011110010000100100100010110011010001010110101001010010011100110001100111001011100111000010000000100000000001011110100000111000001100011101001100100110011000101101010000000000100000110010011000101100110000010000001011000010000000100110000000100001011101000101000100000000100000001000000111011000101010010000001010101000010010011000111011101100000100001100000101000001010010001110101100010011100010001011000001010001000101000000011010011000000101000001001001001000111101100111010011101100001000000010000001001000011010010100000001001010000011101000010101000100000001101110010001010010110010011000010110000001000000000011","title_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1631021334,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966230,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631021334/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s.length() == 0) return 0;\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1631020977,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966196,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1631020977/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        if (s == \\"\\") return 0;\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1631020608,"question_id":3,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746966163,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1631020608/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"N/A","code":"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        int len = 0;\\n        int start = 0;\\n        int end = 0;\\n        while(end < s.length()-1){\\n            for (int i = start; i <= end; i++){\\n                if (s[end + 1] == s[i]){\\n                    start = end + 1;\\n                }\\n            }\\n            end++;\\n            if (end - start + 1 > len) len = end - start + 1;\\n        }\\n        return len;\\n    }\\n};","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1631007308,"question_id":2,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746964964,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1631007308/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"77.1 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        ListNode* dummyHead = new ListNode(0);\\n        ListNode* tail = dummyHead;\\n        int carry = 0;\\n\\n        while (l1 != nullptr || l2 != nullptr || carry != 0) {\\n            int digit1 = (l1 != nullptr) ? l1->val : 0;\\n            int digit2 = (l2 != nullptr) ? l2->val : 0;\\n\\n            int sum = digit1 + digit2 + carry;\\n            int digit = sum % 10;\\n            carry = sum / 10;\\n\\n            ListNode* newNode = new ListNode(digit);\\n            tail->next = newNode;\\n            tail = tail->next;\\n\\n            l1 = (l1 != nullptr) ? l1->next : nullptr;\\n            l2 = (l2 != nullptr) ? l2->next : nullptr;\\n        }\\n\\n        ListNode* result = dummyHead->next;\\n        delete dummyHead;\\n        return result;\\n    }\\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1631005724,"question_id":2,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746964816,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1631005724/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"77 MB","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        int sum = 0;\\n        ListNode* head = new ListNode;\\n        ListNode* ptr = head;\\n        while (l1 != NULL || l2 != NULL || sum > 0) {\\n            sum += (l1 != NULL ? l1->val : 0) + (l2 != NULL ? l2->val : 0);\\n            ptr->val = sum % 10;\\n            sum /= 10;\\n            if (l1)\\n                l1 = l1->next;\\n            if (l2)\\n                l2 = l2->next;\\n            if (l1 != NULL || l2 != NULL || sum > 0) {\\n                ptr->next = new ListNode;\\n                ptr = ptr->next;\\n            }\\n        }\\n        return head;\\n    }\\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1630934494,"question_id":1293,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746958266,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1630934494/","is_pending":"Not Pending","title":"Three Consecutive Odds","memory":"11.9 MB","code":"class Solution {\\npublic:\\n    bool threeConsecutiveOdds(vector<int>& arr) {\\n        if (arr.size() < 3) return false;\\n        for(int i = 0; i < arr.size() - 2; i++){\\n            if (arr[i] % 2 == 1 && arr[i+1] % 2 == 1 && arr[i+2] % 2 == 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"three-consecutive-odds","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1630934011,"question_id":1293,"lang":"cpp","lang_name":"C++","time":"3\xc2\xa0months, 1\xc2\xa0week","timestamp":1746958223,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1630934011/","is_pending":"Not Pending","title":"Three Consecutive Odds","memory":"N/A","code":"class Solution {\\npublic:\\n    bool threeConsecutiveOdds(vector<int>& arr) {\\n        for(int i = 0; i < arr.size() - 2; i++){\\n            if (arr[i] % 2 == 1 && arr[i+1] % 2 == 1 && arr[i+2] % 2 == 1) return true;\\n        }\\n        return false;\\n    }\\n};","compare_result":"11000000000000000000000000000000000000","title_slug":"three-consecutive-odds","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1549227781,"question_id":560,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1740026012,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1549227781/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        presum = [0]\\n        for i in nums:\\n            presum.append(presum[-1]+i)\\n        \\n        count = 0\\n        for i in range(len(presum)):\\n            for j in range(i+1, len(presum)):\\n                if presum[j] - presum[i] == k:\\n                    count += 1\\n        return count\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":30}],"has_next":true,"last_key":""}'
2025-08-22 12:23:06,045 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:06,048 [INFO] __main__.py:250 - finding-3-digit-even-numbers/2025-05-12 07.51.31 - Accepted - runtime 0ms - memory 12.3MB.cpp already exists, skipping it
2025-08-22 12:23:06,049 [INFO] __main__.py:250 - finding-3-digit-even-numbers/2025-05-12 07.49.22 - Accepted - runtime 7ms - memory 12.5MB.cpp already exists, skipping it
2025-08-22 12:23:06,862 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:06,865 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.32.00 - Accepted - runtime 2ms - memory 11.6MB.cpp already exists, skipping it
2025-08-22 12:23:06,873 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.30.58 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:06,874 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.30.33 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:06,875 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.17.29 - Accepted - runtime 85ms - memory 9.5MB.cpp already exists, skipping it
2025-08-22 12:23:06,876 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.12.29 - Time Limit Exceeded - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:06,877 [INFO] __main__.py:250 - longest-palindromic-substring/2025-05-12 07.10.20 - Time Limit Exceeded - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:10,742 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:10,744 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 19.10.43 - Accepted - runtime 15ms - memory 10.3MB.cpp already exists, skipping it
2025-08-22 12:23:10,745 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 19.10.07 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:10,746 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.54.48 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:10,746 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.54.15 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:10,746 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.53.50 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:10,747 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.53.16 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:10,747 [INFO] __main__.py:250 - longest-substring-without-repeating-characters/2025-05-11 17.52.43 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:11,409 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:11,412 [INFO] __main__.py:250 - add-two-numbers/2025-05-11 17.32.44 - Accepted - runtime 0ms - memory 77.1MB.cpp already exists, skipping it
2025-08-22 12:23:11,413 [INFO] __main__.py:250 - add-two-numbers/2025-05-11 17.30.16 - Accepted - runtime 3ms - memory 77MB.cpp already exists, skipping it
2025-08-22 12:23:12,140 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:12,483 [INFO] __main__.py:250 - three-consecutive-odds/2025-05-11 15.41.06 - Accepted - runtime 0ms - memory 11.9MB.cpp already exists, skipping it
2025-08-22 12:23:12,483 [INFO] __main__.py:250 - three-consecutive-odds/2025-05-11 15.40.23 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:13,008 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:13,010 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 10.03.32 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:23:18,010 [DEBUG] leetcode.py:150 - Exporting submissions from 220 to 240
2025-08-22 12:23:18,635 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=220&limit=20 HTTP/1.1" 200 None
2025-08-22 12:23:18,706 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1549225211,"question_id":560,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1740025833,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1549225211/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                if to < len(nums):\\n                    numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            elif fro <= to:\\n                count += 1\\n                to +=1\\n            else: \\n                to +=1\\n\\n        return count","compare_result":"111110010000010000000000000101101011001000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1549224333,"question_id":560,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1740025770,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1549224333/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            elif fro <= to:\\n                count += 1\\n                to +=1\\n            else: \\n                to +=1\\n\\n        return count","compare_result":"111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1549223781,"question_id":560,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1740025734,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1549223781/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            elif fro < to:\\n                count += 1\\n                to +=1\\n            else: \\n                to +=1\\n\\n        return count","compare_result":"111010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1549221975,"question_id":560,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1740025612,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1549221975/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        fro = 0\\n        to = 0\\n        numsum = nums[0]\\n        count = 0\\n\\n        while to < len(nums):\\n            if numsum < k:\\n                to += 1\\n                numsum += nums[to]\\n            elif numsum > k:\\n                numsum -= nums[fro]\\n                fro += 1\\n            else:\\n                count += 1\\n                to +=1\\n                \\n        return count","compare_result":"111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1549213622,"question_id":560,"lang":"python3","lang_name":"Python3","time":"6\xc2\xa0months","timestamp":1740025028,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1549213622/","is_pending":"Not Pending","title":"Subarray Sum Equals K","memory":"N/A","code":"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        presum = [0]\\n        for i in nums:\\n            presum.append(presum[-1]+i)\\n        \\n        count = 0\\n        for i in range(len(presum)):\\n            for j in range(i+1, len(presum)):\\n                if presum[j] - presum[i] == k:\\n                    count += 1\\n        return count\\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000","title_slug":"subarray-sum-equals-k","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1275933312,"question_id":1,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1717389660,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1275933312/","is_pending":"Not Pending","title":"Two Sum","memory":"14.2 MB","code":"#include <unordered_map>\\n \\nclass Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        // Declare an unordered map to store the numbers and their indices\\n        unordered_map<int, int> mp;\\n       \\n        // Loop through the array\\n        for(int i = 0; i < nums.size(); i++){\\n            // Check if the complement of the current number exists in the map\\n            if(mp.find(target - nums[i]) == mp.end())\\n                // If not, add the current number and its index to the map\\n                mp[nums[i]] = i;\\n            else\\n                // If yes, return the indices of the current number and its complement\\n                return {mp[target - nums[i]], i};\\n        }\\n \\n        // If no pair is found, return {-1, -1} as a default value\\n        return {-1, -1};\\n    }\\n};\\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1275927179,"question_id":1,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 2\xc2\xa0months","timestamp":1717389197,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/1275927179/","is_pending":"Not Pending","title":"Two Sum","memory":"12.7 MB","code":"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        vector<int> ans;\\n        for(int i = 0; i<nums.size(); i++){\\n            for(int j = i+1; j<nums.size(); j++){\\n                if(nums[i]+nums[j]==target) {\\n                    ans.push_back(i);\\n                    ans.push_back(j);\\n                    return ans;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1264162068,"question_id":125,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716309688,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1264162068/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"8.6 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        int i = 0, j = s.size() - 1;\\n        while (i < j) {\\n            if (!isalnum(s[i])) \\n                i++;\\n            else if (!isalnum(s[j])) \\n                j--;\\n            else if ((tolower(s[i]) != tolower(s[j]))) \\n                return false;\\n            else {\\n                i++;\\n                j--;\\n            }\\n        }\\n        return true;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1262057681,"question_id":125,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716106832,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1262057681/","is_pending":"Not Pending","title":"Valid Palindrome","memory":"8.7 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        int i = 0, j = s.size() - 1;\\n        while (i < j) {\\n            if (!isalnum(s[i])) \\n                i++;\\n            else if (!isalnum(s[j])) \\n                j--;\\n            else if (!(tolower(s[i]) == tolower(s[j]))) \\n                return false;\\n            else {\\n                i++;\\n                j--;\\n            }\\n        }\\n        return true;\\n    }\\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-palindrome","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1261108159,"question_id":1013,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716016292,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1261108159/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"7 MB","code":"class Solution {\\npublic:\\n    int fib(int n) {\\n        int a=0,b=1;\\n        for(int i = 0; i<n; i++){\\n            b = a+b;\\n            a = b-a;\\n        }\\n        return a;\\n    }\\n};","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1261100048,"question_id":1013,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1716015535,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1261100048/","is_pending":"Not Pending","title":"Fibonacci Number","memory":"7 MB","code":"class Solution {\\npublic:\\n    int fib(int n) {\\n        if (n==0 || n==1){\\n            return n;\\n        }\\n        return fib(n-1)+fib(n-2);\\n    }\\n};","compare_result":"1111111111111111111111111111111","title_slug":"fibonacci-number","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1251164748,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023961,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251164748/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0|| x!=0 && x%10==0) return 0;\\n        else if (x<10) return 1;\\n        int n = x,p=0;\\n        do{\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n|| p==n/10) return 1;\\n            else if(n>p) return 0;\\n        }while(n);\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1251164177,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023914,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251164177/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0|| x!=0 && x%10==0) return 0;\\n        int n = x,p=0;\\n        do{\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n|| p==n/10) return 1;\\n            else if(n>p) return 0;\\n        }while(n);\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1251163366,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023849,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251163366/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0|| x!=0 && x%10==0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n|| p==n/10) return 1;\\n            else if(n>p) return 0;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_result":"","title_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1251158324,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023406,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251158324/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n || p==n/10 ) return 1;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1251158108,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023386,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251158108/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n || p==n%10 ) return 1;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1251157601,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023344,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251157601/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10;\\n            n/=10;\\n            if(p==n) return 1;\\n        }\\n        // if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1251155857,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023193,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1251155857/","is_pending":"Not Pending","title":"Palindrome Number","memory":"8.2 MB","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + n% 10 ;\\n            n/=10;\\n        }\\n        if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1251154955,"question_id":9,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1715023114,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251154955/","is_pending":"Not Pending","title":"Palindrome Number","memory":"N/A","code":"class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        if (x<0) return 0;\\n        int n = x,p=0;\\n        while(n){\\n            if( p > INT_MAX/10 || p < INT_MIN/10) return 0;\\n            p = p*10 + x% 10 ;\\n            x/=10;\\n        }\\n        if (p==x) return 1;\\n        return 0;\\n    }\\n};","compare_resulttitle_slug":"palindrome-number","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1250038636,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714916150,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1250038636/","is_pending":"Not Pending","title":"Reverse Integer","memory":"7.4 MB","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p<INT_MIN/10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":10}],"has_next":true,"last_key":""}'
2025-08-22 12:23:18,708 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 10.00.33 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:23:18,708 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.59.30 - Runtime Error - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:23:18,709 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.58.54 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:23:18,709 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.56.52 - Wrong Answer - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:23:18,709 [INFO] __main__.py:250 - subarray-sum-equals-k/2025-02-20 09.47.08 - Time Limit Exceeded - runtime NA - memory NA.py already exists, skipping it
2025-08-22 12:23:18,710 [INFO] __main__.py:250 - two-sum/2024-06-03 10.11.00 - Accepted - runtime 12ms - memory 14.2MB.cpp already exists, skipping it
2025-08-22 12:23:18,710 [INFO] __main__.py:250 - two-sum/2024-06-03 10.03.17 - Accepted - runtime 104ms - memory 12.7MB.cpp already exists, skipping it
2025-08-22 12:23:19,152 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:19,154 [INFO] __main__.py:250 - valid-palindrome/2024-05-21 22.11.28 - Accepted - runtime 8ms - memory 8.6MB.cpp already exists, skipping it
2025-08-22 12:23:19,154 [INFO] __main__.py:250 - valid-palindrome/2024-05-19 13.50.32 - Accepted - runtime 4ms - memory 8.7MB.cpp already exists, skipping it
2025-08-22 12:23:19,759 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:19,760 [INFO] __main__.py:250 - fibonacci-number/2024-05-18 12.41.32 - Accepted - runtime 0ms - memory 7MB.cpp already exists, skipping it
2025-08-22 12:23:19,761 [INFO] __main__.py:250 - fibonacci-number/2024-05-18 12.28.55 - Accepted - runtime 8ms - memory 7MB.cpp already exists, skipping it
2025-08-22 12:23:19,762 [INFO] __main__.py:250 - palindrome-number/2024-05-07 01.02.41 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:19,762 [INFO] __main__.py:250 - palindrome-number/2024-05-07 01.01.54 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:19,762 [INFO] __main__.py:250 - palindrome-number/2024-05-07 01.00.49 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:19,763 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.53.26 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:19,763 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.53.06 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:19,763 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.52.24 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:19,764 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.49.53 - Accepted - runtime 4ms - memory 8.2MB.cpp already exists, skipping it
2025-08-22 12:23:19,764 [INFO] __main__.py:250 - palindrome-number/2024-05-07 00.48.34 - Wrong Answer - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:20,299 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-22 12:23:20,301 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.05.50 - Accepted - runtime 0ms - memory 7.4MB.cpp already exists, skipping it
2025-08-22 12:23:25,301 [DEBUG] leetcode.py:150 - Exporting submissions from 240 to 260
2025-08-22 12:23:25,809 [DEBUG] connectionpool.py:544 - https://leetcode.com:443 "GET /api/submissions/?offset=240&limit=20 HTTP/1.1" 200 None
2025-08-22 12:23:25,810 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1250038155,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714916103,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250038155/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p<INT_MIN*10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1250037189,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714916011,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250037189/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p>INT_MIN*10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1250037052,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915998,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250037052/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10 || p<INT_MIN*10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":7},{"id":1250036653,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915959,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250036653/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10) return 0;\\n           p = p*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000","title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":6},{"id":1250036496,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915943,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1250036496/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n           if(p>INT_MAX/10) return 0;\\n           r = r*10+x%10;\\n           x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_result":null,"title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":5},{"id":1250034905,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915790,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250034905/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        try{\\n            while(x){\\n                p= p*10 + x%10;\\n                x/=10;\\n            }\\n        }\\n        catch(int p){\\n            return 0;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":4},{"id":1250033858,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915686,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1250033858/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        try{\\n            while(x){\\n                p= p*10 + x%10;\\n                x/=10;\\n            }\\n        }\\n        /*catch(UndefinedBehaviorSanitizer){\\n            return 0;\\n        }*/\\n        return p;\\n    }\\n};","compare_result":null,"title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":3},{"id":1250033470,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915648,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1250033470/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        try{\\n            while(x){\\n                p= p*10 + x%10;\\n                x/=10;\\n            }\\n        }\\n        catch(UndefinedBehaviorSanitizer){\\n            return 0;\\n        }\\n        return p;\\n    }\\n};","compare_result":null,"title_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":2},{"id":1250031940,"question_id":7,"lang":"cpp","lang_name":"C++","time":"1\xc2\xa0year, 3\xc2\xa0months","timestamp":1714915506,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1250031940/","is_pending":"Not Pending","title":"Reverse Integer","memory":"N/A","code":"class Solution {\\npublic:\\n    int reverse(int x) {\\n        int p = 0;\\n        while(x){\\n            p= p*10 + x%10;\\n            x/=10;\\n        }\\n        return p;\\n    }\\n};","compare_resulttitle_slug":"reverse-integer","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-08-22 12:23:25,812 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.05.03 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,813 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.03.31 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,814 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.03.18 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,815 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.02.39 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,815 [INFO] __main__.py:250 - reverse-integer/2024-05-05 19.02.23 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,816 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.59.50 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,817 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.58.06 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,817 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.57.28 - Compile Error - runtime NA - memory NA.cpp already exists, skipping it
2025-08-22 12:23:25,818 [INFO] __main__.py:250 - reverse-integer/2024-05-05 18.55.06 - Runtime Error - runtime NA - memory NA.cpp already exists, skipping it
